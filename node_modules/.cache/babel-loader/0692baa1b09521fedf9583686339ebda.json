{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/mydev/Church-Management/src/views/Components/EditData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { url } from '../Constants';\nimport { Button, Grid, MenuItem, Select, TextField, Typography } from '@mui/material';\nimport { CAlert, CFormSelect, CFormText, CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow } from '@coreui/react';\nimport { AlertMessage } from './Support/AlertMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditData = () => {\n  _s();\n\n  const [data, setdata] = useState([]);\n  const [pageno, setPageno] = useState(0);\n  const [pages, setPages] = useState([]);\n  const [editdata, seteditdata] = useState();\n  const items = 10;\n  const [familyheads, setFamilyheads] = useState([]);\n  const [addresses, setAddresses] = useState([]);\n  useEffect(() => {\n    fetch(`${url}/member-data-count.php`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      if (result['status'] == 1) {\n        let pagecount = parseInt(parseInt(result['message']) / items);\n        let pageList = [];\n\n        for (let i = 0; i <= pagecount; i++) {\n          pageList.push(i);\n        }\n\n        setPages(pageList);\n        pageList = [];\n        console.log(pageList);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    fetch(`${url}/data-fetch.php?page_no=${pageno}&items=${items}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      if (result['status'] == 1) {\n        setdata(result['message']);\n      } else {\n        setNotify({ ...notify,\n          isOpen: true,\n          severity: result['status'] == 1 ? \"success\" : \"error\",\n          message: String(result['message'])\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [pageno]);\n\n  const searchfamilyhead = () => {\n    fetch(`${url}/searchfamilyhead.php`, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      let filteredresult = [...new Set(result)];\n      setFamilyheads(filteredresult);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const searchaddress = () => {\n    fetch(`${url}/searchaddress.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      let filteredresult = [...new Set(result)];\n      setAddresses(filteredresult);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const [display2, setdisplay2] = useState(\"none\");\n  const [row, setrow] = useState(0);\n  const [focus, isFocused] = useState({\n    'familyid': data[row] !== undefined ? data[row]['FamilyID'] !== '' ? true : false : true,\n    'selfid': data[row] !== undefined ? data[row]['SelfID'] !== '' ? true : false : true,\n    'name': data[row] !== undefined ? data[row]['Name'] !== '' ? true : false : true,\n    'email': data[row] !== undefined ? data[row]['EmailID'] !== '' ? true : false : true,\n    'mobile': data[row] !== undefined ? data[row]['Mobile'] !== '' ? true : false : true,\n    'address': data[row] !== undefined ? data[row]['Address'] !== '' ? true : false : true,\n    'familyhead': data[row] !== undefined ? data[row]['FamilyHead'] !== '' ? true : false : true\n  });\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    variant: 'filled',\n    severity: 'error'\n  });\n\n  const makechanges = () => {\n    fetch(`${url}/data-edit.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        data: data[row]\n      })\n    }).then(res => res.json()).then(result => {\n      setNotify({ ...notify,\n        isOpen: true,\n        message: result\n      });\n      window.location.reload();\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const deleteRecord = () => {\n    fetch(`${url}/data-delete.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        selfid: data[row]['SelfID']\n      })\n    }).then(res => res.json()).then(result => {\n      setNotify({ ...notify,\n        isOpen: true,\n        message: result\n      });\n      window.location.reload();\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const Typograph = props => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"lead\",\n      children: [\" \", props.children, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this);\n  };\n\n  const [searchby, setsearchby] = useState(\"id\");\n  const [value, setvalue] = useState();\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    className: \"editform\",\n    children: [/*#__PURE__*/_jsxDEV(AlertMessage, {\n      notify: notify,\n      setNotify: setNotify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), // editdata.length>0?\n    console.log(editdata) // <DataEntryForms\n    //     familyheads={familyheads}\n    //     data={data}\n    //     notify={notify}\n    //     setNotify={setNotify}\n    //     setData={setData}\n    //     validated={validated}\n    //     handleSubmit={handleSubmit}\n    // />\n    // :''\n    , /*#__PURE__*/_jsxDEV(Grid, {\n      direction: \"column\",\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Pageno\",\n        defaultValue: pageno,\n        onChange: e => {\n          setPageno(e.target.value);\n        },\n        children: pages.map((val, index) => {\n          return /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: val,\n            children: val\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CTable, {\n      children: [/*#__PURE__*/_jsxDEV(CTableHead, {\n        children: [/*#__PURE__*/_jsxDEV(CTableHeaderCell, {\n          children: \"SELF ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CTableHeaderCell, {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CTableHeaderCell, {\n          children: \"Family head\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CTableBody, {\n        children: data.map((k, index) => {\n          return /*#__PURE__*/_jsxDEV(CTableRow, {\n            children: [/*#__PURE__*/_jsxDEV(CTableDataCell, {\n              children: k.SelfID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CTableDataCell, {\n              children: k.Name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CTableDataCell, {\n              children: k.FamilyHead\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CTableDataCell, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  seteditdata(data[index]);\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditData, \"jORiMHAKgyj1NzVdOqvtqnmwLRY=\");\n\n_c = EditData;\nexport default EditData;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditData\");","map":{"version":3,"sources":["/home/david/Desktop/mydev/Church-Management/src/views/Components/EditData.js"],"names":["React","useEffect","useState","url","Button","Grid","MenuItem","Select","TextField","Typography","CAlert","CFormSelect","CFormText","CTable","CTableBody","CTableDataCell","CTableHead","CTableHeaderCell","CTableRow","AlertMessage","EditData","data","setdata","pageno","setPageno","pages","setPages","editdata","seteditdata","items","familyheads","setFamilyheads","addresses","setAddresses","fetch","method","headers","then","res","json","result","pagecount","parseInt","pageList","i","push","console","log","setNotify","notify","isOpen","severity","message","String","catch","error","searchfamilyhead","filteredresult","Set","searchaddress","display2","setdisplay2","row","setrow","focus","isFocused","undefined","variant","makechanges","body","JSON","stringify","window","location","reload","deleteRecord","selfid","Typograph","props","children","searchby","setsearchby","value","setvalue","e","target","map","val","index","k","SelfID","Name","FamilyHead"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { url } from '../Constants';\nimport { Button, Grid, MenuItem, Select, TextField, Typography } from '@mui/material';\nimport { CAlert, CFormSelect, CFormText, CTable, CTableBody, CTableDataCell, CTableHead, CTableHeaderCell, CTableRow } from '@coreui/react';\nimport { AlertMessage } from './Support/AlertMessage';\n\nconst EditData = () => {\n    const [data, setdata] = useState([]);\n    const [pageno, setPageno] = useState(0);\n    const [pages, setPages] = useState([]);\n    const [editdata,seteditdata]=useState();\n    const items = 10;\n    const [familyheads, setFamilyheads] = useState([]);\n    const [addresses, setAddresses] = useState([]);\n\n\n    useEffect(() => {\n        fetch(`${url}/member-data-count.php`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        })\n            .then((res) => res.json())\n            .then((result) => {\n                if (result['status'] == 1) {\n                    let pagecount = parseInt(parseInt(result['message']) / items);\n                    let pageList = [];\n                    for (let i = 0; i <= pagecount; i++) {\n                        pageList.push(i);\n                    }\n                    setPages(pageList);\n                    pageList = [];\n                    console.log(pageList);\n                }\n            })\n    }, [])\n\n    useEffect(() => {\n        fetch(`${url}/data-fetch.php?page_no=${pageno}&items=${items}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n\n        }).then((res) => res.json())\n            .then((result) => {\n                if (result['status'] == 1) {\n                    setdata(result['message']);\n                }\n                else {\n                    setNotify({\n                        ...notify,\n                        isOpen: true,\n                        severity: result['status'] == 1 ? \"success\" : \"error\",\n                        message: String(result['message'])\n                    });\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }, [pageno]);\n\n\n    const searchfamilyhead = () => {\n        fetch(`${url}/searchfamilyhead.php`, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n\n        })\n            .then(res => res.json())\n            .then((result) => {\n                let filteredresult = [...new Set(result)];\n                setFamilyheads(filteredresult);\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n    const searchaddress = () => {\n        fetch(`${url}/searchaddress.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n\n        })\n            .then(res => res.json())\n            .then((result) => {\n                let filteredresult = [...new Set(result)];\n                setAddresses(filteredresult);\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n\n    const [display2, setdisplay2] = useState(\"none\");\n    const [row, setrow] = useState(0);\n    const [focus, isFocused] = useState({ 'familyid': data[row] !== undefined ? data[row]['FamilyID'] !== '' ? true : false : true, 'selfid': data[row] !== undefined ? data[row]['SelfID'] !== '' ? true : false : true, 'name': data[row] !== undefined ? data[row]['Name'] !== '' ? true : false : true, 'email': data[row] !== undefined ? data[row]['EmailID'] !== '' ? true : false : true, 'mobile': data[row] !== undefined ? data[row]['Mobile'] !== '' ? true : false : true, 'address': data[row] !== undefined ? data[row]['Address'] !== '' ? true : false : true, 'familyhead': data[row] !== undefined ? data[row]['FamilyHead'] !== '' ? true : false : true })\n    const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n\n    const makechanges = () => {\n        fetch(`${url}/data-edit.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                data: data[row]\n            })\n\n        }).then((res) => res.json())\n            .then((result) => {\n                setNotify({\n                    ...notify,\n                    isOpen: true,\n                    message: result\n                })\n                window.location.reload();\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n    const deleteRecord = () => {\n\n\n        fetch(`${url}/data-delete.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                selfid: data[row]['SelfID']\n            })\n\n        }).then((res) => res.json())\n            .then((result) => {\n                setNotify({\n                    ...notify,\n                    isOpen: true,\n                    message: result\n                })\n                window.location.reload();\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n\n    }\n\n    const Typograph = (props) => {\n        return (\n            <p className='lead' > {props.children} </p>\n        )\n    }\n    const [searchby, setsearchby] = useState(\"id\");\n    const [value, setvalue] = useState();\n    return (\n        <Grid className=\"editform\" >\n            <AlertMessage\n                notify={notify}\n                setNotify={setNotify}\n            />\n            {/* <Grid style={{ display: 'flex', flexDirection: 'column' }}>\n                <Typograph >\n                    Search by\n                </Typograph>\n                <Grid\n                    width={100}\n                >\n                    <Select\n                        name=\"searchby\"\n                        defaultValue={\"name\"}\n                        onChange={(event) => setsearchby(event.target.value)}\n                    >\n                        <MenuItem value=\"id\">Id</MenuItem>\n                        <MenuItem value=\"name\">Name</MenuItem>\n                    </Select>\n                </Grid>\n                <TextField\n                    onChange={(event) => {\n                        const func = (k) => {\n                            const str = k.split(' ');\n                            for (let i = 0; i < str.length; i++) {\n\n                                str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                            }\n\n                            return str.join(' ');\n                        }\n                        let val = searchby === \"id\" ? event.target.value.toUpperCase() : func(event.target.value);\n                        setvalue(searchby === \"id\" ? event.target.value.toUpperCase() : func(event.target.value));\n\n                        if (searchby === \"id\") {\n                            data.map((l, index) => {\n                                if (l.FamilyID === val) {\n                                    setrow(index);\n                                    setdisplay2(\"block\");\n                                }\n                            })\n                        } else if (searchby === \"name\") {\n                            data.map((l, index) => {\n                                if (l.Name === val) {\n                                    setrow(index);\n                                    setdisplay2(\"block\");\n                                }\n                            })\n\n                        }\n                    }}\n                    style={{ width: 250, marginTop: 30, marginBottom: 30 }}\n                    value={value}\n                    placeholder={`Enter ${searchby}`}\n                    list={searchby === \"id\" ? \"idsearch\" : \"namesearch\"}\n                />\n\n                <datalist id=\"idsearch\" >\n                    {data.map((k, key) => {\n                        return (\n                            <option key={key}>{k.FamilyID}</option>\n                        )\n                    })}\n                </datalist>\n\n                <datalist id=\"namesearch\" >\n                    {data.map((k, key) => {\n                        return (\n                            <option key={key} >{k.Name}</option>\n                        )\n                    })}\n                </datalist>\n            </Grid> */}\n            {\n            // editdata.length>0?\n            console.log(editdata)\n            // <DataEntryForms\n            //     familyheads={familyheads}\n            //     data={data}\n            //     notify={notify}\n            //     setNotify={setNotify}\n            //     setData={setData}\n            //     validated={validated}\n            //     handleSubmit={handleSubmit}\n            // />\n            // :''\n            \n            }\n\n            <Grid direction={\"column\"} item>\n                <Select\n                    placeholder=\"Pageno\"\n                    defaultValue={pageno} onChange={\n                        (e) => {\n                            setPageno(e.target.value)\n                        }\n                    }>\n                    {pages.map((val, index) => {\n                        return (\n                            <MenuItem value={val} key={index} >{val}</MenuItem>\n                        )\n                    })}\n                </Select>\n            </Grid>\n            <CTable>\n                <CTableHead>\n                    <CTableHeaderCell>SELF ID</CTableHeaderCell>\n                    <CTableHeaderCell>Name</CTableHeaderCell>\n                    <CTableHeaderCell>Family head</CTableHeaderCell>\n\n                </CTableHead>\n                <CTableBody>\n                    {data.map((k, index) => {\n                        return (\n                            <CTableRow key={index}>\n                                <CTableDataCell>{k.SelfID}</CTableDataCell>\n                                <CTableDataCell>{k.Name}</CTableDataCell>\n                                <CTableDataCell>{k.FamilyHead}</CTableDataCell>\n                                <CTableDataCell><Button\n                                    onClick={() => {\n                                        seteditdata(data[index]);\n                                    }}\n                                >Edit</Button></CTableDataCell>\n\n                            </CTableRow>\n                        )\n                    })}\n                </CTableBody>\n            </CTable>\n\n\n\n\n        </Grid>\n    )\n}\nexport default EditData;"]},"metadata":{},"sourceType":"module"}