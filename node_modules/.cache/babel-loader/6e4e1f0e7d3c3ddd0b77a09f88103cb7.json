{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/mydev/Church-Management/src/views/Components/Accounting.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, TextField, Select, MenuItem, Button, IconButton, Typography, Table, TableBody, TableCell, TableRow, Autocomplete } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { url } from \"../Constants\";\nimport { AlertMessage } from \"./Support/AlertMessage\";\nimport { Datepicker } from \"./Support/Datepicker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Accounting = props => {\n  _s();\n\n  const {\n    setLoading\n  } = props;\n  const [people, setPeople] = useState([{\n    id: 1,\n    Name: '',\n    type: '',\n    Amount: ''\n  }]);\n  const [count, setCount] = useState(2);\n  const [names, setnames] = useState([]);\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    variant: 'filled',\n    severity: 'error'\n  });\n  const arrOfferingTypes = [{\n    \"name\": \"Select\",\n    \"value\": \"\"\n  }, {\n    \"name\": \"Tithe\",\n    \"value\": \"Tithe\"\n  }, {\n    \"name\": \"Offering\",\n    \"value\": \"Offering\"\n  }, {\n    \"name\": \"Missionary\",\n    \"value\": \"Missionary\"\n  }, {\n    \"name\": \"Special Offering\",\n    \"value\": \"Special Offering\"\n  }, {\n    \"name\": \"Baptism Offering\",\n    \"value\": \"Baptism Offering\"\n  }, {\n    \"name\": \"Birthday Offering\",\n    \"value\": \"Birthday Offering\"\n  }, {\n    \"name\": \"Wedding Offering\",\n    \"value\": \"Wedding Offering\"\n  }, {\n    \"name\": \"Child Dedication Offering\",\n    \"value\": \"Child Dedication Offering\"\n  }, {\n    \"name\": \"Committed Offering\",\n    \"value\": \"Committed Offering\"\n  }, {\n    \"name\": \"Building Fund\",\n    \"value\": \"Building Fund\"\n  }];\n  const [dateofofferings, setdateofofferings] = useState();\n  const [offeringsAsObject, setOfferings] = useState([{\n    \"price\": 2000,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 500,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 200,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 100,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 50,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 20,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 10,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 5,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 2,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 1,\n    \"cnt\": 0,\n    \"tot\": 0\n  }]);\n  let name = people.map(k => k.Name);\n  let type = people.map(k => k.type);\n  let amount = people.map(k => k.Amount);\n  let today = new Date();\n  let dd = today.getDate();\n  dd = dd < 10 ? \"0\" + dd : dd;\n  let mm = today.getMonth() + 1 > 12 ? today.getMonth() : today.getMonth() + 1;\n  mm = mm < 10 ? \"0\" + mm : mm;\n\n  if (dd === \"00\") {\n    dd = 31;\n    mm = mm - 1;\n  }\n\n  let yyyy = today.getFullYear();\n  today = yyyy + \"-\" + mm + \"-\" + dd;\n  let grandTotal = offeringsAsObject.reduce((accumulator, item) => accumulator + item.tot, 0);\n  grandTotal = isNaN(grandTotal) ? 0 : grandTotal;\n  let Total = isNaN(people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n  const churchOffering = isNaN(grandTotal - Total) ? 0 : grandTotal - Total;\n  let titheTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let offeringTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let missionaryTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let specialofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let baptismofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let birthdayofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let weddingofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let childdedicationofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let committedofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let buildingfundTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let arrOfTotals = [{\n    \"name\": \"Total\",\n    \"value\": Total\n  }, {\n    \"name\": \"Tithe Total\",\n    \"value\": titheTotal\n  }, {\n    \"name\": \"Offering Total\",\n    \"value\": offeringTotal\n  }, {\n    \"name\": \"Special Offering Total\",\n    \"value\": specialofferingTotal\n  }, {\n    \"name\": \"Missionary Total\",\n    \"value\": missionaryTotal\n  }, {\n    \"name\": \"Church Offering\",\n    \"value\": churchOffering\n  }, {\n    \"name\": \"Grand Total\",\n    \"value\": grandTotal\n  }];\n\n  const submit = () => {\n    if (name[0] && dateofofferings && amount !== 0 && churchOffering >= 0) {\n      setLoading(true);\n      fetch(`${url}/accounting.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: name,\n          type: type,\n          amount: amount,\n          dateofofferings: dateofofferings,\n          churchOffering: churchOffering,\n          titheTotal: titheTotal,\n          grandTotal: grandTotal,\n          offeringTotal: offeringTotal,\n          missionaryTotal: missionaryTotal,\n          specialofferingTotal: specialofferingTotal,\n          buildingfundTotal: buildingfundTotal,\n          baptismofferingTotal: baptismofferingTotal,\n          birthdayofferingTotal: birthdayofferingTotal,\n          weddingofferingTotal: weddingofferingTotal,\n          childdedicationofferingTotal: childdedicationofferingTotal,\n          committedofferingTotal: committedofferingTotal,\n          twothousands: offeringsAsObject[0].cnt,\n          twohundreds: offeringsAsObject[2].cnt,\n          fivehundreds: offeringsAsObject[1].cnt,\n          hundreds: offeringsAsObject[3].cnt,\n          fiftys: offeringsAsObject[4].cnt,\n          twentys: offeringsAsObject[5].cnt,\n          tens: offeringsAsObject[6].cnt,\n          fives: offeringsAsObject[7].cnt,\n          twos: offeringsAsObject[8].cnt,\n          ones: offeringsAsObject[9].cnt\n        })\n      }).then(res => res.json()).then(result => {\n        setLoading(false);\n        setNotify({\n          isOpen: true,\n          message: result['message'],\n          severity: result['status'] == 1 ? 'success' : 'error',\n          variant: 'filled'\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    } else {\n      setNotify({ ...notify,\n        isOpen: true,\n        message: \"Input required\",\n        severity: \"error\"\n      });\n    }\n  };\n\n  const searchapi = () => {\n    setLoading(true);\n    fetch(`${url}/searchname.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      setLoading(false);\n      setnames(result);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    searchapi();\n  }, []);\n  const [currentIndex, setcurrentIndex] = useState(0);\n  const [currentString, setCurrentString] = useState('');\n  useEffect((index, str) => {\n    setPeople(...[people], people[currentIndex].Name = currentString);\n  }, [currentIndex]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: [/*#__PURE__*/_jsxDEV(AlertMessage, {\n      notify: notify,\n      setNotify: setNotify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"space-evenly\",\n      direction: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          size: \"small\",\n          children: people.map((p, index) => {\n            let name = '';\n            let flag = 0;\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                    options: names,\n                    fullWidth: false,\n                    style: {\n                      width: 200\n                    },\n                    onChange: (val, event) => {\n                      let str = event;\n                      name = str;\n                      flag = 0;\n                      setPeople(...[people], people[index].Name = str);\n                      console.log(people, \"newINPUT\");\n\n                      if (event) {\n                        setcurrentIndex(index);\n                        setCurrentString(str);\n                        flag = 1;\n                        name = event;\n                      }\n                    },\n                    onBlur: e => {\n                      if (name == '' || flag == 0) {\n                        flag = 1;\n                        console.log(name, 'newINPUTNAME');\n                        setcurrentIndex(index);\n                        setCurrentString(e.target.value);\n                        setnames([...names, e.target.value]); // setPeople(...[people], people[index].Name = e.target.value);\n\n                        console.log(people, \"newINPUTINLOG\");\n                      }\n                    },\n                    value: p.Name,\n                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                      margin: \"dense\" // ref={params.InputProps.ref}\n                      ,\n                      size: \"small\",\n                      placeholder: \"Enter Name\",\n                      value: p.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(Select, {\n                    size: \"small\",\n                    style: {\n                      width: 200,\n                      marginTop: 7\n                    },\n                    onChange: event => {\n                      const type = event.target.value;\n                      setPeople(currentPeople => currentPeople.map(x => x.id === p.id ? { ...x,\n                        type\n                      } : x));\n                    },\n                    children: arrOfferingTypes.map((val, key) => {\n                      return /*#__PURE__*/_jsxDEV(MenuItem, {\n                        value: val.value,\n                        children: val.name\n                      }, key, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 303,\n                        columnNumber: 29\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    margin: \"dense\",\n                    size: \"small\",\n                    style: {\n                      width: 200\n                    },\n                    onChange: event => {\n                      const Am = event.target.value;\n                      let patt = /[^0-9]/g;\n                      const Amount = parseFloat(Am.replace(patt, ''));\n                      setPeople(currentPeople => currentPeople.map(x => x.id === p.id ? { ...x,\n                        Amount\n                      } : x));\n                    },\n                    value: p.Amount,\n                    type: \"number\",\n                    placeholder: \"Enter Amount\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    style: {\n                      justifySelf: \"center\",\n                      alignSelf: \"center\"\n                    },\n                    onClick: () => {\n                      setPeople(currentPeople => currentPeople.filter(x => x.id !== p.id));\n                      setCount(count - 1);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(DeleteOutlineIcon, {\n                      style: {\n                        justifySelf: \"center\",\n                        alignSelf: \"center\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 341,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this)\n            }, p.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => {\n            setPeople(currentPeople => [...currentPeople, {\n              id: count,\n              Name: '',\n              type: '',\n              Amount: ''\n            }]);\n            setCount(count + 1);\n          },\n          children: /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          children: /*#__PURE__*/_jsxDEV(TableBody, {\n            children: arrOfTotals.map((val, key) => {\n              return /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: val.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: val.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 21\n                }, this)]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: submit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Datepicker, {\n          value: dateofofferings,\n          setValue: setdateofofferings,\n          label: \"Set Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setdateofofferings(today),\n          children: \"Click if date is todays date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          size: \"small\",\n          children: /*#__PURE__*/_jsxDEV(TableBody, {\n            children: offeringsAsObject.map((k, key) => {\n              return /*#__PURE__*/_jsxDEV(TableRow, {\n                direction: \"row\",\n                justifyItems: \"center\",\n                alignItems: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    margin: 3,\n                    children: [k.price, \" x \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 407,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    style: {\n                      width: 100\n                    },\n                    margin: \"dense\",\n                    size: \"small\",\n                    onChange: e => {\n                      let value = e.target.value;\n                      setOfferings(cp => cp.map((l, lkey) => lkey === key ? { ...l,\n                        cnt: parseInt(value == '' ? 0 : value),\n                        tot: parseInt(value == '' ? 0 : value) * k.price\n                      } : l));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 412,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    children: [\" = \", isNaN(k.tot) ? 0 : k.tot]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 429,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 428,\n                  columnNumber: 21\n                }, this)]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Accounting, \"+GfUe5zt9IFvXsqV4X12bej5iwA=\");\n\n_c = Accounting;\nexport default Accounting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Accounting\");","map":{"version":3,"sources":["/home/david/Desktop/mydev/Church-Management/src/views/Components/Accounting.js"],"names":["Grid","TextField","Select","MenuItem","Button","IconButton","Typography","Table","TableBody","TableCell","TableRow","Autocomplete","React","useEffect","useState","AddCircleOutlineIcon","DeleteOutlineIcon","url","AlertMessage","Datepicker","Accounting","props","setLoading","people","setPeople","id","Name","type","Amount","count","setCount","names","setnames","notify","setNotify","isOpen","message","variant","severity","arrOfferingTypes","dateofofferings","setdateofofferings","offeringsAsObject","setOfferings","name","map","k","amount","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","grandTotal","reduce","accumulator","item","tot","isNaN","Total","parseFloat","churchOffering","titheTotal","offeringTotal","missionaryTotal","specialofferingTotal","baptismofferingTotal","birthdayofferingTotal","weddingofferingTotal","childdedicationofferingTotal","committedofferingTotal","buildingfundTotal","arrOfTotals","submit","fetch","method","headers","body","JSON","stringify","twothousands","cnt","twohundreds","fivehundreds","hundreds","fiftys","twentys","tens","fives","twos","ones","then","res","json","result","catch","error","console","searchapi","currentIndex","setcurrentIndex","currentString","setCurrentString","index","str","p","flag","width","val","event","log","e","target","value","params","marginTop","currentPeople","x","key","Am","patt","replace","justifySelf","alignSelf","filter","price","cp","l","lkey","parseInt"],"mappings":"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","sourcesContent":["import { Grid, TextField, Select, MenuItem, Button, IconButton, Typography, Table, TableBody, TableCell, TableRow, Autocomplete } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { url } from \"../Constants\";\nimport { AlertMessage } from \"./Support/AlertMessage\";\nimport { Datepicker } from \"./Support/Datepicker\";\n\n\n\nconst Accounting = (props) => {\n  const { setLoading } = props;\n  const [people, setPeople] = useState([{ id: 1, Name: '', type: '', Amount: '' }]);\n  const [count, setCount] = useState(2);\n  const [names, setnames] = useState([]);\n  const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n\n\n  const arrOfferingTypes = [\n    { \"name\": \"Select\", \"value\": \"\" },\n    { \"name\": \"Tithe\", \"value\": \"Tithe\" },\n    { \"name\": \"Offering\", \"value\": \"Offering\" },\n    { \"name\": \"Missionary\", \"value\": \"Missionary\" },\n    { \"name\": \"Special Offering\", \"value\": \"Special Offering\" },\n    { \"name\": \"Baptism Offering\", \"value\": \"Baptism Offering\" },\n    { \"name\": \"Birthday Offering\", \"value\": \"Birthday Offering\" },\n    { \"name\": \"Wedding Offering\", \"value\": \"Wedding Offering\" },\n    { \"name\": \"Child Dedication Offering\", \"value\": \"Child Dedication Offering\" },\n    { \"name\": \"Committed Offering\", \"value\": \"Committed Offering\" },\n    { \"name\": \"Building Fund\", \"value\": \"Building Fund\" }\n  ]\n\n\n  const [dateofofferings, setdateofofferings] = useState();\n\n  const [offeringsAsObject, setOfferings] = useState(\n    [\n      { \"price\": 2000, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 500, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 200, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 100, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 50, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 20, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 10, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 5, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 2, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 1, \"cnt\": 0, \"tot\": 0 },\n    ]\n  );\n\n  let name = people.map((k) => k.Name);\n\n  let type = people.map((k) => k.type);\n\n  let amount = people.map((k) => k.Amount);\n\n\n\n\n\n  let today = new Date();\n\n  let dd = today.getDate();\n  dd = dd < 10 ? \"0\" + dd : dd;\n\n\n  let mm = (today.getMonth() + 1) > 12 ? today.getMonth() : today.getMonth() + 1;\n  mm = mm < 10 ? \"0\" + mm : mm;\n  if (dd === \"00\") {\n    dd = 31;\n    mm = mm - 1;\n  }\n  let yyyy = today.getFullYear();\n\n  today = yyyy + \"-\" + mm + \"-\" + dd;\n\n  let grandTotal = offeringsAsObject.reduce((accumulator, item) => accumulator + item.tot, 0);\n  grandTotal = isNaN(grandTotal) ? 0 : grandTotal;\n\n  let Total = isNaN(people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n\n  const churchOffering = isNaN(grandTotal - Total) ? 0 : grandTotal - Total;\n\n\n\n  let titheTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let offeringTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let missionaryTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let specialofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let baptismofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let birthdayofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let weddingofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let childdedicationofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let committedofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let buildingfundTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let arrOfTotals = [\n    { \"name\": \"Total\", \"value\": Total },\n    { \"name\": \"Tithe Total\", \"value\": titheTotal },\n    { \"name\": \"Offering Total\", \"value\": offeringTotal },\n    { \"name\": \"Special Offering Total\", \"value\": specialofferingTotal },\n    { \"name\": \"Missionary Total\", \"value\": missionaryTotal },\n    { \"name\": \"Church Offering\", \"value\": churchOffering },\n    { \"name\": \"Grand Total\", \"value\": grandTotal }\n  ]\n\n  const submit = () => {\n    if (name[0] && dateofofferings && (amount !== 0) && churchOffering >= 0) {\n      setLoading(true);\n      fetch(`${url}/accounting.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n\n        },\n        body: JSON.stringify({\n          name: name,\n          type: type,\n          amount: amount,\n          dateofofferings: dateofofferings,\n          churchOffering: churchOffering,\n          titheTotal: titheTotal,\n          grandTotal: grandTotal,\n          offeringTotal: offeringTotal,\n          missionaryTotal: missionaryTotal,\n          specialofferingTotal: specialofferingTotal,\n          buildingfundTotal: buildingfundTotal,\n          baptismofferingTotal: baptismofferingTotal,\n          birthdayofferingTotal: birthdayofferingTotal,\n          weddingofferingTotal: weddingofferingTotal,\n          childdedicationofferingTotal: childdedicationofferingTotal,\n          committedofferingTotal: committedofferingTotal,\n          twothousands: offeringsAsObject[0].cnt,\n          twohundreds: offeringsAsObject[2].cnt,\n          fivehundreds: offeringsAsObject[1].cnt,\n          hundreds: offeringsAsObject[3].cnt,\n          fiftys: offeringsAsObject[4].cnt,\n          twentys: offeringsAsObject[5].cnt,\n          tens: offeringsAsObject[6].cnt,\n          fives: offeringsAsObject[7].cnt,\n          twos: offeringsAsObject[8].cnt,\n          ones: offeringsAsObject[9].cnt\n\n        })\n      })\n        .then(res => res.json())\n        .then((result) => {\n          setLoading(false);\n          setNotify({\n            isOpen: true,\n            message: result['message'],\n            severity: result['status'] == 1 ? 'success' : 'error',\n            variant: 'filled'\n          })\n\n        }).catch((error) => {\n          console.error(error);\n        });\n\n    }\n\n\n    else {\n      setNotify({\n        ...notify,\n        isOpen: true,\n        message: \"Input required\",\n        severity: \"error\"\n      })\n    }\n  }\n\n\n  const searchapi = () => {\n    setLoading(true);\n    fetch(`${url}/searchname.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n\n      },\n    })\n      .then(res => res.json())\n      .then((result) => {\n        setLoading(false);\n        setnames(result);\n      }).catch((error) => {\n        console.error(error);\n      });\n  }\n  useEffect(() => {\n    searchapi();\n  }, [])\n\n  const [currentIndex,setcurrentIndex] = useState(0);\n  const [currentString,setCurrentString] = useState('');\n\n  useEffect((index,str)=>{\n    setPeople(...[people], people[currentIndex].Name = currentString);\n  },[currentIndex]);\n\n\n  return (\n    <Grid>\n\n      <AlertMessage\n        notify={notify}\n        setNotify={setNotify}\n      />\n      <Grid\n        container\n        justifyContent={\"space-evenly\"}\n        direction={\"row\"}\n      >\n        <Grid>\n          <Table\n            size=\"small\"\n          >\n            {people.map((p, index) => {\n              let name = '';\n              let flag = 0;\n              return (\n                <Grid key={p.id}>\n                  <TableRow>\n                    <TableCell>\n                      <Autocomplete\n                        options={names}\n                        fullWidth={false}\n                        style={{ width: 200 }}\n                        onChange={(val, event) => {\n                          let str = event;\n                          name = str;\n                          flag = 0;\n                          setPeople(...[people], people[index].Name = str);\n                          console.log(people, \"newINPUT\");\n                          if (event) {\n                            setcurrentIndex(index);\n                            setCurrentString(str);\n                            flag = 1;\n                            name = event;\n                          }\n                        }}\n\n\n                        onBlur={(e) => {\n                          if (name == '' || flag == 0) {\n                            flag = 1;\n                            console.log(name, 'newINPUTNAME');\n                            setcurrentIndex(index);\n                            setCurrentString(e.target.value);\n                            setnames([...names, e.target.value]);\n                            // setPeople(...[people], people[index].Name = e.target.value);\n                            console.log(people, \"newINPUTINLOG\");\n\n                          }\n                        }}\n\n                        \n                        value={p.Name}\n\n                        renderInput={params =>\n                          <TextField\n                            {...params}\n                            margin=\"dense\"\n                            \n                            // ref={params.InputProps.ref}\n                            size=\"small\"\n                            placeholder=\"Enter Name\"\n                            value={p.Name}\n                          />\n                        }\n\n                      />\n                    </TableCell>\n                    <TableCell>\n\n                      <Select\n                        size=\"small\"\n                        style={{ width: 200, marginTop: 7 }}\n                        onChange={(event) => {\n                          const type = event.target.value;\n                          setPeople((currentPeople) => currentPeople.map(x => x.id === p.id ? {\n                            ...x,\n                            type\n                          } : x));\n\n                        }}\n                      >\n\n                        {arrOfferingTypes.map((val, key) => {\n                          return (\n                            <MenuItem\n                              key={key}\n                              value={val.value}\n                            >\n                              {val.name}\n                            </MenuItem>\n                          )\n                        })}\n                      </Select>\n                    </TableCell>\n                    <TableCell>\n\n                      <TextField\n                        margin=\"dense\"\n                        size=\"small\"\n                        style={{ width: 200 }}\n                        onChange={(event) => {\n                          const Am = event.target.value;\n                          let patt = /[^0-9]/g;\n                          const Amount = parseFloat(Am.replace(patt, ''));\n                          setPeople((currentPeople) => currentPeople.map(x => x.id === p.id ? {\n                            ...x,\n                            Amount\n                          } : x));\n                        }}\n                        value={p.Amount}\n                        type=\"number\"\n                        placeholder=\"Enter Amount\" />\n                    </TableCell>\n                    <TableCell>\n\n                      <IconButton\n                        style={{ justifySelf: \"center\", alignSelf: \"center\" }}\n                        onClick={\n                          () => {\n                            setPeople(currentPeople => currentPeople.filter(x => x.id !== p.id)); setCount(count - 1)\n                          }\n                        }>\n                        <DeleteOutlineIcon\n                          style={{ justifySelf: \"center\", alignSelf: \"center\" }}\n                        />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                </Grid>\n              )\n\n            })}\n          </Table>\n          <IconButton\n            onClick={() => {\n              setPeople(currentPeople => [...currentPeople, {\n                id: count,\n                Name: '',\n                type: '',\n                Amount: '',\n              }]); setCount(count + 1)\n            }}\n          ><AddCircleOutlineIcon /></IconButton>\n          <Table>\n            <TableBody>\n              {arrOfTotals.map((val, key) => {\n                return (\n                  <TableRow\n                    key={key}\n                  >\n                    <TableCell>{val.name}</TableCell>\n                    <TableCell>{val.value}</TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n          <Button\n            variant=\"contained\"\n            onClick={submit}\n          >\n            Submit\n          </Button>\n        </Grid>\n        <Grid>\n          <Datepicker\n            value={dateofofferings}\n            setValue={setdateofofferings}\n            label='Set Date'\n          />\n          <Button\n            onClick={() => setdateofofferings(today)}\n          >\n            Click if date is todays date\n          </Button>\n          <Table\n            size=\"small\"\n          >\n            <TableBody>\n              {offeringsAsObject.map((k, key) => {\n                return (\n                  <TableRow\n                    key={key}\n                    direction={\"row\"}\n                    justifyItems={\"center\"}\n                    alignItems={\"center\"}\n                  >\n                    <TableCell>\n                      <Typography\n                        margin={3}\n                      >{k.price} x </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <TextField\n                        style={{ width: 100 }}\n                        margin=\"dense\"\n                        size=\"small\"\n                        onChange={(e) => {\n                          let value = e.target.value\n                          setOfferings(cp => cp.map((l, lkey) => lkey === key ?\n                            {\n                              ...l,\n                              cnt: parseInt(value == '' ? 0 : value),\n                              tot: parseInt(value == '' ? 0 : value) * k.price\n                            }\n                            : l))\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography> = {isNaN(k.tot) ? 0 : k.tot}</Typography>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </Grid>\n\n      </Grid>\n    </Grid>\n\n  )\n}\nexport default Accounting;"]},"metadata":{},"sourceType":"module"}