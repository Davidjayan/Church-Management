{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Dataentry.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { url } from '../Constants';\nimport { Grid, Button, FormControlLabel, RadioGroup, Radio, Autocomplete } from '@mui/material';\nimport { CFormInput, CFormSwitch } from '@coreui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dataentry = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [dob, setDob] = useState('');\n  const [familyheads, setFamilyheads] = useState([]);\n  const [validity, setvalidity] = useState(true);\n  const [data, setData] = useState({\n    name: '',\n    dob: new Date(),\n    gender: '',\n    weddingdate: new Date().toLocaleDateString(),\n    emailid: '',\n    mobile: '',\n    address: '',\n    familyhead: '',\n    familyid: '',\n    selfid: '',\n    android: false,\n    baptized: false,\n    married: false\n  });\n  const str = dob.split('-');\n  const today = new Date();\n  const mon = today.getMonth();\n  const year = today.getFullYear();\n  let age;\n  let k = year - 1;\n\n  if (mon >= str[1]) {\n    age = year - str[0];\n  } else {\n    age = k - str[0];\n  }\n\n  const validation = () => {\n    if ((data.familyid && data.familyhead && data.address && data.selfid && data.name && data.gender && !data.mobile.length < 10) !== '') {\n      setvalidity(true);\n      return true;\n    } else {\n      setvalidity(false);\n      return false;\n    }\n  };\n\n  const addrecords = () => {\n    if (validity) {\n      let Familyid = data.familyid;\n      let Selfid = data.selfid;\n      let Name = data.name;\n      let Dob = data.dob;\n      let Age = age;\n      let Gender = data.gender;\n      let Married = data.married;\n      let Weddingdate = data.weddingdate;\n      let Emailid = data.emailid;\n      let Mobile = data.mobile;\n      let Address = data.address;\n      let Familyhead = data.familyhead;\n      let Baptized = data.baptized;\n      let Android = data.android;\n      fetch(\"\".concat(url, \"/jehovanissi/api/member_details.php\"), {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: Name,\n          dob: Dob,\n          age: Age,\n          gender: Gender,\n          married: Married,\n          weddingdate: Weddingdate,\n          emailid: Emailid,\n          mobile: Mobile,\n          address: Address,\n          familyhead: Familyhead,\n          baptized: Baptized,\n          android: Android,\n          familyid: Familyid,\n          selfid: Selfid\n        })\n      }).then(res => res.json()).then(result => {\n        alert(result);\n        console.log(result);\n      }).catch(error => {\n        console.error(error);\n      });\n    } else {\n      alert('Input All required');\n    }\n  };\n\n  const searchfamilyhead = () => {\n    fetch(\"\".concat(url, \"/jehovanissi/api/searchfamilyhead.php\"), {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      let filteredresult = [...new Set(result)];\n      setFamilyheads(filteredresult);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    searchfamilyhead();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    direction: 'column',\n    alignItems: 'center',\n    justifyItems: 'stretch',\n    container: true,\n    item: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(CFormInput, {\n        style: {\n          width: 300,\n          marginRight: 15\n        },\n        name: \"familyid\",\n        value: data.familyid,\n        margin: \"dense\",\n        variant: \"outlined\",\n        onChange: event => {\n          setData({ ...data,\n            familyid: event.target.value.toUpperCase()\n          });\n        },\n        placeholder: \"Family ID\",\n        label: \"Family ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CFormInput, {\n        name: \"selfid\",\n        style: {\n          width: 300,\n          marginRight: 15\n        },\n        value: data.selfid,\n        margin: \"dense\",\n        variant: \"outlined\",\n        onFocus: () => setData({ ...data,\n          selfid: data.familyid.slice(3)\n        }),\n        placeholder: \"Self ID\",\n        label: \"Self ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(CFormInput, {\n        name: \"name\",\n        value: data.name,\n        style: {\n          width: 300,\n          marginRight: 15\n        },\n        margin: \"dense\",\n        variant: \"outlined\",\n        onChange: event => {\n          const str = event.target.value.split(' ');\n\n          for (let i = 0; i < str.length; i++) {\n            str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n          }\n\n          const Nameoff = str.join(' ');\n          setData({ ...data,\n            name: Nameoff\n          });\n        },\n        placeholder: \"Enter Name\",\n        label: \"Enter Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CFormInput, {\n        type: 'date',\n        style: {\n          width: 300,\n          marginRight: 15\n        },\n        value: data.dob,\n        onChange: event => setData({ ...data,\n          dob: event.target.value\n        }),\n        label: \"Enter DOB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n      row: true,\n      \"aria-label\": \"gender\",\n      name: \"row-radio-buttons-group\",\n      style: {\n        width: 300,\n        justifyContent: 'space-evenly'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"male\",\n        name: \"gender\",\n        label: 'Male',\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 20\n        }, this),\n        onChange: event => setData({ ...data,\n          gender: event.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"female\",\n        name: \"gender\",\n        label: 'Female',\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 20\n        }, this),\n        onChange: event => setData({ ...data,\n          gender: event.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n      row: true,\n      \"aria-label\": \"martial-status\",\n      name: \"row-radio-buttons-group\",\n      style: {\n        width: 300,\n        justifyContent: 'space-evenly'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: true,\n        label: 'Married',\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 20\n        }, this),\n        onChange: event => {\n          setData({ ...data,\n            married: event.target.value == 'true' ? true : false\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: false,\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 20\n        }, this),\n        label: 'Unmarried',\n        onChange: event => {\n          setData({ ...data,\n            married: event.target.value == 'true' ? true : false\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CFormInput, {\n      type: \"date\",\n      label: \"Wedding Date\",\n      style: {\n        display: data.married === true ? 'inline-block' : 'none',\n        width: 300,\n        marginRight: 15\n      },\n      margin: \"dense\",\n      variant: \"outlined\",\n      value: data.weddingdate,\n      onChange: event => setData({ ...data,\n        weddingdate: event.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(CFormInput, {\n        name: \"emailid\",\n        margin: \"dense\",\n        label: \"Email ID\",\n        style: {\n          width: 300,\n          marginRight: 15\n        },\n        variant: \"outlined\",\n        onChange: event => setData({ ...data,\n          emailid: event.target.value\n        }),\n        value: data.emailid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CFormInput, {\n        name: \"mobile\",\n        style: {\n          width: 300,\n          marginRight: 15\n        },\n        label: \"Mobile\",\n        margin: \"dense\",\n        variant: \"outlined\",\n        value: data.mobile,\n        onChange: event => {\n          let patt = /[^0-9]/g;\n          const ph = event.target.value.replace(patt, '');\n          setData({ ...data,\n            mobile: ph.slice(0, 10)\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(CFormInput, {\n        name: \"address\",\n        label: \"Address\",\n        style: {\n          width: 300,\n          marginRight: 15\n        },\n        margin: \"dense\",\n        variant: \"outlined\",\n        value: data.address,\n        onChange: event => {\n          const str = event.target.value.split(',');\n\n          for (let i = 0; i < str.length; i++) {\n            str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n          }\n\n          const address = str.join(',');\n          setData({ ...data,\n            address: address\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        options: familyheads,\n        renderInput: params => /*#__PURE__*/_jsxDEV(CFormInput, { ...params,\n          name: \"familyhead\",\n          value: data.familyhead,\n          margin: \"dense\",\n          variant: \"outlined\",\n          label: \"Family Head\",\n          onChange: event => {\n            const str = event.target.value.split(' ');\n\n            for (let i = 0; i < str.length; i++) {\n              str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n            }\n\n            const familyheadname = str.join(' ');\n            setData({ ...data,\n              familyhead: familyheadname\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n      row: true,\n      \"aria-label\": \"Baptizm\",\n      name: \"row-radio-buttons-group\",\n      style: {\n        width: 300,\n        justifyContent: 'space-evenly'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 20\n        }, this),\n        value: true,\n        label: 'Baptized',\n        onChange: event => setData({ ...data,\n          baptized: event.target.value == 'true' ? true : false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: false,\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 20\n        }, this),\n        label: 'Not Baptized',\n        onChange: event => setData({ ...data,\n          baptized: event.target.value == 'true' ? true : false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n      row: true,\n      \"aria-label\": \"mobile-type\",\n      name: \"row-radio-buttons-group\",\n      style: {\n        width: 300,\n        justifyContent: 'space-evenly'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        label: 'Android',\n        value: true,\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 20\n        }, this),\n        onChange: event => setData({ ...data,\n          android: event.target.value == 'true' ? true : false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        label: 'Normal',\n        value: false,\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 20\n        }, this),\n        onChange: event => setData({ ...data,\n          android: event.target.value == 'true' ? true : false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: addrecords,\n      children: \"Add to records\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this) //========================\n  // <Grid>\n  //     <Grid\n  //         direction=\"column\"\n  //         alignItems={\"stretch\"}\n  //         justifyItems={\"stretch\"}\n  //         container\n  //     >\n  //         <Grid\n  //             direction={\"column\"}\n  //             alignItems={\"center\"}\n  //             justifyItems={\"stretch\"}\n  //             container\n  //             item\n  //         >\n  //             <Grid>\n  //                 <CFormInput\n  //                     style={{ width: 300, marginRight: 15 }}\n  //                     name=\"familyid\"\n  //                     // value={data.familyid}\n  //                     margin=\"dense\"\n  //                     variant=\"outlined\"\n  //                     placeholder=\"Family ID\"\n  //                     label=\"Family ID\"\n  //                 />\n  //                 <CFormInput\n  //                     name=\"selfid\"\n  //                     style={{ width: 300, marginRight: 15 }}\n  //                     // value={data.selfid}\n  //                     margin=\"dense\"\n  //                     variant=\"outlined\"\n  //                     placeholder=\"Self ID\"\n  //                     label=\"Self ID\"\n  //                 />\n  //             </Grid>\n  //             <Grid>\n  //                 <CFormInput\n  //                     name=\"name\"\n  //                     // value={data.name}\n  //                     style={{ width: 300, marginRight: 15 }}\n  //                     margin=\"dense\"\n  //                     variant=\"outlined\"\n  //                     // onChange={(event) => {\n  //                     //     const str = event.target.value.split(' ');\n  //                     //     for (let i = 0; i < str.length; i++) {\n  //                     //         str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n  //                     //     }\n  //                     //     const Nameoff = str.join(' ');\n  //                     //     setData({ ...data, name: Nameoff })\n  //                     // }}\n  //                     placeholder=\"Enter Name\"\n  //                     label=\"Enter Name\"\n  //                 />\n  //                 {/* <DatePicker\n  //       style={{ width: 300, marginRight: 15 }}\n  //       // value={data.dob}\n  //       // onChange={(event) => setData({ ...data, dob: event.target.value })}\n  //       label=\"Enter DOB\"\n  //     /> */}\n  //             </Grid>\n  //             <RadioGroup\n  //                 row\n  //                 aria-label=\"gender\"\n  //                 name=\"row-radio-buttons-group\"\n  //                 style={{\n  //                     width: 300,\n  //                     justifyContent: \"space-evenly\"\n  //                 }}\n  //             >\n  //                 <FormControlLabel\n  //                     value=\"male\"\n  //                     name=\"gender\"\n  //                     label={\"Male\"}\n  //                     control={<Radio />}\n  //                 // onChange={(event) => setData({ ...data, gender: event.target.value })}\n  //                 />\n  //                 <FormControlLabel\n  //                     value=\"female\"\n  //                     name=\"gender\"\n  //                     label={\"Female\"}\n  //                     control={<Radio />}\n  //                 // onChange={(event) => setData({ ...data, gender: event.target.value })}\n  //                 />\n  //             </RadioGroup>\n  //             <RadioGroup\n  //                 row\n  //                 aria-label=\"martial-status\"\n  //                 name=\"row-radio-buttons-group\"\n  //                 style={{\n  //                     width: 300,\n  //                     justifyContent: \"space-evenly\"\n  //                 }}\n  //             >\n  //                 <FormControlLabel\n  //                     value={true}\n  //                     label={\"Married\"}\n  //                     control={<Radio />}\n  //                 // onChange={(event) => { setData({ ...data, married: event.target.value == \"true\" ? true : false }) }}\n  //                 />\n  //                 <FormControlLabel\n  //                     value={false}\n  //                     control={<Radio />}\n  //                     label={\"Unmarried\"}\n  //                 // onChange={(event) => { setData({ ...data, married: event.target.value == \"true\" ? true : false }) }}\n  //                 />\n  //             </RadioGroup>\n  //             <CFormInput\n  //                 type=\"date\"\n  //                 label=\"Wedding Date\"\n  //                 // style={{ display: data.married === true ? \"inline-block\" : \"none\", width: 300, marginRight: 15 }}\n  //                 margin=\"dense\"\n  //                 variant=\"outlined\"\n  //             // value={data.weddingdate}\n  //             // onChange={(event) => setData({ ...data, weddingdate: event.target.value })}\n  //             />\n  //             <Grid>\n  //                 <CFormInput\n  //                     name=\"emailid\"\n  //                     margin=\"dense\"\n  //                     label=\"Email ID\"\n  //                     style={{ width: 300, marginRight: 15 }}\n  //                     variant=\"outlined\"\n  //                 // onChange={(event) => setData({ ...data, emailid: event.target.value })}\n  //                 // value={data.emailid}\n  //                 />\n  //                 <CFormInput\n  //                     name=\"mobile\"\n  //                     style={{ width: 300, marginRight: 15 }}\n  //                     label=\"Mobile\"\n  //                     margin=\"dense\"\n  //                     variant=\"outlined\"\n  //                 // value={data.mobile}\n  //                 // onChange={(event) => {\n  //                 //   let patt = /[^0-9]/g;\n  //                 //   const ph = event.target.value.replace(patt, '');\n  //                 //   setData({ ...data, mobile: ph.slice(0, 10) });\n  //                 // }}\n  //                 />\n  //             </Grid>\n  //             <Grid>\n  //                 <CFormInput\n  //                     name=\"address\"\n  //                     label=\"Address\"\n  //                     style={{ width: 300, marginRight: 15 }}\n  //                     margin=\"dense\"\n  //                     variant=\"outlined\"\n  //                 // value={data.address}\n  //                 // onChange={(event) => {\n  //                 //   const str = event.target.value.split(',');\n  //                 //   for (let i = 0; i < str.length; i++) {\n  //                 //     str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n  //                 //   }\n  //                 //   const address = str.join(',');\n  //                 //   setData({ ...data, address: address })\n  //                 // }}\n  //                 />\n  //                 {/* <Autocomplete\n  //       options={familyheads}\n  //       renderInput={(params) =>\n  //         <CFormInput\n  //           {...params}\n  //           name=\"familyhead\"\n  //           value={data.familyhead}\n  //           margin=\"dense\"\n  //           variant=\"outlined\"\n  //           label=\"Family Head\"\n  //           onChange={(event) => {\n  //             const str = event.target.value.split(' ');\n  //             for (let i = 0; i < str.length; i++) {\n  //               str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n  //             }\n  //             const familyheadname = str.join(' ');\n  //             setData({ ...data, familyhead: familyheadname })\n  //           }}\n  //         />\n  //       }\n  //     /> */}\n  //             </Grid>\n  //             <RadioGroup\n  //                 row\n  //                 aria-label=\"Baptizm\"\n  //                 name=\"row-radio-buttons-group\"\n  //                 style={{\n  //                     width: 300,\n  //                     justifyContent: \"space-evenly\"\n  //                 }}\n  //             >\n  //                 <FormControlLabel\n  //                     control={<Radio />}\n  //                     value={true}\n  //                     label={\"Baptized\"}\n  //                 // onChange={(event) => setData({ ...data, baptized: event.target.value == \"true\" ? true : false })}\n  //                 />\n  //                 <FormControlLabel\n  //                     value={false}\n  //                     control={<Radio />}\n  //                     label={\"Not Baptized\"}\n  //                 // onChange={(event) => setData({ ...data, baptized: event.target.value == \"true\" ? true : false })}\n  //                 />\n  //             </RadioGroup>\n  //                 <CFormSwitch\n  //                     size=\"xl\"\n  //                     onChange={(event)=>{\n  //                         if(event.target.value===\"on\"){\n  //                             alert(event.target.value)\n  //                         }\n  //                     }}\n  //                 />\n  //             <RadioGroup\n  //                 row\n  //                 aria-label=\"mobile-type\"\n  //                 name=\"row-radio-buttons-group\"\n  //                 style={{\n  //                     width: 300,\n  //                     justifyContent: \"space-evenly\"\n  //                 }}\n  //             >\n  //                 <FormControlLabel\n  //                     label={\"Android\"}\n  //                     value={true}\n  //                     control={<Radio />}\n  //                 // onChange={(event) => setData({ ...data, android: event.target.value == \"true\" ? true : false })}\n  //                 />\n  //                 <FormControlLabel\n  //                     label={\"Normal\"}\n  //                     value={false}\n  //                     control={<Radio />}\n  //                 // onChange={(event) => setData({ ...data, android: event.target.value == \"true\" ? true : false })}\n  //                 />\n  //             </RadioGroup>\n  //             <Button\n  //                 variant=\"contained\"\n  //             // onClick={addrecords}\n  //             >\n  //                 Add to records</Button>\n  //         </Grid>\n  //     </Grid>\n  // </Grid>\n  ;\n};\n\n_s(Dataentry, \"rcIkyzfB1MmOds8GF+n2clvR0i8=\");\n\n_c = Dataentry;\nexport default Dataentry;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataentry\");","map":{"version":3,"sources":["/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Dataentry.js"],"names":["React","useEffect","useState","url","Grid","Button","FormControlLabel","RadioGroup","Radio","Autocomplete","CFormInput","CFormSwitch","Dataentry","name","setName","dob","setDob","familyheads","setFamilyheads","validity","setvalidity","data","setData","Date","gender","weddingdate","toLocaleDateString","emailid","mobile","address","familyhead","familyid","selfid","android","baptized","married","str","split","today","mon","getMonth","year","getFullYear","age","k","validation","length","addrecords","Familyid","Selfid","Name","Dob","Age","Gender","Married","Weddingdate","Emailid","Mobile","Address","Familyhead","Baptized","Android","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","result","alert","console","log","catch","error","searchfamilyhead","filteredresult","Set","width","marginRight","event","target","value","toUpperCase","slice","i","charAt","substring","Nameoff","join","justifyContent","display","patt","ph","replace","params","familyheadname"],"mappings":"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AtB,GAA+B,IAA/B,GAAsC;AAA1D,SAAD;AALX;AAAA;AAAA;AAAA;AAAA,cATF,eAiBE,QAAC,gBAAD;AACE,QAAA,KAAK,EAAE,QADT;AAEE,QAAA,KAAK,EAAE,KAFT;AAGE,QAAA,OAAO,eAAE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBAHX;AAIE,QAAA,QAAQ,EAAGF,KAAD,IACR7D,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWY,UAAAA,OAAO,EAAEkD,KAAK,CAACC,MAAN,CAAaC,KAAb,IAAsB,MAAtB,GAA+B,IAA/B,GAAsC;AAA1D,SAAD;AALX;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YA/MF,eA0OE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,OAAO,EAAEtC,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1OF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAgPE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAneF;AAqeD,CArmBD;;GAAMnC,S;;KAAAA,S;AAumBN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { url } from '../Constants'\nimport { Grid, Button, FormControlLabel, RadioGroup, Radio, Autocomplete } from '@mui/material'\nimport { CFormInput, CFormSwitch } from '@coreui/react'\n\nconst Dataentry = () => {\n  const [name, setName] = useState('')\n  const [dob, setDob] = useState('')\n  const [familyheads, setFamilyheads] = useState([])\n  const [validity, setvalidity] = useState(true)\n\n  const [data, setData] = useState({\n    name: '',\n    dob: new Date(),\n    gender: '',\n    weddingdate: new Date().toLocaleDateString(),\n    emailid: '',\n    mobile: '',\n    address: '',\n    familyhead: '',\n    familyid: '',\n    selfid: '',\n    android: false,\n    baptized: false,\n    married: false,\n  })\n\n  const str = dob.split('-')\n  const today = new Date()\n  const mon = today.getMonth()\n  const year = today.getFullYear()\n  let age\n\n  let k = year - 1\n\n  if (mon >= str[1]) {\n    age = year - str[0]\n  } else {\n    age = k - str[0]\n  }\n\n  const validation = () => {\n    if (\n      (data.familyid &&\n        data.familyhead &&\n        data.address &&\n        data.selfid &&\n        data.name &&\n        data.gender &&\n        !data.mobile.length < 10) !== ''\n    ) {\n      setvalidity(true)\n      return true\n    } else {\n      setvalidity(false)\n      return false\n    }\n  }\n\n  const addrecords = () => {\n    if (validity) {\n      let Familyid = data.familyid\n      let Selfid = data.selfid\n      let Name = data.name\n      let Dob = data.dob\n      let Age = age\n      let Gender = data.gender\n      let Married = data.married\n      let Weddingdate = data.weddingdate\n      let Emailid = data.emailid\n      let Mobile = data.mobile\n      let Address = data.address\n      let Familyhead = data.familyhead\n      let Baptized = data.baptized\n      let Android = data.android\n\n      fetch(`${url}/jehovanissi/api/member_details.php`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: Name,\n          dob: Dob,\n          age: Age,\n          gender: Gender,\n          married: Married,\n          weddingdate: Weddingdate,\n          emailid: Emailid,\n          mobile: Mobile,\n          address: Address,\n          familyhead: Familyhead,\n          baptized: Baptized,\n          android: Android,\n          familyid: Familyid,\n          selfid: Selfid,\n        }),\n      })\n        .then((res) => res.json())\n        .then((result) => {\n          alert(result)\n          console.log(result)\n        })\n        .catch((error) => {\n          console.error(error)\n        })\n    } else {\n      alert('Input All required')\n    }\n  }\n\n  const searchfamilyhead = () => {\n    fetch(`${url}/jehovanissi/api/searchfamilyhead.php`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        let filteredresult = [...new Set(result)]\n        setFamilyheads(filteredresult)\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n  }\n  useEffect(() => {\n    searchfamilyhead()\n  }, [])\n\n  return (\n    <Grid direction={'column'} alignItems={'center'} justifyItems={'stretch'} container item>\n      <Grid>\n        <CFormInput\n          style={{ width: 300, marginRight: 15 }}\n          name=\"familyid\"\n          value={data.familyid}\n          margin=\"dense\"\n          variant=\"outlined\"\n          onChange={(event) => {\n            setData({ ...data, familyid: event.target.value.toUpperCase() })\n          }}\n          placeholder=\"Family ID\"\n          label=\"Family ID\"\n        />\n        <CFormInput\n          name=\"selfid\"\n          style={{ width: 300, marginRight: 15 }}\n          value={data.selfid}\n          margin=\"dense\"\n          variant=\"outlined\"\n          onFocus={() => setData({ ...data, selfid: data.familyid.slice(3) })}\n          placeholder=\"Self ID\"\n          label=\"Self ID\"\n        />\n      </Grid>\n      <Grid>\n        <CFormInput\n          name=\"name\"\n          value={data.name}\n          style={{ width: 300, marginRight: 15 }}\n          margin=\"dense\"\n          variant=\"outlined\"\n          onChange={(event) => {\n            const str = event.target.value.split(' ')\n            for (let i = 0; i < str.length; i++) {\n              str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1)\n            }\n            const Nameoff = str.join(' ')\n            setData({ ...data, name: Nameoff })\n          }}\n          placeholder=\"Enter Name\"\n          label=\"Enter Name\"\n        />\n        <CFormInput\n          type={'date'}\n          style={{ width: 300, marginRight: 15 }}\n          value={data.dob}\n          onChange={(event) => setData({ ...data, dob: event.target.value })}\n          label=\"Enter DOB\"\n        />\n      </Grid>\n      <RadioGroup\n        row\n        aria-label=\"gender\"\n        name=\"row-radio-buttons-group\"\n        style={{\n          width: 300,\n          justifyContent: 'space-evenly',\n        }}\n      >\n        <FormControlLabel\n          value=\"male\"\n          name=\"gender\"\n          label={'Male'}\n          control={<Radio />}\n          onChange={(event) => setData({ ...data, gender: event.target.value })}\n        />\n        <FormControlLabel\n          value=\"female\"\n          name=\"gender\"\n          label={'Female'}\n          control={<Radio />}\n          onChange={(event) => setData({ ...data, gender: event.target.value })}\n        />\n      </RadioGroup>\n      <RadioGroup\n        row\n        aria-label=\"martial-status\"\n        name=\"row-radio-buttons-group\"\n        style={{\n          width: 300,\n          justifyContent: 'space-evenly',\n        }}\n      >\n        <FormControlLabel\n          value={true}\n          label={'Married'}\n          control={<Radio />}\n          onChange={(event) => {\n            setData({ ...data, married: event.target.value == 'true' ? true : false })\n          }}\n        />\n        <FormControlLabel\n          value={false}\n          control={<Radio />}\n          label={'Unmarried'}\n          onChange={(event) => {\n            setData({ ...data, married: event.target.value == 'true' ? true : false })\n          }}\n        />\n      </RadioGroup>\n\n      <CFormInput\n        type=\"date\"\n        label=\"Wedding Date\"\n        style={{\n          display: data.married === true ? 'inline-block' : 'none',\n          width: 300,\n          marginRight: 15,\n        }}\n        margin=\"dense\"\n        variant=\"outlined\"\n        value={data.weddingdate}\n        onChange={(event) => setData({ ...data, weddingdate: event.target.value })}\n      />\n      <Grid>\n        <CFormInput\n          name=\"emailid\"\n          margin=\"dense\"\n          label=\"Email ID\"\n          style={{ width: 300, marginRight: 15 }}\n          variant=\"outlined\"\n          onChange={(event) => setData({ ...data, emailid: event.target.value })}\n          value={data.emailid}\n        />\n\n        <CFormInput\n          name=\"mobile\"\n          style={{ width: 300, marginRight: 15 }}\n          label=\"Mobile\"\n          margin=\"dense\"\n          variant=\"outlined\"\n          value={data.mobile}\n          onChange={(event) => {\n            let patt = /[^0-9]/g\n            const ph = event.target.value.replace(patt, '')\n            setData({ ...data, mobile: ph.slice(0, 10) })\n          }}\n        />\n      </Grid>\n\n      <Grid>\n        <CFormInput\n          name=\"address\"\n          label=\"Address\"\n          style={{ width: 300, marginRight: 15 }}\n          margin=\"dense\"\n          variant=\"outlined\"\n          value={data.address}\n          onChange={(event) => {\n            const str = event.target.value.split(',')\n            for (let i = 0; i < str.length; i++) {\n              str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1)\n            }\n            const address = str.join(',')\n            setData({ ...data, address: address })\n          }}\n        />\n        <Autocomplete\n          options={familyheads}\n          renderInput={(params) => (\n            <CFormInput\n              {...params}\n              name=\"familyhead\"\n              value={data.familyhead}\n              margin=\"dense\"\n              variant=\"outlined\"\n              label=\"Family Head\"\n              onChange={(event) => {\n                const str = event.target.value.split(' ')\n                for (let i = 0; i < str.length; i++) {\n                  str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1)\n                }\n                const familyheadname = str.join(' ')\n                setData({ ...data, familyhead: familyheadname })\n              }}\n            />\n          )}\n        />\n      </Grid>\n      <RadioGroup\n        row\n        aria-label=\"Baptizm\"\n        name=\"row-radio-buttons-group\"\n        style={{\n          width: 300,\n          justifyContent: 'space-evenly',\n        }}\n      >\n        <FormControlLabel\n          control={<Radio />}\n          value={true}\n          label={'Baptized'}\n          onChange={(event) =>\n            setData({ ...data, baptized: event.target.value == 'true' ? true : false })\n          }\n        />\n        <FormControlLabel\n          value={false}\n          control={<Radio />}\n          label={'Not Baptized'}\n          onChange={(event) =>\n            setData({ ...data, baptized: event.target.value == 'true' ? true : false })\n          }\n        />\n      </RadioGroup>\n\n      <RadioGroup\n        row\n        aria-label=\"mobile-type\"\n        name=\"row-radio-buttons-group\"\n        style={{\n          width: 300,\n          justifyContent: 'space-evenly',\n        }}\n      >\n        <FormControlLabel\n          label={'Android'}\n          value={true}\n          control={<Radio />}\n          onChange={(event) =>\n            setData({ ...data, android: event.target.value == 'true' ? true : false })\n          }\n        />\n        <FormControlLabel\n          label={'Normal'}\n          value={false}\n          control={<Radio />}\n          onChange={(event) =>\n            setData({ ...data, android: event.target.value == 'true' ? true : false })\n          }\n        />\n      </RadioGroup>\n\n      <Button variant=\"contained\" onClick={addrecords}>\n        Add to records\n      </Button>\n    </Grid>\n\n    //========================\n\n    // <Grid>\n    //     <Grid\n    //         direction=\"column\"\n    //         alignItems={\"stretch\"}\n    //         justifyItems={\"stretch\"}\n    //         container\n    //     >\n    //         <Grid\n    //             direction={\"column\"}\n    //             alignItems={\"center\"}\n    //             justifyItems={\"stretch\"}\n    //             container\n    //             item\n    //         >\n    //             <Grid>\n    //                 <CFormInput\n    //                     style={{ width: 300, marginRight: 15 }}\n    //                     name=\"familyid\"\n    //                     // value={data.familyid}\n    //                     margin=\"dense\"\n    //                     variant=\"outlined\"\n    //                     placeholder=\"Family ID\"\n    //                     label=\"Family ID\"\n    //                 />\n    //                 <CFormInput\n    //                     name=\"selfid\"\n    //                     style={{ width: 300, marginRight: 15 }}\n    //                     // value={data.selfid}\n    //                     margin=\"dense\"\n    //                     variant=\"outlined\"\n    //                     placeholder=\"Self ID\"\n    //                     label=\"Self ID\"\n    //                 />\n    //             </Grid>\n    //             <Grid>\n    //                 <CFormInput\n    //                     name=\"name\"\n    //                     // value={data.name}\n    //                     style={{ width: 300, marginRight: 15 }}\n    //                     margin=\"dense\"\n    //                     variant=\"outlined\"\n    //                     // onChange={(event) => {\n    //                     //     const str = event.target.value.split(' ');\n    //                     //     for (let i = 0; i < str.length; i++) {\n\n    //                     //         str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n    //                     //     }\n    //                     //     const Nameoff = str.join(' ');\n    //                     //     setData({ ...data, name: Nameoff })\n    //                     // }}\n    //                     placeholder=\"Enter Name\"\n    //                     label=\"Enter Name\"\n    //                 />\n    //                 {/* <DatePicker\n    //       style={{ width: 300, marginRight: 15 }}\n    //       // value={data.dob}\n    //       // onChange={(event) => setData({ ...data, dob: event.target.value })}\n    //       label=\"Enter DOB\"\n    //     /> */}\n    //             </Grid>\n    //             <RadioGroup\n    //                 row\n    //                 aria-label=\"gender\"\n    //                 name=\"row-radio-buttons-group\"\n    //                 style={{\n    //                     width: 300,\n    //                     justifyContent: \"space-evenly\"\n    //                 }}\n    //             >\n    //                 <FormControlLabel\n    //                     value=\"male\"\n    //                     name=\"gender\"\n    //                     label={\"Male\"}\n    //                     control={<Radio />}\n    //                 // onChange={(event) => setData({ ...data, gender: event.target.value })}\n    //                 />\n    //                 <FormControlLabel\n    //                     value=\"female\"\n    //                     name=\"gender\"\n    //                     label={\"Female\"}\n    //                     control={<Radio />}\n    //                 // onChange={(event) => setData({ ...data, gender: event.target.value })}\n    //                 />\n    //             </RadioGroup>\n    //             <RadioGroup\n    //                 row\n    //                 aria-label=\"martial-status\"\n    //                 name=\"row-radio-buttons-group\"\n    //                 style={{\n    //                     width: 300,\n    //                     justifyContent: \"space-evenly\"\n    //                 }}\n    //             >\n    //                 <FormControlLabel\n    //                     value={true}\n    //                     label={\"Married\"}\n    //                     control={<Radio />}\n    //                 // onChange={(event) => { setData({ ...data, married: event.target.value == \"true\" ? true : false }) }}\n    //                 />\n    //                 <FormControlLabel\n    //                     value={false}\n    //                     control={<Radio />}\n    //                     label={\"Unmarried\"}\n    //                 // onChange={(event) => { setData({ ...data, married: event.target.value == \"true\" ? true : false }) }}\n    //                 />\n    //             </RadioGroup>\n\n    //             <CFormInput\n    //                 type=\"date\"\n    //                 label=\"Wedding Date\"\n    //                 // style={{ display: data.married === true ? \"inline-block\" : \"none\", width: 300, marginRight: 15 }}\n    //                 margin=\"dense\"\n    //                 variant=\"outlined\"\n    //             // value={data.weddingdate}\n    //             // onChange={(event) => setData({ ...data, weddingdate: event.target.value })}\n    //             />\n    //             <Grid>\n    //                 <CFormInput\n    //                     name=\"emailid\"\n    //                     margin=\"dense\"\n    //                     label=\"Email ID\"\n    //                     style={{ width: 300, marginRight: 15 }}\n    //                     variant=\"outlined\"\n    //                 // onChange={(event) => setData({ ...data, emailid: event.target.value })}\n    //                 // value={data.emailid}\n    //                 />\n\n    //                 <CFormInput\n    //                     name=\"mobile\"\n    //                     style={{ width: 300, marginRight: 15 }}\n    //                     label=\"Mobile\"\n    //                     margin=\"dense\"\n    //                     variant=\"outlined\"\n    //                 // value={data.mobile}\n    //                 // onChange={(event) => {\n    //                 //   let patt = /[^0-9]/g;\n    //                 //   const ph = event.target.value.replace(patt, '');\n    //                 //   setData({ ...data, mobile: ph.slice(0, 10) });\n    //                 // }}\n    //                 />\n    //             </Grid>\n\n    //             <Grid>\n    //                 <CFormInput\n    //                     name=\"address\"\n    //                     label=\"Address\"\n    //                     style={{ width: 300, marginRight: 15 }}\n    //                     margin=\"dense\"\n    //                     variant=\"outlined\"\n    //                 // value={data.address}\n    //                 // onChange={(event) => {\n    //                 //   const str = event.target.value.split(',');\n    //                 //   for (let i = 0; i < str.length; i++) {\n    //                 //     str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n    //                 //   }\n    //                 //   const address = str.join(',');\n    //                 //   setData({ ...data, address: address })\n    //                 // }}\n    //                 />\n    //                 {/* <Autocomplete\n    //       options={familyheads}\n    //       renderInput={(params) =>\n    //         <CFormInput\n    //           {...params}\n    //           name=\"familyhead\"\n    //           value={data.familyhead}\n    //           margin=\"dense\"\n    //           variant=\"outlined\"\n    //           label=\"Family Head\"\n    //           onChange={(event) => {\n    //             const str = event.target.value.split(' ');\n    //             for (let i = 0; i < str.length; i++) {\n    //               str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n    //             }\n    //             const familyheadname = str.join(' ');\n    //             setData({ ...data, familyhead: familyheadname })\n    //           }}\n    //         />\n    //       }\n    //     /> */}\n    //             </Grid>\n    //             <RadioGroup\n    //                 row\n    //                 aria-label=\"Baptizm\"\n    //                 name=\"row-radio-buttons-group\"\n    //                 style={{\n    //                     width: 300,\n    //                     justifyContent: \"space-evenly\"\n    //                 }}\n    //             >\n    //                 <FormControlLabel\n    //                     control={<Radio />}\n    //                     value={true}\n    //                     label={\"Baptized\"}\n    //                 // onChange={(event) => setData({ ...data, baptized: event.target.value == \"true\" ? true : false })}\n    //                 />\n    //                 <FormControlLabel\n    //                     value={false}\n    //                     control={<Radio />}\n    //                     label={\"Not Baptized\"}\n    //                 // onChange={(event) => setData({ ...data, baptized: event.target.value == \"true\" ? true : false })}\n    //                 />\n    //             </RadioGroup>\n    //                 <CFormSwitch\n    //                     size=\"xl\"\n    //                     onChange={(event)=>{\n    //                         if(event.target.value===\"on\"){\n    //                             alert(event.target.value)\n    //                         }\n    //                     }}\n    //                 />\n    //             <RadioGroup\n    //                 row\n    //                 aria-label=\"mobile-type\"\n    //                 name=\"row-radio-buttons-group\"\n    //                 style={{\n    //                     width: 300,\n    //                     justifyContent: \"space-evenly\"\n    //                 }}\n    //             >\n    //                 <FormControlLabel\n    //                     label={\"Android\"}\n    //                     value={true}\n    //                     control={<Radio />}\n    //                 // onChange={(event) => setData({ ...data, android: event.target.value == \"true\" ? true : false })}\n    //                 />\n    //                 <FormControlLabel\n    //                     label={\"Normal\"}\n    //                     value={false}\n    //                     control={<Radio />}\n    //                 // onChange={(event) => setData({ ...data, android: event.target.value == \"true\" ? true : false })}\n    //                 />\n    //             </RadioGroup>\n\n    //             <Button\n    //                 variant=\"contained\"\n    //             // onClick={addrecords}\n    //             >\n    //                 Add to records</Button>\n    //         </Grid>\n    //     </Grid>\n    // </Grid>\n  )\n}\n\nexport default Dataentry\n"]},"metadata":{},"sourceType":"module"}