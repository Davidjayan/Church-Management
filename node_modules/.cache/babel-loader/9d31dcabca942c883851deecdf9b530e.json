{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Accounting.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, TextField, Select, MenuItem, Button, IconButton, Typography, Table, TableBody, TableCell, TableRow, Autocomplete } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { url } from \"../Constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Accounting = () => {\n  _s();\n\n  const [people, setPeople] = useState([{\n    id: 1,\n    Name: '',\n    type: '',\n    Amount: ''\n  }]);\n  const [count, setCount] = useState(2);\n  const [names, setnames] = useState([]);\n  const [searchterm, setsearchterm] = useState();\n  const arrOfferingTypes = [{\n    \"name\": \"Select\",\n    \"value\": \"\"\n  }, {\n    \"name\": \"Tithe\",\n    \"value\": \"Tithe\"\n  }, {\n    \"name\": \"Offering\",\n    \"value\": \"Offering\"\n  }, {\n    \"name\": \"Missionary\",\n    \"value\": \"Missionary\"\n  }, {\n    \"name\": \"Special Offering\",\n    \"value\": \"Special Offering\"\n  }, {\n    \"name\": \"Baptism Offering\",\n    \"value\": \"Baptism Offering\"\n  }, {\n    \"name\": \"Birthday Offering\",\n    \"value\": \"Birthday Offering\"\n  }, {\n    \"name\": \"Wedding Offering\",\n    \"value\": \"Wedding Offering\"\n  }, {\n    \"name\": \"Child Dedication Offering\",\n    \"value\": \"Child Dedication Offering\"\n  }, {\n    \"name\": \"Committed Offering\",\n    \"value\": \"Committed Offering\"\n  }, {\n    \"name\": \"Building Fund\",\n    \"value\": \"Building Fund\"\n  }];\n  const results = !searchterm ? names : names.filter(person => person.toLowerCase().includes(searchterm.toLocaleLowerCase()));\n  const [dateofofferings, setdateofofferings] = useState();\n  const [offeringsAsObject, setOfferings] = useState([{\n    \"price\": 2000,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 500,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 200,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 100,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 50,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 20,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 10,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 5,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 2,\n    \"cnt\": 0,\n    \"tot\": 0\n  }, {\n    \"price\": 1,\n    \"cnt\": 0,\n    \"tot\": 0\n  }]);\n  let name = people.map(k => k.Name);\n  let type = people.map(k => k.type);\n  let amount = people.map(k => k.Amount);\n  let today = new Date();\n  let dd = today.getDate();\n  dd = dd < 10 ? \"0\" + dd : dd;\n  let mm = today.getMonth() + 1 > 12 ? today.getMonth() : today.getMonth() + 1;\n  mm = mm < 10 ? \"0\" + mm : mm;\n\n  if (dd === \"00\") {\n    dd = 31;\n    mm = mm - 1;\n  }\n\n  let yyyy = today.getFullYear();\n  today = yyyy + \"-\" + mm + \"-\" + dd;\n  let grandTotal = offeringsAsObject.reduce((accumulator, item) => accumulator + item.tot, 0);\n  grandTotal = isNaN(grandTotal) ? 0 : grandTotal;\n  let Total = isNaN(people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n  const churchOffering = isNaN(grandTotal - Total) ? 0 : grandTotal - Total;\n  let titheTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let offeringTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let missionaryTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let specialofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let baptismofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let birthdayofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let weddingofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let childdedicationofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let committedofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let buildingfundTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let arrOfTotals = [{\n    \"name\": \"Total\",\n    \"value\": Total\n  }, {\n    \"name\": \"Tithe Total\",\n    \"value\": titheTotal\n  }, {\n    \"name\": \"Offering Total\",\n    \"value\": offeringTotal\n  }, {\n    \"name\": \"Special Offering Total\",\n    \"value\": specialofferingTotal\n  }, {\n    \"name\": \"Missionary Total\",\n    \"value\": missionaryTotal\n  }, {\n    \"name\": \"Church Offering\",\n    \"value\": churchOffering\n  }, {\n    \"name\": \"Grand Total\",\n    \"value\": grandTotal\n  }];\n\n  const submit = () => {\n    // if (name[0] && dateofofferings && (amount !== 0) && churchOffering >= 0) {\n    fetch(\"http://\".concat(url, \"/jehovanissi/api/accounting.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        type: type,\n        amount: amount,\n        dateofofferings: dateofofferings,\n        churchOffering: churchOffering,\n        titheTotal: titheTotal,\n        grandTotal: grandTotal,\n        offeringTotal: offeringTotal,\n        missionaryTotal: missionaryTotal,\n        specialofferingTotal: specialofferingTotal,\n        buildingfundTotal: buildingfundTotal,\n        baptismofferingTotal: baptismofferingTotal,\n        birthdayofferingTotal: birthdayofferingTotal,\n        weddingofferingTotal: weddingofferingTotal,\n        childdedicationofferingTotal: childdedicationofferingTotal,\n        committedofferingTotal: committedofferingTotal,\n        twothousands: offeringsAsObject[0].cnt,\n        twohundreds: offeringsAsObject[2].cnt,\n        fivehundreds: offeringsAsObject[1].cnt,\n        hundreds: offeringsAsObject[3].cnt,\n        fiftys: offeringsAsObject[4].cnt,\n        twentys: offeringsAsObject[5].cnt,\n        tens: offeringsAsObject[6].cnt,\n        fives: offeringsAsObject[7].cnt,\n        twos: offeringsAsObject[8].cnt,\n        ones: offeringsAsObject[9].cnt\n      })\n    }).then(res => res.json()).then(result => {\n      alert(result);\n    }).catch(error => {\n      console.error(error);\n    }); // }\n    // else {\n    //   alert(\"Input all required and check for mistakes\");\n    // }\n  };\n\n  const searchapi = () => {\n    fetch(\"\".concat(url, \"/jehovanissi/api/searchname.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      setnames(result);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    searchapi();\n  }, [1]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: \"space-evenly\",\n    direction: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        children: people.map(p => {\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  options: results,\n                  fullWidth: false,\n                  style: {\n                    width: 200\n                  },\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    margin: \"dense\",\n                    size: \"small\",\n                    placeholder: \"Enter Name\",\n                    onChange: event => {\n                      const str = event.target.value.split(' ');\n\n                      for (let i = 0; i < str.length; i++) {\n                        str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                      }\n\n                      const Name = str.join(' ');\n                      setsearchterm(Name);\n                      setPeople(currentPeople => currentPeople.map(x => x.id === p.id ? { ...x,\n                        Name\n                      } : x));\n                    },\n                    value: p.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 208,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  size: \"small\",\n                  style: {\n                    width: 200,\n                    marginTop: 7\n                  },\n                  onChange: event => {\n                    const type = event.target.value;\n                    setPeople(currentPeople => currentPeople.map(x => x.id === p.id ? { ...x,\n                      type\n                    } : x));\n                  },\n                  children: arrOfferingTypes.map((val, key) => {\n                    return /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: val.value,\n                      children: val.name\n                    }, key, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 248,\n                      columnNumber: 27\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  margin: \"dense\",\n                  size: \"small\",\n                  style: {\n                    width: 200\n                  },\n                  onChange: event => {\n                    const Am = event.target.value;\n                    let patt = /[^0-9]/g;\n                    const Amount = parseFloat(Am.replace(patt, ''));\n                    setPeople(currentPeople => currentPeople.map(x => x.id === p.id ? { ...x,\n                      Amount\n                    } : x));\n                  },\n                  value: p.Amount,\n                  type: \"number\",\n                  placeholder: \"Enter Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  style: {\n                    justifySelf: \"center\",\n                    alignSelf: \"center\"\n                  },\n                  onClick: () => {\n                    setPeople(currentPeople => currentPeople.filter(x => x.id !== p.id));\n                    setCount(count - 1);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(DeleteOutlineIcon, {\n                    style: {\n                      justifySelf: \"center\",\n                      alignSelf: \"center\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this)\n          }, p.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => {\n          setPeople(currentPeople => [...currentPeople, {\n            id: count,\n            Name: '',\n            type: '',\n            Amount: ''\n          }]);\n          setCount(count + 1);\n        },\n        children: /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        children: /*#__PURE__*/_jsxDEV(TableBody, {\n          children: arrOfTotals.map((val, key) => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: val.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: val.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: submit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        value: dateofofferings,\n        size: \"small\",\n        onChange: event => setdateofofferings(event.target.value),\n        type: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setdateofofferings(today),\n        children: \"Click if date is todays date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        children: /*#__PURE__*/_jsxDEV(TableBody, {\n          children: offeringsAsObject.map((k, key) => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              direction: \"row\",\n              justifyItems: \"center\",\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  margin: 3,\n                  children: [k.price, \" x \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  style: {\n                    width: 100\n                  },\n                  margin: \"dense\",\n                  size: \"small\",\n                  onChange: e => {\n                    setOfferings(cp => cp.map((l, lkey) => lkey === key ? { ...l,\n                      cnt: parseInt(e.target.value),\n                      tot: parseInt(e.target.value) * k.price\n                    } : l));\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\" = \", isNaN(k.tot) ? 0 : k.tot]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 19\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Accounting, \"HDx7tpkaPl9hjeqKkrOKp5Kq6wo=\");\n\n_c = Accounting;\nexport default Accounting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Accounting\");","map":{"version":3,"sources":["/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Accounting.js"],"names":["Grid","TextField","Select","MenuItem","Button","IconButton","Typography","Table","TableBody","TableCell","TableRow","Autocomplete","React","useEffect","useState","AddCircleOutlineIcon","DeleteOutlineIcon","url","Accounting","people","setPeople","id","Name","type","Amount","count","setCount","names","setnames","searchterm","setsearchterm","arrOfferingTypes","results","filter","person","toLowerCase","includes","toLocaleLowerCase","dateofofferings","setdateofofferings","offeringsAsObject","setOfferings","name","map","k","amount","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","grandTotal","reduce","accumulator","item","tot","isNaN","Total","parseFloat","churchOffering","titheTotal","offeringTotal","missionaryTotal","specialofferingTotal","baptismofferingTotal","birthdayofferingTotal","weddingofferingTotal","childdedicationofferingTotal","committedofferingTotal","buildingfundTotal","arrOfTotals","submit","fetch","method","headers","body","JSON","stringify","twothousands","cnt","twohundreds","fivehundreds","hundreds","fiftys","twentys","tens","fives","twos","ones","then","res","json","result","alert","catch","error","console","searchapi","p","width","params","event","str","target","value","split","i","length","charAt","toUpperCase","substring","join","currentPeople","x","marginTop","val","key","Am","patt","replace","justifySelf","alignSelf","price","e","cp","l","lkey","parseInt"],"mappings":"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","sourcesContent":["import { Grid, TextField, Select, MenuItem, Button, IconButton, Typography, Table, TableBody, TableCell, TableRow, Autocomplete } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { url } from \"../Constants\";\n\n\n\nconst Accounting = () => {\n  const [people, setPeople] = useState([{ id: 1, Name: '', type: '', Amount: '' }]);\n  const [count, setCount] = useState(2);\n  const [names, setnames] = useState([]);\n\n  const [searchterm, setsearchterm] = useState();\n\n  const arrOfferingTypes = [\n    { \"name\": \"Select\", \"value\": \"\" },\n    { \"name\": \"Tithe\", \"value\": \"Tithe\" },\n    { \"name\": \"Offering\", \"value\": \"Offering\" },\n    { \"name\": \"Missionary\", \"value\": \"Missionary\" },\n    { \"name\": \"Special Offering\", \"value\": \"Special Offering\" },\n    { \"name\": \"Baptism Offering\", \"value\": \"Baptism Offering\" },\n    { \"name\": \"Birthday Offering\", \"value\": \"Birthday Offering\" },\n    { \"name\": \"Wedding Offering\", \"value\": \"Wedding Offering\" },\n    { \"name\": \"Child Dedication Offering\", \"value\": \"Child Dedication Offering\" },\n    { \"name\": \"Committed Offering\", \"value\": \"Committed Offering\" },\n    { \"name\": \"Building Fund\", \"value\": \"Building Fund\" }\n  ]\n\n  const results = !searchterm ? names : names.filter(person => person.toLowerCase().includes(searchterm.toLocaleLowerCase()));\n\n  const [dateofofferings, setdateofofferings] = useState();\n\n  const [offeringsAsObject, setOfferings] = useState(\n    [\n      { \"price\": 2000, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 500, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 200, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 100, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 50, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 20, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 10, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 5, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 2, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 1, \"cnt\": 0, \"tot\": 0 },\n    ]\n  );\n\n  let name = people.map((k) => k.Name);\n\n  let type = people.map((k) => k.type);\n\n  let amount = people.map((k) => k.Amount);\n\n\n\n\n\n  let today = new Date();\n\n  let dd = today.getDate();\n  dd = dd < 10 ? \"0\" + dd : dd;\n\n\n  let mm = (today.getMonth() + 1) > 12 ? today.getMonth() : today.getMonth() + 1;\n  mm = mm < 10 ? \"0\" + mm : mm;\n  if (dd === \"00\") {\n    dd = 31;\n    mm = mm - 1;\n  }\n  let yyyy = today.getFullYear();\n\n  today = yyyy + \"-\" + mm + \"-\" + dd;\n\n  let grandTotal = offeringsAsObject.reduce((accumulator, item) => accumulator + item.tot, 0);\n  grandTotal = isNaN(grandTotal) ? 0 : grandTotal;\n\n  let Total = isNaN(people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n\n  const churchOffering = isNaN(grandTotal - Total) ? 0 : grandTotal - Total;\n\n\n\n  let titheTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let offeringTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let missionaryTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let specialofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let baptismofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let birthdayofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let weddingofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let childdedicationofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let committedofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let buildingfundTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let arrOfTotals = [\n    { \"name\": \"Total\", \"value\": Total },\n    { \"name\": \"Tithe Total\", \"value\": titheTotal },\n    { \"name\": \"Offering Total\", \"value\": offeringTotal },\n    { \"name\": \"Special Offering Total\", \"value\": specialofferingTotal },\n    { \"name\": \"Missionary Total\", \"value\": missionaryTotal },\n    { \"name\": \"Church Offering\", \"value\": churchOffering },\n    { \"name\": \"Grand Total\", \"value\": grandTotal }\n  ]\n\n  const submit = () => {\n    // if (name[0] && dateofofferings && (amount !== 0) && churchOffering >= 0) {\n      fetch(`http://${url}/jehovanissi/api/accounting.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n\n        },\n        body: JSON.stringify({\n          name: name,\n          type: type,\n          amount: amount,\n          dateofofferings: dateofofferings,\n          churchOffering: churchOffering,\n          titheTotal: titheTotal,\n          grandTotal: grandTotal,\n          offeringTotal: offeringTotal,\n          missionaryTotal: missionaryTotal,\n          specialofferingTotal: specialofferingTotal,\n          buildingfundTotal: buildingfundTotal,\n          baptismofferingTotal: baptismofferingTotal,\n          birthdayofferingTotal: birthdayofferingTotal,\n          weddingofferingTotal: weddingofferingTotal,\n          childdedicationofferingTotal: childdedicationofferingTotal,\n          committedofferingTotal: committedofferingTotal,\n          twothousands: offeringsAsObject[0].cnt,\n          twohundreds: offeringsAsObject[2].cnt,\n          fivehundreds: offeringsAsObject[1].cnt,\n          hundreds: offeringsAsObject[3].cnt,\n          fiftys: offeringsAsObject[4].cnt,\n          twentys: offeringsAsObject[5].cnt,\n          tens: offeringsAsObject[6].cnt,\n          fives: offeringsAsObject[7].cnt,\n          twos: offeringsAsObject[8].cnt,\n          ones: offeringsAsObject[9].cnt\n\n        })\n      })\n        .then(res => res.json())\n        .then((result) => {\n          alert(result);\n        }).catch((error) => {\n          console.error(error);\n        });\n\n    // }\n\n\n    // else {\n    //   alert(\"Input all required and check for mistakes\");\n    // }\n  }\n  const searchapi = () => {\n    fetch(`${url}/jehovanissi/api/searchname.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n\n      },\n    })\n      .then(res => res.json())\n      .then((result) => {\n        setnames(result);\n      }).catch((error) => {\n        console.error(error);\n      });\n  }\n  useEffect(() => {\n    searchapi();\n  }, [1])\n\n\n  return (\n    <Grid\n      container\n      justifyContent={\"space-evenly\"}\n      direction={\"row\"}\n    >\n      <Grid>\n        <Table\n          size=\"small\"\n        >\n          {people.map((p) => {\n            return (\n              <Grid key={p.id}>\n                <TableRow>\n                  <TableCell>\n                    <Autocomplete\n                      options={results}\n                      fullWidth={false}\n                      style={{ width: 200 }}\n                      renderInput={params =>\n                        <TextField\n                          {...params}\n                          margin=\"dense\"\n                          size=\"small\"\n                          placeholder=\"Enter Name\"\n                          onChange={(event) => {\n                            const str = event.target.value.split(' ');\n                            for (let i = 0; i < str.length; i++) {\n\n                              str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                            }\n\n                            const Name = str.join(' ');\n                            setsearchterm(Name);\n                            setPeople((currentPeople) => currentPeople.map(x => x.id === p.id ? {\n                              ...x,\n                              Name\n                            } : x));\n                          }} value={p.Name}\n                        />\n                      }\n                    />\n                  </TableCell>\n                  <TableCell>\n\n                    <Select\n                      size=\"small\"\n                      style={{ width: 200, marginTop: 7 }}\n                      onChange={(event) => {\n                        const type = event.target.value;\n                        setPeople((currentPeople) => currentPeople.map(x => x.id === p.id ? {\n                          ...x,\n                          type\n                        } : x));\n\n                      }}\n                    >\n\n                      {arrOfferingTypes.map((val, key) => {\n                        return (\n                          <MenuItem\n                            key={key}\n                            value={val.value}\n                          >\n                            {val.name}\n                          </MenuItem>\n                        )\n                      })}\n                    </Select>\n                  </TableCell>\n                  <TableCell>\n\n                    <TextField\n                      margin=\"dense\"\n                      size=\"small\"\n                      style={{ width: 200 }}\n                      onChange={(event) => {\n                        const Am = event.target.value;\n                        let patt = /[^0-9]/g;\n                        const Amount = parseFloat(Am.replace(patt, ''));\n                        setPeople((currentPeople) => currentPeople.map(x => x.id === p.id ? {\n                          ...x,\n                          Amount\n                        } : x));\n                      }}\n                      value={p.Amount}\n                      type=\"number\"\n                      placeholder=\"Enter Amount\" />\n                  </TableCell>\n                  <TableCell>\n\n                    <IconButton\n                      style={{ justifySelf: \"center\", alignSelf: \"center\" }}\n                      onClick={\n                        () => {\n                          setPeople(currentPeople => currentPeople.filter(x => x.id !== p.id)); setCount(count - 1)\n                        }\n                      }>\n                      <DeleteOutlineIcon\n                        style={{ justifySelf: \"center\", alignSelf: \"center\" }}\n                      />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              </Grid>\n            )\n\n          })}\n        </Table>\n        <IconButton\n          onClick={() => {\n            setPeople(currentPeople => [...currentPeople, {\n              id: count,\n              Name: '',\n              type: '',\n              Amount: '',\n            }]); setCount(count + 1)\n          }}\n        ><AddCircleOutlineIcon /></IconButton>\n        <Table>\n          <TableBody>\n            {arrOfTotals.map((val, key) => {\n              return (\n                <TableRow\n                  key={key}\n                >\n                  <TableCell>{val.name}</TableCell>\n                  <TableCell>{val.value}</TableCell>\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n        <Button\n          variant=\"contained\"\n          onClick={submit}\n        >\n          Submit\n        </Button>\n      </Grid>\n      <Grid>\n        <TextField\n          value={dateofofferings}\n          size=\"small\"\n          onChange={(event) => setdateofofferings(event.target.value)}\n          type=\"date\" />\n        <Button\n          onClick={() => setdateofofferings(today)}\n        >\n          Click if date is todays date\n        </Button>\n        <Table\n          size=\"small\"\n        >\n          <TableBody>\n            {offeringsAsObject.map((k, key) => {\n              return (\n                <TableRow\n                  key={key}\n                  direction={\"row\"}\n                  justifyItems={\"center\"}\n                  alignItems={\"center\"}\n                >\n                  <TableCell>\n                    <Typography\n                      margin={3}\n                    >{k.price} x </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <TextField\n                      style={{ width: 100 }}\n                      margin=\"dense\"\n                      size=\"small\"\n                      onChange={(e) => {\n                        setOfferings(cp => cp.map((l, lkey) => lkey === key ?\n                          {\n                            ...l,\n                            cnt: parseInt(e.target.value),\n                            tot: parseInt(e.target.value) * k.price\n                          }\n                          : l))\n                      }}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Typography> = {isNaN(k.tot) ? 0 : k.tot}</Typography>\n                  </TableCell>\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </Grid>\n\n    </Grid>\n\n  )\n}\nexport default Accounting;"]},"metadata":{},"sourceType":"module"}