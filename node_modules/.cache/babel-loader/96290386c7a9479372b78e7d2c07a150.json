{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/mydev/Church-Management/src/views/Components/Dataentry.js\",\n    _s = $RefreshSig$();\n\nimport { useValidation } from '@mui/x-date-pickers/internals/hooks/validation/useValidation';\nimport { useEffect, useState } from 'react';\nimport { url } from '../Constants';\nimport { DataEntryForms } from './DataEntryForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dataentry = () => {\n  _s();\n\n  const [familyheads, setFamilyheads] = useState([]);\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    variant: 'filled',\n    severity: 'error'\n  });\n  const [validity, setValidity] = useState(true);\n  const [age, setAge] = useState();\n  const [data, setData] = useState({\n    name: '',\n    dob: '',\n    gender: 'male',\n    weddingdate: '',\n    emailid: '',\n    mobile: '',\n    address: '',\n    familyhead: '',\n    familyid: '',\n    selfid: '',\n    android: false,\n    baptized: false,\n    married: false\n  });\n  useEffect(() => {\n    let yearDifference = 31536000000;\n    setAge(String(parseInt((new Date().getTime() - new Date(data.dob).getTime()) / yearDifference).toString().replace(\"-\", \"\")));\n    console.log(age);\n  }, [data.dob]);\n\n  const validation = async param => {\n    setValidated(param);\n  };\n\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() == false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      validation(true).then(() => {\n        addrecords();\n      });\n    }\n  };\n\n  const addrecords = () => {\n    if (validated) {\n      let Familyid = data.familyid;\n      let Selfid = data.selfid;\n      let Name = data.name;\n      let Dob = data.dob;\n      let Age = age;\n      let Gender = data.gender;\n      let Married = data.married == false ? 0 : data.married;\n      let Weddingdate = data.weddingdate;\n      let Emailid = data.emailid;\n      let Mobile = data.mobile;\n      let Address = data.address;\n      let Familyhead = data.familyhead;\n      let Baptized = data.baptized == false ? 0 : data.baptized;\n      let Android = data.android == false ? 0 : data.android;\n      fetch(`${url}/member_details.php`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: Name,\n          dob: Dob,\n          age: Age,\n          gender: Gender,\n          married: Married,\n          weddingdate: Weddingdate,\n          emailid: Emailid,\n          mobile: Mobile,\n          address: Address,\n          familyhead: Familyhead,\n          baptized: Baptized,\n          android: Android,\n          familyid: Familyid,\n          selfid: Selfid\n        })\n      }).then(res => res.json()).then(result => {\n        setNotify({ ...notify,\n          isOpen: true,\n          severity: result['status'] == 1 ? \"success\" : \"error\",\n          message: String(result['message'])\n        }); // setData({\n        //   name: '',\n        //   dob: new Date(),\n        //   gender: 'male',\n        //   weddingdate: '',\n        //   emailid: '',\n        //   mobile: '',\n        //   address: '',\n        //   familyhead: '',\n        //   familyid: '',\n        //   selfid: '',\n        //   android: false,\n        //   baptized: false,\n        //   married: false,\n        // });\n      }).catch(error => {\n        console.error(error);\n      });\n    } else {\n      setNotify({ ...notify,\n        isOpen: true,\n        message: \"Input all required\"\n      });\n    }\n  };\n\n  const searchfamilyhead = () => {\n    fetch(`${url}/searchfamilyhead.php`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      let filteredresult = [...new Set(result)];\n      setFamilyheads(filteredresult);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    searchfamilyhead();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DataEntryForms, {\n    familyheads: familyheads,\n    data: data,\n    notify: notify,\n    setNotify: setNotify,\n    setData: setData,\n    validated: validated,\n    handleSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dataentry, \"6jSkShzCBnuwUilDZkhN0L2qOLQ=\");\n\n_c = Dataentry;\nexport default Dataentry;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataentry\");","map":{"version":3,"sources":["/home/david/Desktop/mydev/Church-Management/src/views/Components/Dataentry.js"],"names":["useValidation","useEffect","useState","url","DataEntryForms","Dataentry","familyheads","setFamilyheads","notify","setNotify","isOpen","message","variant","severity","validity","setValidity","age","setAge","data","setData","name","dob","gender","weddingdate","emailid","mobile","address","familyhead","familyid","selfid","android","baptized","married","yearDifference","String","parseInt","Date","getTime","toString","replace","console","log","validation","param","setValidated","validated","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","then","addrecords","Familyid","Selfid","Name","Dob","Age","Gender","Married","Weddingdate","Emailid","Mobile","Address","Familyhead","Baptized","Android","fetch","method","headers","Accept","body","JSON","stringify","res","json","result","catch","error","searchfamilyhead","filteredresult","Set"],"mappings":"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","sourcesContent":["import { useValidation } from '@mui/x-date-pickers/internals/hooks/validation/useValidation';\nimport { useEffect, useState } from 'react'\nimport { url } from '../Constants'\nimport { DataEntryForms } from './DataEntryForm'\n\n\nconst Dataentry = () => {\n  const [familyheads, setFamilyheads] = useState([]);\n  const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n  const [validity,setValidity] = useState(true);\n  const [age,setAge] = useState();\n\n\n  const [data, setData] = useState({\n    name: '',\n    dob: '',\n    gender: 'male',\n    weddingdate: '',\n    emailid: '',\n    mobile: '',\n    address: '',\n    familyhead: '',\n    familyid: '',\n    selfid: '',\n    android: false,\n    baptized: false,\n    married: false,\n  })\n\n  useEffect(() => {\n\n\n    let yearDifference = 31536000000;\n    setAge(String(parseInt((new Date().getTime()-new Date(data.dob).getTime())/yearDifference).toString().replace(\"-\",\"\")));\n\n\n    console.log(age);\n  }, [data.dob])\n  \nconst validation=async (param)=>{\n  setValidated(param)\n}\n\n  const [validated, setValidated] = useState(false)\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n\n    if (form.checkValidity() == false) {\n      event.preventDefault()\n\n      event.stopPropagation()\n    }\n    else {\n      validation(true).then(()=>{\n        addrecords();\n      })\n    }\n\n  }\n  \n\n  const addrecords = () => {\n    if (validated) {\n      let Familyid = data.familyid\n      let Selfid = data.selfid\n      let Name = data.name\n      let Dob = data.dob\n      let Age = age;\n      let Gender = data.gender\n      let Married = data.married==false?0:data.married;\n      let Weddingdate = data.weddingdate\n      let Emailid = data.emailid\n      let Mobile = data.mobile\n      let Address = data.address\n      let Familyhead = data.familyhead\n      let Baptized = data.baptized==false?0:data.baptized\n      let Android = data.android==false?0:data.android\n\n      fetch(`${url}/member_details.php`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: Name,\n          dob: Dob,\n          age: Age,\n          gender: Gender,\n          married: Married,\n          weddingdate: Weddingdate,\n          emailid: Emailid,\n          mobile: Mobile,\n          address: Address,\n          familyhead: Familyhead,\n          baptized: Baptized,\n          android: Android,\n          familyid: Familyid,\n          selfid: Selfid,\n        }),\n      })\n        .then((res) => res.json())\n        .then((result) => {\n          setNotify({\n            ...notify,\n            isOpen:true,\n            severity:result['status']==1?\"success\":\"error\",\n            message:String(result['message'])\n          });\n          // setData({\n          //   name: '',\n          //   dob: new Date(),\n          //   gender: 'male',\n          //   weddingdate: '',\n          //   emailid: '',\n          //   mobile: '',\n          //   address: '',\n          //   familyhead: '',\n          //   familyid: '',\n          //   selfid: '',\n          //   android: false,\n          //   baptized: false,\n          //   married: false,\n          // });\n        })\n        .catch((error) => {\n          console.error(error)\n        })\n    } else {\n      setNotify({\n        ...notify,\n        isOpen:true,\n        message:\"Input all required\"\n      })\n    }\n  }\n\n  const searchfamilyhead = () => {\n    fetch(`${url}/searchfamilyhead.php`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        let filteredresult = [...new Set(result)]\n        setFamilyheads(filteredresult)\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n  }\n  useEffect(() => {\n    searchfamilyhead()\n  }, [])\n\n  return (\n    <DataEntryForms\n    familyheads={familyheads}\n    data={data}\n    notify={notify}\n    setNotify={setNotify}\n    setData={setData}\n    validated={validated}\n    handleSubmit={handleSubmit}\n    />\n  )\n}\n\nexport default Dataentry\n"]},"metadata":{},"sourceType":"module"}