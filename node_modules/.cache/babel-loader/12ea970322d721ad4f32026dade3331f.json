{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Editaccounting.js\",\n    _s = $RefreshSig$();\n\nimport AddCircleOutline from \"@mui/icons-material/AddCircleOutline\";\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { Autocomplete, Button, Grid, IconButton, MenuItem, Select, Table, TableCell, TableHead, TableRow, TextField, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { url } from \"../../Constants\";\nimport { AlertMessage } from \"../Support/AlertMessage\";\nimport { Datepicker } from \"../Support/Datepicker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editaccounting = () => {\n  _s();\n\n  const [dateValue, setdateValue] = useState();\n  const [dateset, isDateset] = useState(false);\n  const [report, setOfferingReport] = useState([]);\n  const [denominationsAndTotals, setDenominationsandTotals] = useState({});\n  const [click, setclick] = useState(0);\n  const [tempname, settempname] = useState('');\n  const [temptype, settemptype] = useState('');\n  const [tempamount, settempamount] = useState(0);\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    variant: 'filled',\n    severity: 'error'\n  });\n  const arrOfferingTypes = [{\n    \"name\": \"Select\",\n    \"value\": \"\"\n  }, {\n    \"name\": \"Tithe\",\n    \"value\": \"Tithe\"\n  }, {\n    \"name\": \"Offering\",\n    \"value\": \"Offering\"\n  }, {\n    \"name\": \"Missionary\",\n    \"value\": \"Missionary\"\n  }, {\n    \"name\": \"Special Offering\",\n    \"value\": \"Special Offering\"\n  }, {\n    \"name\": \"Baptism Offering\",\n    \"value\": \"Baptism Offering\"\n  }, {\n    \"name\": \"Birthday Offering\",\n    \"value\": \"Birthday Offering\"\n  }, {\n    \"name\": \"Wedding Offering\",\n    \"value\": \"Wedding Offering\"\n  }, {\n    \"name\": \"Child Dedication Offering\",\n    \"value\": \"Child Dedication Offering\"\n  }, {\n    \"name\": \"Committed Offering\",\n    \"value\": \"Committed Offering\"\n  }, {\n    \"name\": \"Building Fund\",\n    \"value\": \"Building Fund\"\n  }];\n\n  const fetchOfferingAndDenominationsByDate = () => {\n    fetch(\"\".concat(url, \"/Church-management-api/api/accounting-fetch.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date: dateValue\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.status !== 0) {\n        setOfferingReport(result.message[0]);\n        setDenominationsandTotals(result.message[1]);\n\n        for (let i = 0; i < result.message[1].length; i++) {\n          result.message[1][i].map((value, key) => {\n            console.log(value, key, \"RESS\");\n          });\n        }\n\n        console.log(typeof result.message[1][0]['ChilddedicationofferingTotal'], \"RES\");\n        isDateset(true);\n        report.map((x, key) => {\n          setOfferingReport(currentPeople => currentPeople.map((p, l) => l === key ? { ...p,\n            OldType: p.Type\n          } : p));\n        });\n      } else {\n        setNotify({ ...notify,\n          isOpen: true,\n          message: result.message\n        });\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  let Total = isNaN(report.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : report.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n  let grandTotal = 1 * denominationsAndTotals['One'] + 2 * denominationsAndTotals['Two'] + 5 * denominationsAndTotals['Five'] + 10 * denominationsAndTotals['Ten'] + 20 * denominationsAndTotals['Twenty'] + 50 * denominationsAndTotals['Fifty'] + 100 * denominationsAndTotals['Hundreds'] + 200 * denominationsAndTotals['TwoHundreds'] + 500 * denominationsAndTotals['FiveHundreds'] + 2000 * denominationsAndTotals['TwoThousands'];\n  let titheTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let offeringTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let missionaryTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let specialofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let baptismofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let birthdayofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let weddingofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let childdedicationofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let committedofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let buildingfundTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n  let churchOffering = grandTotal - Total;\n  let name = report.map(k => k.Name);\n  let type = report.map(k => k.Type);\n  let oldtype = report.map(k => k.OldType);\n  let amount = report.map(k => k.Amount);\n  const [names, setnames] = useState([]);\n  const [searchterm, setsearchterm] = useState();\n  const results = !searchterm ? names : names.filter(person => person.toLowerCase().includes(searchterm.toLocaleLowerCase()));\n\n  const searchapi = () => {\n    fetch(\"\".concat(url, \"/Church-management-api/api/searchname.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      setnames(result);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    searchapi();\n  }, [1]);\n\n  const confirm = () => {\n    fetch(\"\".concat(url, \"/Church-management-api/api/edit-accounting.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        Name: name,\n        Type: type,\n        Amount: amount,\n        OldType: oldtype,\n        date: dateValue,\n        TwoThousands: denominationsAndTotals['TwoThousands'],\n        FiveHundreds: denominationsAndTotals['FiveHundreds'],\n        TwoHundreds: denominationsAndTotals['TwoHundreds'],\n        Hundreds: denominationsAndTotals['Hundreds'],\n        Fifty: denominationsAndTotals['Fifty'],\n        Twenty: denominationsAndTotals['Twenty'],\n        Ten: denominationsAndTotals['Ten'],\n        Five: denominationsAndTotals['Five'],\n        Two: denominationsAndTotals['Two'],\n        One: denominationsAndTotals['One'],\n        ChurchOffering: churchOffering,\n        TitheTotal: titheTotal,\n        OfferingTotal: offeringTotal,\n        SpecialOfferingTotal: specialofferingTotal,\n        BaptismofferingTotal: baptismofferingTotal,\n        BirthdayofferingTotal: birthdayofferingTotal,\n        WeddingofferingTotal: weddingofferingTotal,\n        ChilddedicationofferingTotal: childdedicationofferingTotal,\n        CommittedofferingTotal: committedofferingTotal,\n        MissionaryTotal: missionaryTotal,\n        BuildingFundTotal: buildingfundTotal,\n        GrandTotal: grandTotal\n      })\n    }).then(res => res.json()).then(result => {\n      setNotify({ ...notify,\n        isOpen: true,\n        message: result\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const deleteRow = (delName, delType) => {\n    fetch(\"\".concat(url, \"/Church-management-api/api/accounting-delete-row.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        date: dateValue,\n        name: delName,\n        type: delType\n      })\n    }).then(res => res.json()).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const addnew = () => {\n    fetch(\"\".concat(url, \"/Church-management-api/api/accounting-add-new.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        Name: tempname,\n        date: dateValue,\n        Name: tempname,\n        Type: temptype,\n        Amount: tempamount\n      })\n    }).then(res => res.json()).catch(error => {\n      console.error(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    style: {\n      display: \"grid\",\n      justifyContent: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(AlertMessage, {\n      notify: notify,\n      setNotify: setNotify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Datepicker, {\n        setValue: setdateValue,\n        value: dateValue,\n        label: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"btn2\",\n        onClick: () => {\n          fetchOfferingAndDenominationsByDate();\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      style: {\n        display: dateset ? \"block\" : \"none\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                children: [\"REPORT ON \", new Date(dateValue).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), report.map((p, key) => {\n          return /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: p.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                value: p.Type,\n                onChange: event => {\n                  const Type = event.target.value;\n                  setOfferingReport(currentPeople => currentPeople.map((x, l) => l === key ? { ...x,\n                    Type\n                  } : x));\n                },\n                children: arrOfferingTypes.map((val, key) => {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: val.value,\n                    children: val.name\n                  }, key, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 49\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: event => {\n                  const Am = event.target.value;\n                  let patt = /[^0-9]/g;\n                  const Amount = parseFloat(Am.replace(patt, ''));\n                  setOfferingReport(currentPeople => currentPeople.map((x, l) => l === key ? { ...x,\n                    Amount\n                  } : x));\n                },\n                value: p.Amount,\n                type: \"number\",\n                placeholder: \"Enter Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 44\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                style: {\n                  border: \"none\",\n                  cursor: \"pointer\"\n                },\n                onClick: () => {\n                  setOfferingReport(currentPeople => currentPeople.filter((x, id) => id !== key));\n                  deleteRow(p.Name, p.Type);\n                },\n                children: /*#__PURE__*/_jsxDEV(DeleteOutlineIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 33\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 29\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              style: {\n                border: \"none\",\n                cursor: \"pointer\"\n              },\n              onClick: () => {\n                setclick(click + 1);\n              },\n              children: /*#__PURE__*/_jsxDEV(AddCircleOutline, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          style: {\n            display: click === 0 ? \"none\" : \"\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: results,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                onChange: event => {\n                  const str = event.target.value.split(' ');\n\n                  for (let i = 0; i < str.length; i++) {\n                    str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                  }\n\n                  const Name = str.join(' ');\n                  setsearchterm(Name);\n                  settempname(Name);\n                },\n                value: tempname,\n                placeholder: \"Enter Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: temptype,\n              onChange: event => {\n                const Type = event.target.value;\n                settemptype(Type);\n              },\n              children: arrOfferingTypes.map((val, key) => {\n                return /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: val.value,\n                  children: val.name\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 41\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              onChange: event => {\n                const Am = event.target.value;\n                let patt = /[^0-9]/g;\n                const Amount = parseFloat(Am.replace(patt, ''));\n                settempamount(Amount);\n              },\n              value: tempamount,\n              type: \"number\",\n              placeholder: \"Enter Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                setOfferingReport(currentPeople => [...currentPeople, {\n                  Name: tempname,\n                  Type: temptype,\n                  Amount: tempamount\n                }]);\n                addnew();\n                settempname('');\n                settempamount(0);\n                settemptype('');\n              },\n              children: \"Confirm Adding\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: \"Church Offering\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: churchOffering\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: Total\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Grand Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: grandTotal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"2000 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['TwoThousands']),\n            onChange: event => {\n              setDenominationsandTotals({ ...denominationsAndTotals,\n                TwoThousands: event.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"=\", 2000 * denominationsAndTotals['TwoThousands']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"500 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['FiveHundreds']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              FiveHundreds: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"=\", 500 * denominationsAndTotals['FiveHundreds']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"200 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['TwoHundreds']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              TwoHundreds: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 25\n          }, this), \"=\", /*#__PURE__*/_jsxDEV(Typography, {\n            children: 200 * denominationsAndTotals['TwoHundreds']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"100 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['Hundreds']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              Hundreds: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"=\", 100 * denominationsAndTotals['Hundreds']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"50 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['Fifty']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              Fifty: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"=\", 50 * denominationsAndTotals['Fifty']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"20 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['Twenty']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              Twenty: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 25\n          }, this), \"=\", /*#__PURE__*/_jsxDEV(Typography, {\n            children: 20 * denominationsAndTotals['Twenty']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"10 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['Ten']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              Ten: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"=\", 10 * denominationsAndTotals['Ten']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"5 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['Five']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              Five: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"=\", 5 * denominationsAndTotals['Five']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"2 x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['Two']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              Two: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"=\", 2 * denominationsAndTotals['Two']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          container: true,\n          direction: \"row\",\n          alignItems: \"center\",\n          margin: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"1 x \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: parseFloat(denominationsAndTotals['One']),\n            onChange: event => setDenominationsandTotals({ ...denominationsAndTotals,\n              One: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 54\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"=\", 1 * denominationsAndTotals['One']]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            confirm();\n          },\n          variant: \"contained\",\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editaccounting, \"3exmV7hRlg4CVQjAcxRSHuDEpWs=\");\n\n_c = Editaccounting;\nexport default Editaccounting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editaccounting\");","map":{"version":3,"sources":["/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Editaccounting.js"],"names":["AddCircleOutline","DeleteOutlineIcon","Autocomplete","Button","Grid","IconButton","MenuItem","Select","Table","TableCell","TableHead","TableRow","TextField","Typography","React","useEffect","useState","url","AlertMessage","Datepicker","Editaccounting","dateValue","setdateValue","dateset","isDateset","report","setOfferingReport","denominationsAndTotals","setDenominationsandTotals","click","setclick","tempname","settempname","temptype","settemptype","tempamount","settempamount","notify","setNotify","isOpen","message","variant","severity","arrOfferingTypes","fetchOfferingAndDenominationsByDate","fetch","method","headers","body","JSON","stringify","date","then","res","json","result","status","i","length","map","value","key","console","log","x","currentPeople","p","l","OldType","Type","catch","error","Total","isNaN","reduce","accumulator","item","parseFloat","Amount","grandTotal","titheTotal","offeringTotal","missionaryTotal","specialofferingTotal","baptismofferingTotal","birthdayofferingTotal","weddingofferingTotal","childdedicationofferingTotal","committedofferingTotal","buildingfundTotal","churchOffering","name","k","Name","type","oldtype","amount","names","setnames","searchterm","setsearchterm","results","filter","person","toLowerCase","includes","toLocaleLowerCase","searchapi","confirm","TwoThousands","FiveHundreds","TwoHundreds","Hundreds","Fifty","Twenty","Ten","Five","Two","One","ChurchOffering","TitheTotal","OfferingTotal","SpecialOfferingTotal","BaptismofferingTotal","BirthdayofferingTotal","WeddingofferingTotal","ChilddedicationofferingTotal","CommittedofferingTotal","MissionaryTotal","BuildingFundTotal","GrandTotal","deleteRow","delName","delType","addnew","display","justifyContent","Date","toLocaleDateString","event","target","val","Am","patt","replace","border","cursor","id","params","str","split","charAt","toUpperCase","substring","join"],"mappings":"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","sourcesContent":["import AddCircleOutline from \"@mui/icons-material/AddCircleOutline\";\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { Autocomplete, Button, Grid, IconButton, MenuItem, Select, Table, TableCell, TableHead, TableRow, TextField, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { url } from \"../../Constants\";\nimport { AlertMessage } from \"../Support/AlertMessage\";\nimport { Datepicker } from \"../Support/Datepicker\";\n\nconst Editaccounting = () => {\n    const [dateValue, setdateValue] = useState();\n    const [dateset, isDateset] = useState(false);\n    const [report, setOfferingReport] = useState([]);\n    const [denominationsAndTotals, setDenominationsandTotals] = useState({});\n    const [click, setclick] = useState(0);\n    const [tempname, settempname] = useState('');\n    const [temptype, settemptype] = useState('');\n    const [tempamount, settempamount] = useState(0);\n    const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n    const arrOfferingTypes = [\n        { \"name\": \"Select\", \"value\": \"\" },\n        { \"name\": \"Tithe\", \"value\": \"Tithe\" },\n        { \"name\": \"Offering\", \"value\": \"Offering\" },\n        { \"name\": \"Missionary\", \"value\": \"Missionary\" },\n        { \"name\": \"Special Offering\", \"value\": \"Special Offering\" },\n        { \"name\": \"Baptism Offering\", \"value\": \"Baptism Offering\" },\n        { \"name\": \"Birthday Offering\", \"value\": \"Birthday Offering\" },\n        { \"name\": \"Wedding Offering\", \"value\": \"Wedding Offering\" },\n        { \"name\": \"Child Dedication Offering\", \"value\": \"Child Dedication Offering\" },\n        { \"name\": \"Committed Offering\", \"value\": \"Committed Offering\" },\n        { \"name\": \"Building Fund\", \"value\": \"Building Fund\" }\n    ]\n\n    const fetchOfferingAndDenominationsByDate = () => {\n        fetch(`${url}/Church-management-api/api/accounting-fetch.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                date: dateValue\n            })\n        })\n            .then(res => res.json())\n            .then((result) => {\n                if (result.status !== 0) {\n                    setOfferingReport(result.message[0]);\n                    setDenominationsandTotals(result.message[1]);\n                    for (let i = 0; i < result.message[1].length; i++) {\n                        result.message[1][i].map((value,key)=>{\n                            \n                            console.log(value,key,\"RESS\")    \n                        })\n                    }\n                    console.log(typeof result.message[1][0]['ChilddedicationofferingTotal'],\"RES\");\n                    isDateset(true);\n                    report.map((x, key) => {\n                        setOfferingReport((currentPeople) => currentPeople.map((p, l) => l === key ? {\n                            ...p,\n                            OldType: p.Type,\n                        } : p));\n                    })\n                }\n                else {\n                    setNotify({\n                        ...notify,\n                        isOpen:true,\n                        message:result.message\n                    })\n                }\n\n\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n\n\n\n    \n\n    let Total = isNaN(report.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : report.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n\n    let grandTotal = (1 * denominationsAndTotals['One']) + (2 * denominationsAndTotals['Two']) + (5 * denominationsAndTotals['Five']) + (10 * denominationsAndTotals['Ten']) + (20 * denominationsAndTotals['Twenty']) + (50 * denominationsAndTotals['Fifty']) + (100 * denominationsAndTotals['Hundreds']) + (200 * denominationsAndTotals['TwoHundreds']) + (500 * denominationsAndTotals['FiveHundreds']) + (2000 * denominationsAndTotals['TwoThousands']);\n\n    let titheTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let offeringTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let missionaryTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let specialofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let baptismofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let birthdayofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let weddingofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let childdedicationofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let committedofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let buildingfundTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n    let churchOffering = grandTotal - Total;\n\n    let name = report.map((k) => k.Name);\n\n    let type = report.map((k) => k.Type);\n\n    let oldtype = report.map((k) => k.OldType);\n\n    let amount = report.map((k) => k.Amount);\n    const [names, setnames] = useState([]);\n\n    const [searchterm, setsearchterm] = useState();\n\n    const results = !searchterm ? names : names.filter(person => person.toLowerCase().includes(searchterm.toLocaleLowerCase()));\n    const searchapi = () => {\n        fetch(`${url}/Church-management-api/api/searchname.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setnames(result);\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n    useEffect(() => {\n        searchapi();\n    }, [1])\n    const confirm = () => {\n\n\n        fetch(`${url}/Church-management-api/api/edit-accounting.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                Name: name,\n                Type: type,\n                Amount: amount,\n                OldType: oldtype,\n                date: dateValue,\n                TwoThousands: denominationsAndTotals['TwoThousands'],\n                FiveHundreds: denominationsAndTotals['FiveHundreds'],\n                TwoHundreds: denominationsAndTotals['TwoHundreds'],\n                Hundreds: denominationsAndTotals['Hundreds'],\n                Fifty: denominationsAndTotals['Fifty'],\n                Twenty: denominationsAndTotals['Twenty'],\n                Ten: denominationsAndTotals['Ten'],\n                Five: denominationsAndTotals['Five'],\n                Two: denominationsAndTotals['Two'],\n                One: denominationsAndTotals['One'],\n                ChurchOffering: churchOffering,\n                TitheTotal: titheTotal,\n                OfferingTotal: offeringTotal,\n                SpecialOfferingTotal: specialofferingTotal,\n                BaptismofferingTotal: baptismofferingTotal,\n                BirthdayofferingTotal: birthdayofferingTotal,\n                WeddingofferingTotal: weddingofferingTotal,\n                ChilddedicationofferingTotal: childdedicationofferingTotal,\n                CommittedofferingTotal: committedofferingTotal,\n                MissionaryTotal: missionaryTotal,\n                BuildingFundTotal: buildingfundTotal,\n                GrandTotal: grandTotal\n\n            })\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setNotify({\n                    ...notify,\n                    isOpen:true,\n                    message:result\n                })\n\n            }).catch((error) => {\n                console.error(error);\n            });\n\n    }\n    const deleteRow = (delName, delType) => {\n        fetch(`${url}/Church-management-api/api/accounting-delete-row.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                date: dateValue,\n                name: delName,\n                type: delType\n\n            })\n        })\n            .then(res => res.json())\n\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n    const addnew = () => {\n        fetch(`${url}/Church-management-api/api/accounting-add-new.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                Name: tempname,\n                date: dateValue,\n                Name: tempname,\n                Type: temptype,\n                Amount: tempamount\n\n            })\n        })\n            .then(res => res.json())\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n\n    return (\n        <Grid style={{ display: \"grid\", justifyContent: \"center\" }} >\n            <AlertMessage\n                notify={notify}\n                setNotify={setNotify}\n            />\n            <Grid>\n                <Datepicker \n                 setValue={setdateValue}\n                 value={dateValue}\n                 label='Date'\n                  />\n                <Button className=\"btn2\" onClick={() => {\n                    fetchOfferingAndDenominationsByDate();\n                }} >Submit</Button>\n            </Grid>\n            <Grid style={{ display: dateset ? \"block\" : \"none\" }} >\n\n                <Table>\n                    <TableRow>\n                        <TableHead>\n                            <TableCell>\n                                <Typography>\n                                    REPORT ON {new Date(dateValue).toLocaleDateString()}\n                                </Typography>\n                            </TableCell>\n                        </TableHead>\n                    </TableRow>\n\n\n\n                    {report.map((p, key) => {\n                        return (\n                            <TableRow key={key} >\n                                <TableCell>\n                                    <p>{p.Name}</p>\n                                </TableCell>\n\n\n                                <TableCell>\n                                    <Select value={p.Type}\n                                        onChange={(event) => {\n                                            const Type = event.target.value;\n                                            setOfferingReport((currentPeople) => currentPeople.map((x, l) => l === key ? {\n                                                ...x,\n                                                Type\n                                            } : x));\n\n                                        }} >\n                                        {arrOfferingTypes.map((val, key) => {\n                                            return (\n                                                <MenuItem\n                                                    value={val.value}\n                                                    key={key}\n                                                >\n                                                    {val.name}\n                                                </MenuItem>\n                                            )\n                                        })}\n                                    </Select>\n                                </TableCell>\n                                <TableCell><TextField onChange={(event) => {\n                                    const Am = event.target.value;\n                                    let patt = /[^0-9]/g;\n                                    const Amount = parseFloat(Am.replace(patt, ''));\n                                    setOfferingReport((currentPeople) => currentPeople.map((x, l) => l === key ? {\n                                        ...x,\n                                        Amount\n                                    } : x));\n                                }}\n                                    value={p.Amount}\n                                    type=\"number\"\n                                    placeholder=\"Enter Amount\" /></TableCell>\n                                <TableCell>\n                                    <IconButton\n                                        style={{ border: \"none\", cursor: \"pointer\" }}\n                                        onClick={\n                                            () => {\n                                                setOfferingReport(currentPeople => currentPeople.filter((x, id) => id !== key));\n                                                deleteRow(p.Name, p.Type);\n\n                                            }\n                                        }>\n                                        <DeleteOutlineIcon />\n                                    </IconButton>\n                                </TableCell>\n\n                            </TableRow>\n                        )\n                    })}\n\n\n                    <TableRow>\n\n                        <TableCell>\n                            <IconButton\n                                style={{ border: \"none\", cursor: \"pointer\" }}\n                                onClick={() => {\n                                    setclick(click + 1);\n\n                                }}\n                            >\n                                <AddCircleOutline />\n                            </IconButton>\n                        </TableCell>\n\n                    </TableRow>\n                    <TableRow style={{ display: click === 0 ? \"none\" : \"\" }} >\n                        <TableCell>\n                            <Autocomplete\n                                options={results}\n                                renderInput={(params) =>\n                                    <TextField\n                                        {...params}\n                                        onChange={(event) => {\n                                            const str = event.target.value.split(' ');\n                                            for (let i = 0; i < str.length; i++) {\n\n                                                str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                                            }\n                                            const Name = str.join(' ');\n                                            setsearchterm(Name);\n                                            settempname(Name);\n                                        }}\n                                        value={tempname}\n                                        placeholder=\"Enter Name\"\n\n                                    />\n                                }\n                            />\n\n\n                        </TableCell>\n                        <TableCell>\n                            <Select\n                                value={temptype}\n                                onChange={(event) => {\n                                    const Type = event.target.value;\n                                    settemptype(Type);\n\n                                }} >\n                                {arrOfferingTypes.map((val, key) => {\n                                    return (\n                                        <MenuItem\n                                            key={key}\n                                            value={val.value}\n                                        >\n                                            {val.name}\n                                        </MenuItem>\n                                    )\n                                })}\n                            </Select>\n\n                        </TableCell>\n                        <TableCell>\n                            <TextField\n                                onChange={(event) => {\n                                    const Am = event.target.value;\n                                    let patt = /[^0-9]/g;\n                                    const Amount = parseFloat(Am.replace(patt, ''));\n                                    settempamount(Amount);\n                                }}\n                                value={tempamount}\n                                type=\"number\"\n                                placeholder=\"Enter Amount\" />\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                onClick={() => {\n                                    setOfferingReport(currentPeople => [...currentPeople, {\n                                        Name: tempname,\n                                        Type: temptype,\n                                        Amount: tempamount,\n                                    }]);\n\n                                    addnew();\n                                    settempname('');\n                                    settempamount(0);\n                                    settemptype('');\n                                }}\n                            >\n                                Confirm Adding\n                            </Button>\n                        </TableCell>\n\n                    </TableRow>\n\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell>\n                            <Typography>\n                                Church Offering\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            {churchOffering}\n                        </TableCell>\n\n                    </TableRow>\n\n\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell>\n                            <Typography>\n                                Total\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            {Total}\n                        </TableCell>\n\n                    </TableRow>\n\n\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell>\n                            Grand Total\n                        </TableCell>\n                        <TableCell>\n                            {grandTotal}\n                        </TableCell>\n\n                    </TableRow>\n\n\n\n                </Table>\n\n\n\n                <Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}\n                    >\n                        <Typography>\n                            2000 x\n                        </Typography>\n                        <TextField\n                            value={parseFloat(denominationsAndTotals['TwoThousands'])}\n                            onChange={(event) => { setDenominationsandTotals({ ...denominationsAndTotals, TwoThousands: event.target.value }) }}\n                        />\n                        <Typography>\n                            ={2000 * (denominationsAndTotals['TwoThousands'])}\n                        </Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}\n                    >\n                        <Typography>500 x</Typography>\n                        <TextField\n                            value={parseFloat(denominationsAndTotals['FiveHundreds'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, FiveHundreds: event.target.value })}\n                        />\n                        <Typography>\n                            ={500 * (denominationsAndTotals['FiveHundreds'])}\n                        </Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}\n                    >\n                        <Typography>\n                            200 x\n                        </Typography>\n                        <TextField\n                            value={parseFloat(denominationsAndTotals['TwoHundreds'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, TwoHundreds: event.target.value })}\n                        />=\n                        <Typography>{200 * (denominationsAndTotals['TwoHundreds'])}</Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}>\n                        <Typography>100 x</Typography>\n                        <TextField value={parseFloat(denominationsAndTotals['Hundreds'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, Hundreds: event.target.value })}\n                        />\n                        <Typography>={100 * (denominationsAndTotals['Hundreds'])}</Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}>\n                        <Typography>50 x</Typography>\n                        <TextField\n                            value={parseFloat(denominationsAndTotals['Fifty'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, Fifty: event.target.value })}\n                        />\n                        <Typography>={50 * (denominationsAndTotals['Fifty'])}</Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}\n                    >\n                        <Typography>20 x</Typography>\n                        <TextField value={parseFloat(denominationsAndTotals['Twenty'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, Twenty: event.target.value })}\n                        />=\n                        <Typography>{20 * (denominationsAndTotals['Twenty'])}</Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}\n                    >\n                        <Typography>10 x</Typography>\n                        <TextField value={parseFloat(denominationsAndTotals['Ten'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, Ten: event.target.value })}\n                        />\n                        <Typography>={10 * (denominationsAndTotals['Ten'])}</Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}\n                    >\n                        <Typography>5 x</Typography>\n                        <TextField value={parseFloat(denominationsAndTotals['Five'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, Five: event.target.value })}\n                        />\n                        <Typography>={5 * (denominationsAndTotals['Five'])}</Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}\n                    >\n                        <Typography>2 x</Typography>\n                        <TextField value={parseFloat(denominationsAndTotals['Two'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, Two: event.target.value })}\n                        />\n                        <Typography>={2 * (denominationsAndTotals['Two'])}</Typography>\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction={\"row\"}\n                        alignItems={\"center\"}\n                        margin={2}\n                    >\n                        <Typography>1 x </Typography><TextField value={parseFloat(denominationsAndTotals['One'])}\n                            onChange={(event) => setDenominationsandTotals({ ...denominationsAndTotals, One: event.target.value })}\n                        />\n                        <Typography>={1 * (denominationsAndTotals['One'])}</Typography>\n                    </Grid>\n                    <Button\n                        onClick={() => { confirm() }}\n                        variant=\"contained\"\n                    >\n                        Confirm\n                    </Button>\n                </Grid>\n\n            </Grid>\n\n        </Grid>\n    )\n}\n\nexport default Editaccounting;"]},"metadata":{},"sourceType":"module"}