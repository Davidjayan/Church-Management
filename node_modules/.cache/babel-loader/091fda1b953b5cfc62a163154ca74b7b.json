{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Dataentry.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { url } from \"../Constants\";\nimport { Grid, TextField, Button, FormControlLabel, RadioGroup, Radio, Autocomplete } from \"@mui/material\";\nimport { padding } from \"@mui/system\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dataentry = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [dob, setDob] = useState('');\n  const [gender, setGender] = useState('');\n  const [married, setMarried] = useState(false);\n  const [weddingdate, setWeddingdate] = useState('01/01/1997');\n  const [emailid, setEmailid] = useState('');\n  const [mobile, setMobile] = useState();\n  const [address, setAddress] = useState('');\n  const [familyhead, setFamilyhead] = useState('');\n  const [baptized, setBaptized] = useState(false);\n  const [android, setAndroid] = useState(true);\n  const [familyid, setFamilyid] = useState('');\n  const [selfid, setSelfid] = useState('');\n  const [display, setdisplay] = useState(\"none\");\n  const [familyheads, setFamilyheads] = useState([]);\n  const [validity, setvalidity] = useState();\n  const str = dob.split('-');\n  const today = new Date();\n  const mon = today.getMonth();\n  const year = today.getFullYear();\n  let age;\n  let k = year - 1;\n\n  if (mon >= str[1]) {\n    age = year - str[0];\n  } else {\n    age = k - str[0];\n  }\n\n  const addrecords = () => {\n    if ((familyid && familyhead && address && selfid && name && gender && !mobile.length < 10) !== '') {\n      setvalidity(true);\n    } else {\n      setvalidity(false);\n    }\n\n    if (validity) {\n      let Familyid = familyid;\n      let Selfid = selfid;\n      let Name = name;\n      let Dob = dob;\n      let Age = age;\n      let Gender = gender;\n      let Married = married;\n      let Weddingdate = weddingdate;\n      let Emailid = emailid;\n      let Mobile = mobile;\n      let Address = address;\n      let Familyhead = familyhead;\n      let Baptized = baptized;\n      let Android = android;\n      fetch(\"\".concat(url, \"/jehovanissi/backend/apis/member_details.php\"), {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: Name,\n          dob: Dob,\n          age: Age,\n          gender: Gender,\n          married: Married,\n          weddingdate: Weddingdate,\n          emailid: Emailid,\n          mobile: Mobile,\n          address: Address,\n          familyhead: Familyhead,\n          baptized: Baptized,\n          android: Android,\n          familyid: Familyid,\n          selfid: Selfid\n        })\n      }).then(res => res.json()).then(result => {\n        alert(result);\n        window.location.reload();\n      }).catch(error => {\n        console.error(error);\n      });\n    } else {\n      alert(\"Input All required\");\n    }\n  };\n\n  const searchfamilyhead = () => {\n    fetch(\"\".concat(url, \"/jehovanissi/backend/apis/searchfamilyhead.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      let filteredresult = [...new Set(result)];\n      setFamilyheads(filteredresult);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    searchfamilyhead();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    direction: \"column\",\n    alignItems: \"stretch\",\n    justifyItems: \"stretch\",\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      direction: \"column\",\n      alignItems: \"center\",\n      justifyItems: \"stretch\",\n      container: true,\n      item: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            width: 300,\n            marginRight: 15\n          },\n          name: \"familyid\",\n          value: familyid,\n          margin: \"dense\",\n          variant: \"standard\",\n          onChange: event => setFamilyid(event.target.value.toUpperCase()),\n          placeholder: \"Family ID\",\n          label: \"Family ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"selfid\",\n          style: {\n            width: 300,\n            marginRight: 15\n          },\n          value: selfid,\n          margin: \"dense\",\n          variant: \"standard\",\n          onFocus: () => setSelfid(familyid.slice(3)),\n          placeholder: \"Self ID\",\n          label: \"Self ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          name: \"name\",\n          value: name,\n          style: {\n            width: 300,\n            marginRight: 15\n          },\n          margin: \"dense\",\n          variant: \"standard\",\n          onChange: event => {\n            const str = event.target.value.split(' ');\n\n            for (let i = 0; i < str.length; i++) {\n              str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n            }\n\n            const Nameoff = str.join(' ');\n            setName(Nameoff);\n          },\n          placeholder: \"Enter Name\",\n          label: \"Enter Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          type: \"date\",\n          name: \"dob\",\n          style: {\n            width: 300,\n            marginRight: 15\n          },\n          margin: \"dense\",\n          value: dob,\n          variant: \"standard\",\n          onChange: event => setDob(event.target.value),\n          placeholder: \"Enter DOB\",\n          label: \"Enter DOB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n        row: true,\n        \"aria-label\": \"gender\",\n        name: \"row-radio-buttons-group\",\n        style: {\n          width: 300,\n          border: \"1px solid black\",\n          padding: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"male\",\n          name: \"gender\",\n          label: \"Male\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 34\n          }, this),\n          onChange: event => setGender(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"female\",\n          name: \"gender\",\n          label: \"Female\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 34\n          }, this),\n          onChange: event => setGender(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n        row: true,\n        \"aria-label\": \"martial-status\",\n        name: \"row-radio-buttons-group\",\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: true,\n          label: \"Married\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 34\n          }, this),\n          onChange: event => {\n            setMarried(event.target.value === 'true' ? event.target.value = true : event.target.value = false);\n            setdisplay(event.target.value === \"true\" ? \"block\" : \"none\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: false,\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 34\n          }, this),\n          label: \"Unmarried\",\n          onChange: event => {\n            setMarried(event.target.value === 'false' ? event.target.value = false : event.target.value = true);\n            setdisplay(event.target.value === \"false\" ? \"none\" : \"block\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        style: {\n          display: display\n        },\n        type: \"date\",\n        label: \"Wedding Date\",\n        margin: \"dense\",\n        variant: \"standard\",\n        defaultValue: \"01/01/2020\",\n        onChange: event => setWeddingdate(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          name: \"emailid\",\n          margin: \"dense\",\n          label: \"Email ID\",\n          variant: \"standard\",\n          onChange: event => setEmailid(event.target.value),\n          value: emailid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"mobile\",\n          label: \"Mobile\",\n          margin: \"dense\",\n          variant: \"standard\",\n          value: mobile,\n          onChange: event => {\n            let patt = /[^0-9]/g;\n            const ph = event.target.value.replace(patt, '');\n            setMobile(ph.slice(0, 10));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          name: \"address\",\n          label: \"Address\",\n          margin: \"dense\",\n          variant: \"standard\",\n          value: address,\n          onChange: event => setAddress(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          options: familyheads,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            name: \"familyhead\",\n            value: familyhead,\n            margin: \"dense\",\n            variant: \"standard\",\n            label: \"Family Head\",\n            onChange: event => {\n              const str = event.target.value.split(' ');\n\n              for (let i = 0; i < str.length; i++) {\n                str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n              }\n\n              const familyheadname = str.join(' ');\n              setFamilyhead(familyheadname);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n        row: true,\n        \"aria-label\": \"Baptizm\",\n        name: \"row-radio-buttons-group\",\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 34\n          }, this),\n          value: true,\n          label: \"Baptized\",\n          onChange: event => setBaptized(event.target.value === 'true' ? event.target.value = true : event.target.value = false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: false,\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 34\n          }, this),\n          label: \"Not Baptized\",\n          onChange: event => setBaptized(event.target.value === 'false' ? event.target.value = false : event.target.value = true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n        row: true,\n        \"aria-label\": \"mobile-type\",\n        name: \"row-radio-buttons-group\",\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          label: \"Android\",\n          value: true,\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 34\n          }, this),\n          onChange: event => setAndroid(event.target.value === 'true' ? event.target.value = true : event.target.value = false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          label: \"Normal\",\n          value: false,\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 34\n          }, this),\n          onChange: event => setAndroid(event.target.value === 'false' ? event.target.value = false : event.target.value = true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: addrecords,\n        children: \"Add to records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dataentry, \"VWOqYzjW827HvytxHLgF9xcqBhg=\");\n\n_c = Dataentry;\nexport default Dataentry;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataentry\");","map":{"version":3,"sources":["/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Dataentry.js"],"names":["React","useEffect","useState","url","Grid","TextField","Button","FormControlLabel","RadioGroup","Radio","Autocomplete","padding","Dataentry","name","setName","dob","setDob","gender","setGender","married","setMarried","weddingdate","setWeddingdate","emailid","setEmailid","mobile","setMobile","address","setAddress","familyhead","setFamilyhead","baptized","setBaptized","android","setAndroid","familyid","setFamilyid","selfid","setSelfid","display","setdisplay","familyheads","setFamilyheads","validity","setvalidity","str","split","today","Date","mon","getMonth","year","getFullYear","age","k","addrecords","length","Familyid","Selfid","Name","Dob","Age","Gender","Married","Weddingdate","Emailid","Mobile","Address","Familyhead","Baptized","Android","fetch","method","headers","body","JSON","stringify","then","res","json","result","alert","window","location","reload","catch","error","console","searchfamilyhead","filteredresult","Set","width","marginRight","event","target","value","toUpperCase","slice","i","charAt","substring","Nameoff","join","border","patt","ph","replace","params","familyheadname"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { url } from \"../Constants\";\nimport { Grid, TextField, Button, FormControlLabel, RadioGroup, Radio, Autocomplete } from \"@mui/material\";\nimport { padding } from \"@mui/system\";\n\nconst Dataentry = () => {\n    const [name, setName] = useState('');\n    const [dob, setDob] = useState('');\n    const [gender, setGender] = useState('');\n    const [married, setMarried] = useState(false);\n    const [weddingdate, setWeddingdate] = useState('01/01/1997');\n    const [emailid, setEmailid] = useState('');\n    const [mobile, setMobile] = useState();\n    const [address, setAddress] = useState('');\n    const [familyhead, setFamilyhead] = useState('');\n    const [baptized, setBaptized] = useState(false);\n    const [android, setAndroid] = useState(true);\n    const [familyid, setFamilyid] = useState('');\n    const [selfid, setSelfid] = useState('');\n    const [display, setdisplay] = useState(\"none\");\n    const [familyheads, setFamilyheads] = useState([]);\n    const [validity, setvalidity] = useState();\n\n\n    const str = dob.split('-');\n    const today = new Date();\n    const mon = today.getMonth();\n    const year = today.getFullYear();\n    let age;\n\n\n\n    let k = year - 1;\n\n    if (mon >= str[1]) {\n        age = year - str[0];\n\n\n    }\n    else {\n        age = k - str[0];\n\n    }\n\n    const addrecords = () => {\n        if ((familyid && familyhead && address && selfid && name && gender && (!mobile.length < 10)) !== '') {\n            setvalidity(true);\n        }\n        else {\n            setvalidity(false);\n        }\n\n        if (validity) {\n\n            let Familyid = familyid;\n            let Selfid = selfid;\n            let Name = name;\n            let Dob = dob;\n            let Age = age;\n            let Gender = gender;\n            let Married = married;\n            let Weddingdate = weddingdate;\n            let Emailid = emailid;\n            let Mobile = mobile;\n            let Address = address;\n            let Familyhead = familyhead;\n            let Baptized = baptized;\n            let Android = android;\n\n\n            fetch(`${url}/jehovanissi/backend/apis/member_details.php`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n\n                    name: Name,\n                    dob: Dob,\n                    age: Age,\n                    gender: Gender,\n                    married: Married,\n                    weddingdate: Weddingdate,\n                    emailid: Emailid,\n                    mobile: Mobile,\n                    address: Address,\n                    familyhead: Familyhead,\n                    baptized: Baptized,\n                    android: Android,\n                    familyid: Familyid,\n                    selfid: Selfid\n                })\n            })\n                .then(res => res.json())\n                .then((result) => {\n                    alert(result);\n                    window.location.reload();\n                }).catch((error) => {\n                    console.error(error);\n                });\n        }\n        else {\n            alert(\"Input All required\");\n\n        }\n\n\n\n    }\n\n    const searchfamilyhead = () => {\n        fetch(`${url}/jehovanissi/backend/apis/searchfamilyhead.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n\n        })\n            .then(res => res.json())\n            .then((result) => {\n                let filteredresult = [...new Set(result)];\n                setFamilyheads(filteredresult);\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n    useEffect(()=>{\n        searchfamilyhead();\n    },[])\n\n    return (\n        <Grid\n            direction=\"column\"\n            alignItems={\"stretch\"}\n            justifyItems={\"stretch\"}\n            container\n        >\n            <Grid\n                direction={\"column\"}\n                alignItems={\"center\"}\n                justifyItems={\"stretch\"}\n                container\n                item\n            >\n                <Grid>\n                    <TextField\n                        style={{width:300,marginRight:15}}\n                        name=\"familyid\"\n                        value={familyid}\n                        margin=\"dense\"\n                        variant=\"standard\"\n                        onChange={(event) => setFamilyid(event.target.value.toUpperCase())}\n                        placeholder=\"Family ID\"\n                        label=\"Family ID\"\n                    />\n                    <TextField\n                        name=\"selfid\"\n                        style={{width:300,marginRight:15}}\n                        value={selfid}\n                        margin=\"dense\"\n                        variant=\"standard\"\n                        onFocus={() => setSelfid(familyid.slice(3))}\n                        placeholder=\"Self ID\"\n                        label=\"Self ID\"\n                    />\n                </Grid>\n                <Grid>\n                    <TextField\n                        name=\"name\"\n                        value={name}\n                        style={{width:300,marginRight:15}}\n                        margin=\"dense\"\n                        variant=\"standard\"\n                        onChange={(event) => {\n                            const str = event.target.value.split(' ');\n                            for (let i = 0; i < str.length; i++) {\n\n                                str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                            }\n                            const Nameoff = str.join(' ');\n                            setName(Nameoff)\n                        }}\n                        placeholder=\"Enter Name\"\n                        label=\"Enter Name\"\n                    />\n                    <TextField\n                        type=\"date\"\n                        name=\"dob\"\n                        style={{width:300,marginRight:15}}\n                        margin=\"dense\"\n                        value={dob}\n                        variant=\"standard\"\n                        onChange={(event) => setDob(event.target.value)}\n                        placeholder=\"Enter DOB\"\n                        label=\"Enter DOB\"\n                    />\n                </Grid>\n                <RadioGroup \n                row \n                aria-label=\"gender\" \n                name=\"row-radio-buttons-group\"\n                style={{\n                    width:300,\n                    border:\"1px solid black\",\n                    padding:10\n                }}\n                >\n                    <FormControlLabel\n                        value=\"male\"\n                        name=\"gender\"\n                        label={\"Male\"}\n                        control={<Radio />}\n                        onChange={(event) => setGender(event.target.value)} />\n                    <FormControlLabel\n                        value=\"female\"\n                        name=\"gender\"\n                        label={\"Female\"}\n                        control={<Radio />}\n                        onChange={(event) => setGender(event.target.value)} />\n                </RadioGroup>\n                <RadioGroup row aria-label=\"martial-status\" name=\"row-radio-buttons-group\">\n                    <FormControlLabel\n                        value={true}\n                        label={\"Married\"}\n                        control={<Radio />}\n                        onChange={(event) => { setMarried(event.target.value === 'true' ? event.target.value = true : event.target.value = false); setdisplay(event.target.value === \"true\" ? \"block\" : \"none\") }} />\n                    <FormControlLabel\n                        value={false}\n                        control={<Radio />}\n                        label=\"Unmarried\"\n                        onChange={(event) => { setMarried(event.target.value === 'false' ? event.target.value = false : event.target.value = true); setdisplay(event.target.value === \"false\" ? \"none\" : \"block\") }} />\n                </RadioGroup>\n\n                <TextField style={{ display: display }}\n                    type=\"date\"\n                    label=\"Wedding Date\"\n                    margin=\"dense\"\n                    variant=\"standard\"\n                    defaultValue={\"01/01/2020\"}\n                    onChange={(event) => setWeddingdate(event.target.value)}\n                />\n                <Grid>\n                    <TextField\n                        name=\"emailid\"\n                        margin=\"dense\"\n                        label=\"Email ID\"\n                        variant=\"standard\"\n                        onChange={(event) => setEmailid(event.target.value)}\n                        value={emailid}\n                    />\n\n                    <TextField\n                        name=\"mobile\"\n                        label=\"Mobile\"\n                        margin=\"dense\"\n                        variant=\"standard\"\n                        value={mobile}\n                        onChange={(event) => {\n                            let patt = /[^0-9]/g;\n                            const ph = event.target.value.replace(patt, '');\n                            setMobile(ph.slice(0, 10));\n                        }} />\n                </Grid>\n\n                <Grid>\n                    <TextField\n                        name=\"address\"\n                        label=\"Address\"\n                        margin=\"dense\"\n                        variant=\"standard\"\n                        value={address}\n                        onChange={(event) => setAddress(event.target.value)}\n                    />\n                    <Autocomplete\n                        options={familyheads}\n                        renderInput={(params) =>\n                            <TextField\n                                {...params}\n                                name=\"familyhead\"\n                                value={familyhead}\n                                margin=\"dense\"\n                                variant=\"standard\"\n                                label=\"Family Head\"\n                                onChange={(event) => {\n                                    const str = event.target.value.split(' ');\n                                    for (let i = 0; i < str.length; i++) {\n                                        str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                                    }\n                                    const familyheadname = str.join(' ');\n                                    setFamilyhead(familyheadname)\n                                }}\n                            />\n                        }\n                    />\n                </Grid>\n                <RadioGroup row aria-label=\"Baptizm\" name=\"row-radio-buttons-group\" >\n                    <FormControlLabel\n                        control={<Radio />}\n                        value={true}\n                        label={\"Baptized\"}\n                        onChange={(event) => setBaptized(event.target.value === 'true' ? event.target.value = true : event.target.value = false)}\n                    />\n                    <FormControlLabel\n                        value={false}\n                        control={<Radio />}\n                        label={\"Not Baptized\"}\n                        onChange={(event) => setBaptized(event.target.value === 'false' ? event.target.value = false : event.target.value = true)}\n                    />\n                </RadioGroup>\n\n                <RadioGroup row aria-label=\"mobile-type\" name=\"row-radio-buttons-group\">\n                    <FormControlLabel\n                        label={\"Android\"}\n                        value={true}\n                        control={<Radio />}\n                        onChange={(event) => setAndroid(event.target.value === 'true' ? event.target.value = true : event.target.value = false)} />\n                    <FormControlLabel\n                        label={\"Normal\"}\n                        value={false}\n                        control={<Radio />}\n                        onChange={(event) => setAndroid(event.target.value === 'false' ? event.target.value = false : event.target.value = true)} />\n                </RadioGroup>\n\n                <Button\n                    variant=\"contained\"\n                    onClick={addrecords} >\n                    Add to records</Button>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Dataentry;"]},"metadata":{},"sourceType":"module"}