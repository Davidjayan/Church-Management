{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Dataentry.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { url } from \"../Constants\";\nimport { Grid, Button, FormControlLabel, RadioGroup, Radio, Autocomplete } from \"@mui/material\";\nimport { CFormInput, CFormSwitch } from \"@coreui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dataentry = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [dob, setDob] = useState('');\n  const [familyheads, setFamilyheads] = useState([]);\n  const [validity, setvalidity] = useState(true);\n  const [data, setData] = useState({\n    \"name\": '',\n    \"dob\": new Date(),\n    \"gender\": '',\n    \"weddingdate\": new Date().toLocaleDateString(),\n    \"emailid\": '',\n    \"mobile\": '',\n    \"address\": '',\n    \"familyhead\": '',\n    \"familyid\": '',\n    \"selfid\": '',\n    \"android\": false,\n    \"baptized\": false,\n    \"married\": false\n  });\n  const str = dob.split('-');\n  const today = new Date();\n  const mon = today.getMonth();\n  const year = today.getFullYear();\n  let age;\n  let k = year - 1;\n\n  if (mon >= str[1]) {\n    age = year - str[0];\n  } else {\n    age = k - str[0];\n  }\n\n  const validation = () => {\n    if ((data.familyid && data.familyhead && data.address && data.selfid && data.name && data.gender && !data.mobile.length < 10) !== '') {\n      setvalidity(true);\n      return true;\n    } else {\n      setvalidity(false);\n      return false;\n    }\n  };\n\n  const addrecords = () => {\n    if (validity) {\n      let Familyid = data.familyid;\n      let Selfid = data.selfid;\n      let Name = data.name;\n      let Dob = data.dob;\n      let Age = age;\n      let Gender = data.gender;\n      let Married = data.married;\n      let Weddingdate = data.weddingdate;\n      let Emailid = data.emailid;\n      let Mobile = data.mobile;\n      let Address = data.address;\n      let Familyhead = data.familyhead;\n      let Baptized = data.baptized;\n      let Android = data.android;\n      fetch(\"\".concat(url, \"/jehovanissi/api/member_details.php\"), {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: Name,\n          dob: Dob,\n          age: Age,\n          gender: Gender,\n          married: Married,\n          weddingdate: Weddingdate,\n          emailid: Emailid,\n          mobile: Mobile,\n          address: Address,\n          familyhead: Familyhead,\n          baptized: Baptized,\n          android: Android,\n          familyid: Familyid,\n          selfid: Selfid\n        })\n      }).then(res => res.json()).then(result => {\n        alert(result);\n        console.log(result);\n      }).catch(error => {\n        console.error(error);\n      });\n    } else {\n      alert(\"Input All required\");\n    }\n  };\n\n  const searchfamilyhead = () => {\n    fetch(\"\".concat(url, \"/jehovanissi/api/searchfamilyhead.php\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      let filteredresult = [...new Set(result)];\n      setFamilyheads(filteredresult);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    searchfamilyhead();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <Grid\n    //     direction=\"column\"\n    //     alignItems={\"stretch\"}\n    //     justifyItems={\"stretch\"}\n    //     container\n    // >\n    //     <Grid\n    //         direction={\"column\"}\n    //         alignItems={\"center\"}\n    //         justifyItems={\"stretch\"}\n    //         container\n    //         item\n    //     >\n    //         <Grid>\n    //             <CFormInput\n    //                 style={{ width: 300, marginRight: 15 }}\n    //                 name=\"familyid\"\n    //                 value={data.familyid}\n    //                 margin=\"dense\"\n    //                 variant=\"outlined\"\n    //                 onChange={(event) => {\n    //                     setData({ ...data, familyid: event.target.value.toUpperCase()})\n    //                 }}\n    //                 placeholder=\"Family ID\"\n    //                 label=\"Family ID\"\n    //             />\n    //             <CFormInput\n    //                 name=\"selfid\"\n    //                 style={{ width: 300, marginRight: 15 }}\n    //                 value={data.selfid}\n    //                 margin=\"dense\"\n    //                 variant=\"outlined\"\n    //                 onFocus={() => setData({ ...data, selfid: data.familyid.slice(3)})}\n    //                 placeholder=\"Self ID\"\n    //                 label=\"Self ID\"\n    //             />\n    //         </Grid>\n    //         <Grid>\n    //             <CFormInput\n    //                 name=\"name\"\n    //                 value={data.name}\n    //                 style={{ width: 300, marginRight: 15 }}\n    //                 margin=\"dense\"\n    //                 variant=\"outlined\"\n    //                 onChange={(event) => {\n    //                     const str = event.target.value.split(' ');\n    //                     for (let i = 0; i < str.length; i++) {\n    //                         str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n    //                     }\n    //                     const Nameoff = str.join(' ');\n    //                     setData({ ...data, name: Nameoff })\n    //                 }}\n    //                 placeholder=\"Enter Name\"\n    //                 label=\"Enter Name\"\n    //             />\n    //             <CFormInput\n    //                 type={\"date\"}\n    //                 style={{ width: 300, marginRight: 15 }}\n    //                 value={data.dob}\n    //                 onChange={(event) => setData({ ...data, dob: event.target.value })}\n    //                 label=\"Enter DOB\"\n    //             />\n    //         </Grid>\n    //         <RadioGroup\n    //             row\n    //             aria-label=\"gender\"\n    //             name=\"row-radio-buttons-group\"\n    //             style={{\n    //                 width: 300,\n    //                 justifyContent: \"space-evenly\"\n    //             }}\n    //         >\n    //             <FormControlLabel\n    //                 value=\"male\"\n    //                 name=\"gender\"\n    //                 label={\"Male\"}\n    //                 control={<Radio />}\n    //                 onChange={(event) => setData({ ...data, gender: event.target.value })} />\n    //             <FormControlLabel\n    //                 value=\"female\"\n    //                 name=\"gender\"\n    //                 label={\"Female\"}\n    //                 control={<Radio />}\n    //                 onChange={(event) => setData({ ...data, gender: event.target.value })} />\n    //         </RadioGroup>\n    //         <RadioGroup\n    //             row\n    //             aria-label=\"martial-status\"\n    //             name=\"row-radio-buttons-group\"\n    //             style={{\n    //                 width: 300,\n    //                 justifyContent: \"space-evenly\"\n    //             }}\n    //         >\n    //             <FormControlLabel\n    //                 value={true}\n    //                 label={\"Married\"}\n    //                 control={<Radio />}\n    //                 onChange={(event) => { setData({ ...data, married: event.target.value ==\"true\"?true:false }) }} />\n    //             <FormControlLabel\n    //                 value={false}\n    //                 control={<Radio />}\n    //                 label={\"Unmarried\"}\n    //                 onChange={(event) => { setData({ ...data, married: event.target.value ==\"true\"?true:false  }) }} />\n    //         </RadioGroup>\n    //         <CFormInput\n    //             type=\"date\"\n    //             label=\"Wedding Date\"\n    //             style={{ display:data.married===true?\"inline-block\":\"none\",width: 300, marginRight: 15 }}\n    //             margin=\"dense\"\n    //             variant=\"outlined\"\n    //             value={data.weddingdate}\n    //             onChange={(event) => setData({ ...data, weddingdate: event.target.value })}\n    //         />\n    //         <Grid>\n    //             <CFormInput\n    //                 name=\"emailid\"\n    //                 margin=\"dense\"\n    //                 label=\"Email ID\"\n    //                 style={{ width: 300, marginRight: 15 }}\n    //                 variant=\"outlined\"\n    //                 onChange={(event) => setData({ ...data, emailid: event.target.value })}\n    //                 value={data.emailid}\n    //             />\n    //             <CFormInput\n    //                 name=\"mobile\"\n    //                 style={{ width: 300, marginRight: 15 }}\n    //                 label=\"Mobile\"\n    //                 margin=\"dense\"\n    //                 variant=\"outlined\"\n    //                 value={data.mobile}\n    //                 onChange={(event) => {\n    //                     let patt = /[^0-9]/g;\n    //                     const ph = event.target.value.replace(patt, '');\n    //                     setData({ ...data, mobile: ph.slice(0, 10) });\n    //                 }} />\n    //         </Grid>\n    //         <Grid>\n    //             <CFormInput\n    //                 name=\"address\"\n    //                 label=\"Address\"\n    //                 style={{ width: 300, marginRight: 15 }}\n    //                 margin=\"dense\"\n    //                 variant=\"outlined\"\n    //                 value={data.address}\n    //                 onChange={(event) => {\n    //                     const str = event.target.value.split(',');\n    //                     for (let i = 0; i < str.length; i++) {\n    //                         str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n    //                     }\n    //                     const address = str.join(',');\n    //                     setData({ ...data, address: address })\n    //                 }}\n    //             />\n    //             <Autocomplete\n    //                 options={familyheads}\n    //                 renderInput={(params) =>\n    //                     <CFormInput\n    //                         {...params}\n    //                         name=\"familyhead\"\n    //                         value={data.familyhead}\n    //                         margin=\"dense\"\n    //                         variant=\"outlined\"\n    //                         label=\"Family Head\"\n    //                         onChange={(event) => {\n    //                             const str = event.target.value.split(' ');\n    //                             for (let i = 0; i < str.length; i++) {\n    //                                 str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n    //                             }\n    //                             const familyheadname = str.join(' ');\n    //                             setData({ ...data, familyhead: familyheadname })\n    //                         }}\n    //                     />\n    //                 }\n    //             />\n    //         </Grid>\n    //         <RadioGroup\n    //             row\n    //             aria-label=\"Baptizm\"\n    //             name=\"row-radio-buttons-group\"\n    //             style={{\n    //                 width: 300,\n    //                 justifyContent: \"space-evenly\"\n    //             }}\n    //         >\n    //             <FormControlLabel\n    //                 control={<Radio />}\n    //                 value={true}\n    //                 label={\"Baptized\"}\n    //                 onChange={(event) => setData({ ...data, baptized: event.target.value==\"true\"?true:false  })}\n    //             />\n    //             <FormControlLabel\n    //                 value={false}\n    //                 control={<Radio />}\n    //                 label={\"Not Baptized\"}\n    //                 onChange={(event) => setData({ ...data, baptized: event.target.value==\"true\"?true:false  })}\n    //             />\n    //         </RadioGroup>\n    //         <RadioGroup\n    //             row\n    //             aria-label=\"mobile-type\"\n    //             name=\"row-radio-buttons-group\"\n    //             style={{\n    //                 width: 300,\n    //                 justifyContent: \"space-evenly\"\n    //             }}\n    //         >\n    //             <FormControlLabel\n    //                 label={\"Android\"}\n    //                 value={true}\n    //                 control={<Radio />}\n    //                 onChange={(event) => setData({ ...data, android: event.target.value==\"true\"?true:false  })} />\n    //             <FormControlLabel\n    //                 label={\"Normal\"}\n    //                 value={false}\n    //                 control={<Radio />}\n    //                 onChange={(event) => setData({ ...data, android: event.target.value==\"true\"?true:false  })} />\n    //         </RadioGroup>\n    //         <Button\n    //             variant=\"contained\"\n    //             onClick={addrecords} >\n    //             Add to records</Button>\n    //     </Grid>\n    //     <Grid>\n    //         {JSON.stringify(data)}\n    //     </Grid>\n    // </Grid>\n    _jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        direction: \"column\",\n        alignItems: \"stretch\",\n        justifyItems: \"stretch\",\n        container: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          direction: \"column\",\n          alignItems: \"center\",\n          justifyItems: \"stretch\",\n          container: true,\n          item: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            children: [/*#__PURE__*/_jsxDEV(CFormInput, {\n              style: {\n                width: 300,\n                marginRight: 15\n              },\n              name: \"familyid\" // value={data.familyid}\n              ,\n              margin: \"dense\",\n              variant: \"outlined\",\n              placeholder: \"Family ID\",\n              label: \"Family ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(CFormInput, {\n              name: \"selfid\",\n              style: {\n                width: 300,\n                marginRight: 15\n              } // value={data.selfid}\n              ,\n              margin: \"dense\",\n              variant: \"outlined\",\n              placeholder: \"Self ID\",\n              label: \"Self ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(CFormInput, {\n              name: \"name\" // value={data.name}\n              ,\n              style: {\n                width: 300,\n                marginRight: 15\n              },\n              margin: \"dense\",\n              variant: \"outlined\" // onChange={(event) => {\n              //     const str = event.target.value.split(' ');\n              //     for (let i = 0; i < str.length; i++) {\n              //         str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n              //     }\n              //     const Nameoff = str.join(' ');\n              //     setData({ ...data, name: Nameoff })\n              // }}\n              ,\n              placeholder: \"Enter Name\",\n              label: \"Enter Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            row: true,\n            \"aria-label\": \"gender\",\n            name: \"row-radio-buttons-group\",\n            style: {\n              width: 300,\n              justifyContent: \"space-evenly\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"male\",\n              name: \"gender\",\n              label: \"Male\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 38\n              }, this) // onChange={(event) => setData({ ...data, gender: event.target.value })}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"female\",\n              name: \"gender\",\n              label: \"Female\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 38\n              }, this) // onChange={(event) => setData({ ...data, gender: event.target.value })}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            row: true,\n            \"aria-label\": \"martial-status\",\n            name: \"row-radio-buttons-group\",\n            style: {\n              width: 300,\n              justifyContent: \"space-evenly\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: true,\n              label: \"Married\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 38\n              }, this) // onChange={(event) => { setData({ ...data, married: event.target.value == \"true\" ? true : false }) }}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: false,\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 38\n              }, this),\n              label: \"Unmarried\" // onChange={(event) => { setData({ ...data, married: event.target.value == \"true\" ? true : false }) }} \n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CFormInput, {\n            type: \"date\",\n            label: \"Wedding Date\" // style={{ display: data.married === true ? \"inline-block\" : \"none\", width: 300, marginRight: 15 }}\n            ,\n            margin: \"dense\",\n            variant: \"outlined\" // value={data.weddingdate}\n            // onChange={(event) => setData({ ...data, weddingdate: event.target.value })}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            children: [/*#__PURE__*/_jsxDEV(CFormInput, {\n              name: \"emailid\",\n              margin: \"dense\",\n              label: \"Email ID\",\n              style: {\n                width: 300,\n                marginRight: 15\n              },\n              variant: \"outlined\" // onChange={(event) => setData({ ...data, emailid: event.target.value })}\n              // value={data.emailid}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(CFormInput, {\n              name: \"mobile\",\n              style: {\n                width: 300,\n                marginRight: 15\n              },\n              label: \"Mobile\",\n              margin: \"dense\",\n              variant: \"outlined\" // value={data.mobile}\n              // onChange={(event) => {\n              //   let patt = /[^0-9]/g;\n              //   const ph = event.target.value.replace(patt, '');\n              //   setData({ ...data, mobile: ph.slice(0, 10) });\n              // }}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(CFormInput, {\n              name: \"address\",\n              label: \"Address\",\n              style: {\n                width: 300,\n                marginRight: 15\n              },\n              margin: \"dense\",\n              variant: \"outlined\" // value={data.address}\n              // onChange={(event) => {\n              //   const str = event.target.value.split(',');\n              //   for (let i = 0; i < str.length; i++) {\n              //     str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n              //   }\n              //   const address = str.join(',');\n              //   setData({ ...data, address: address })\n              // }}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            row: true,\n            \"aria-label\": \"Baptizm\",\n            name: \"row-radio-buttons-group\",\n            style: {\n              width: 300,\n              justifyContent: \"space-evenly\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 38\n              }, this),\n              value: true,\n              label: \"Baptized\" // onChange={(event) => setData({ ...data, baptized: event.target.value == \"true\" ? true : false })}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: false,\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 38\n              }, this),\n              label: \"Not Baptized\" // onChange={(event) => setData({ ...data, baptized: event.target.value == \"true\" ? true : false })}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CFormSwitch, {\n            size: \"xl\",\n            onChange: event => {\n              alert(event.target);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            row: true,\n            \"aria-label\": \"mobile-type\",\n            name: \"row-radio-buttons-group\",\n            style: {\n              width: 300,\n              justifyContent: \"space-evenly\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              label: \"Android\",\n              value: true,\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 598,\n                columnNumber: 38\n              }, this) // onChange={(event) => setData({ ...data, android: event.target.value == \"true\" ? true : false })} \n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              label: \"Normal\",\n              value: false,\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 604,\n                columnNumber: 38\n              }, this) // onChange={(event) => setData({ ...data, android: event.target.value == \"true\" ? true : false })} \n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\" // onClick={addrecords}\n            ,\n            children: \"Add to records\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(Dataentry, \"Ce0VTg/q7pxb5V+oulONmjgCqBw=\");\n\n_c = Dataentry;\nexport default Dataentry;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataentry\");","map":{"version":3,"sources":["/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Dataentry.js"],"names":["React","useEffect","useState","url","Grid","Button","FormControlLabel","RadioGroup","Radio","Autocomplete","CFormInput","CFormSwitch","Dataentry","name","setName","dob","setDob","familyheads","setFamilyheads","validity","setvalidity","data","setData","Date","toLocaleDateString","str","split","today","mon","getMonth","year","getFullYear","age","k","validation","familyid","familyhead","address","selfid","gender","mobile","length","addrecords","Familyid","Selfid","Name","Dob","Age","Gender","Married","married","Weddingdate","weddingdate","Emailid","emailid","Mobile","Address","Familyhead","Baptized","baptized","Android","android","fetch","method","headers","body","JSON","stringify","then","res","json","result","alert","console","log","catch","error","searchfamilyhead","filteredresult","Set","width","marginRight","justifyContent","event","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { url } from \"../Constants\";\nimport { Grid, Button, FormControlLabel, RadioGroup, Radio, Autocomplete } from \"@mui/material\";\nimport { CFormInput, CFormSwitch } from \"@coreui/react\";\n\n\nconst Dataentry = () => {\n    const [name, setName] = useState('');\n    const [dob, setDob] = useState('');\n    const [familyheads, setFamilyheads] = useState([]);\n    const [validity, setvalidity] = useState(true);\n\n    const [data, setData] = useState({\n        \"name\": '',\n        \"dob\": new Date(),\n        \"gender\": '',\n        \"weddingdate\": new Date().toLocaleDateString(),\n        \"emailid\": '',\n        \"mobile\": '',\n        \"address\": '',\n        \"familyhead\": '',\n        \"familyid\": '',\n        \"selfid\": '',\n        \"android\": false,\n        \"baptized\": false,\n        \"married\": false\n\n    })\n\n    const str = dob.split('-');\n    const today = new Date();\n    const mon = today.getMonth();\n    const year = today.getFullYear();\n    let age;\n\n\n\n    let k = year - 1;\n\n    if (mon >= str[1]) {\n        age = year - str[0];\n\n\n    }\n    else {\n        age = k - str[0];\n\n    }\n\n    const validation = () => {\n        if ((data.familyid && data.familyhead && data.address && data.selfid && data.name && data.gender && (!data.mobile.length < 10)) !== '') {\n            setvalidity(true);\n            return true;\n        }\n        else {\n            setvalidity(false);\n            return false;\n        }\n    }\n\n    const addrecords = () => {\n        if (validity) {\n\n            let Familyid = data.familyid;\n            let Selfid = data.selfid;\n            let Name = data.name;\n            let Dob = data.dob;\n            let Age = age;\n            let Gender = data.gender;\n            let Married = data.married;\n            let Weddingdate = data.weddingdate;\n            let Emailid = data.emailid;\n            let Mobile = data.mobile;\n            let Address = data.address;\n            let Familyhead = data.familyhead;\n            let Baptized = data.baptized;\n            let Android = data.android;\n\n\n            fetch(`${url}/jehovanissi/api/member_details.php`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: Name,\n                    dob: Dob,\n                    age: Age,\n                    gender: Gender,\n                    married: Married,\n                    weddingdate: Weddingdate,\n                    emailid: Emailid,\n                    mobile: Mobile,\n                    address: Address,\n                    familyhead: Familyhead,\n                    baptized: Baptized,\n                    android: Android,\n                    familyid: Familyid,\n                    selfid: Selfid\n                })\n            })\n                .then(res => res.json())\n                .then((result) => {\n                    alert(result);\n                    console.log(result);\n                }).catch((error) => {\n                    console.error(error);\n                });\n        }\n        else {\n            alert(\"Input All required\");\n\n        }\n\n\n\n    }\n\n    const searchfamilyhead = () => {\n        fetch(`${url}/jehovanissi/api/searchfamilyhead.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n\n        })\n            .then(res => res.json())\n            .then((result) => {\n                let filteredresult = [...new Set(result)];\n                setFamilyheads(filteredresult);\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n    useEffect(() => {\n        searchfamilyhead();\n    }, [])\n\n    return (\n        // <Grid\n        //     direction=\"column\"\n        //     alignItems={\"stretch\"}\n        //     justifyItems={\"stretch\"}\n        //     container\n        // >\n        //     <Grid\n        //         direction={\"column\"}\n        //         alignItems={\"center\"}\n        //         justifyItems={\"stretch\"}\n        //         container\n        //         item\n        //     >\n        //         <Grid>\n        //             <CFormInput\n        //                 style={{ width: 300, marginRight: 15 }}\n        //                 name=\"familyid\"\n        //                 value={data.familyid}\n        //                 margin=\"dense\"\n        //                 variant=\"outlined\"\n        //                 onChange={(event) => {\n        //                     setData({ ...data, familyid: event.target.value.toUpperCase()})\n        //                 }}\n        //                 placeholder=\"Family ID\"\n        //                 label=\"Family ID\"\n        //             />\n        //             <CFormInput\n        //                 name=\"selfid\"\n        //                 style={{ width: 300, marginRight: 15 }}\n        //                 value={data.selfid}\n        //                 margin=\"dense\"\n        //                 variant=\"outlined\"\n        //                 onFocus={() => setData({ ...data, selfid: data.familyid.slice(3)})}\n        //                 placeholder=\"Self ID\"\n        //                 label=\"Self ID\"\n        //             />\n        //         </Grid>\n        //         <Grid>\n        //             <CFormInput\n        //                 name=\"name\"\n        //                 value={data.name}\n        //                 style={{ width: 300, marginRight: 15 }}\n        //                 margin=\"dense\"\n        //                 variant=\"outlined\"\n        //                 onChange={(event) => {\n        //                     const str = event.target.value.split(' ');\n        //                     for (let i = 0; i < str.length; i++) {\n\n        //                         str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n        //                     }\n        //                     const Nameoff = str.join(' ');\n        //                     setData({ ...data, name: Nameoff })\n        //                 }}\n        //                 placeholder=\"Enter Name\"\n        //                 label=\"Enter Name\"\n        //             />\n        //             <CFormInput\n        //                 type={\"date\"}\n        //                 style={{ width: 300, marginRight: 15 }}\n        //                 value={data.dob}\n        //                 onChange={(event) => setData({ ...data, dob: event.target.value })}\n        //                 label=\"Enter DOB\"\n        //             />\n        //         </Grid>\n        //         <RadioGroup\n        //             row\n        //             aria-label=\"gender\"\n        //             name=\"row-radio-buttons-group\"\n        //             style={{\n        //                 width: 300,\n        //                 justifyContent: \"space-evenly\"\n        //             }}\n        //         >\n        //             <FormControlLabel\n        //                 value=\"male\"\n        //                 name=\"gender\"\n        //                 label={\"Male\"}\n        //                 control={<Radio />}\n        //                 onChange={(event) => setData({ ...data, gender: event.target.value })} />\n        //             <FormControlLabel\n        //                 value=\"female\"\n        //                 name=\"gender\"\n        //                 label={\"Female\"}\n        //                 control={<Radio />}\n        //                 onChange={(event) => setData({ ...data, gender: event.target.value })} />\n        //         </RadioGroup>\n        //         <RadioGroup\n        //             row\n        //             aria-label=\"martial-status\"\n        //             name=\"row-radio-buttons-group\"\n        //             style={{\n        //                 width: 300,\n        //                 justifyContent: \"space-evenly\"\n        //             }}\n        //         >\n        //             <FormControlLabel\n        //                 value={true}\n        //                 label={\"Married\"}\n        //                 control={<Radio />}\n        //                 onChange={(event) => { setData({ ...data, married: event.target.value ==\"true\"?true:false }) }} />\n        //             <FormControlLabel\n        //                 value={false}\n        //                 control={<Radio />}\n        //                 label={\"Unmarried\"}\n        //                 onChange={(event) => { setData({ ...data, married: event.target.value ==\"true\"?true:false  }) }} />\n        //         </RadioGroup>\n\n        //         <CFormInput\n        //             type=\"date\"\n        //             label=\"Wedding Date\"\n        //             style={{ display:data.married===true?\"inline-block\":\"none\",width: 300, marginRight: 15 }}\n        //             margin=\"dense\"\n        //             variant=\"outlined\"\n        //             value={data.weddingdate}\n        //             onChange={(event) => setData({ ...data, weddingdate: event.target.value })}\n        //         />\n        //         <Grid>\n        //             <CFormInput\n        //                 name=\"emailid\"\n        //                 margin=\"dense\"\n        //                 label=\"Email ID\"\n        //                 style={{ width: 300, marginRight: 15 }}\n        //                 variant=\"outlined\"\n        //                 onChange={(event) => setData({ ...data, emailid: event.target.value })}\n        //                 value={data.emailid}\n        //             />\n\n        //             <CFormInput\n        //                 name=\"mobile\"\n        //                 style={{ width: 300, marginRight: 15 }}\n        //                 label=\"Mobile\"\n        //                 margin=\"dense\"\n        //                 variant=\"outlined\"\n        //                 value={data.mobile}\n        //                 onChange={(event) => {\n        //                     let patt = /[^0-9]/g;\n        //                     const ph = event.target.value.replace(patt, '');\n        //                     setData({ ...data, mobile: ph.slice(0, 10) });\n        //                 }} />\n        //         </Grid>\n\n        //         <Grid>\n        //             <CFormInput\n        //                 name=\"address\"\n        //                 label=\"Address\"\n        //                 style={{ width: 300, marginRight: 15 }}\n        //                 margin=\"dense\"\n        //                 variant=\"outlined\"\n        //                 value={data.address}\n        //                 onChange={(event) => {\n        //                     const str = event.target.value.split(',');\n        //                     for (let i = 0; i < str.length; i++) {\n        //                         str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n        //                     }\n        //                     const address = str.join(',');\n        //                     setData({ ...data, address: address })\n        //                 }}\n        //             />\n        //             <Autocomplete\n        //                 options={familyheads}\n        //                 renderInput={(params) =>\n        //                     <CFormInput\n        //                         {...params}\n        //                         name=\"familyhead\"\n        //                         value={data.familyhead}\n        //                         margin=\"dense\"\n        //                         variant=\"outlined\"\n        //                         label=\"Family Head\"\n        //                         onChange={(event) => {\n        //                             const str = event.target.value.split(' ');\n        //                             for (let i = 0; i < str.length; i++) {\n        //                                 str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n        //                             }\n        //                             const familyheadname = str.join(' ');\n        //                             setData({ ...data, familyhead: familyheadname })\n        //                         }}\n        //                     />\n        //                 }\n        //             />\n        //         </Grid>\n        //         <RadioGroup\n        //             row\n        //             aria-label=\"Baptizm\"\n        //             name=\"row-radio-buttons-group\"\n        //             style={{\n        //                 width: 300,\n        //                 justifyContent: \"space-evenly\"\n        //             }}\n        //         >\n        //             <FormControlLabel\n        //                 control={<Radio />}\n        //                 value={true}\n        //                 label={\"Baptized\"}\n        //                 onChange={(event) => setData({ ...data, baptized: event.target.value==\"true\"?true:false  })}\n        //             />\n        //             <FormControlLabel\n        //                 value={false}\n        //                 control={<Radio />}\n        //                 label={\"Not Baptized\"}\n        //                 onChange={(event) => setData({ ...data, baptized: event.target.value==\"true\"?true:false  })}\n        //             />\n        //         </RadioGroup>\n\n        //         <RadioGroup\n        //             row\n        //             aria-label=\"mobile-type\"\n        //             name=\"row-radio-buttons-group\"\n        //             style={{\n        //                 width: 300,\n        //                 justifyContent: \"space-evenly\"\n        //             }}\n        //         >\n        //             <FormControlLabel\n        //                 label={\"Android\"}\n        //                 value={true}\n        //                 control={<Radio />}\n        //                 onChange={(event) => setData({ ...data, android: event.target.value==\"true\"?true:false  })} />\n        //             <FormControlLabel\n        //                 label={\"Normal\"}\n        //                 value={false}\n        //                 control={<Radio />}\n        //                 onChange={(event) => setData({ ...data, android: event.target.value==\"true\"?true:false  })} />\n        //         </RadioGroup>\n\n        //         <Button\n        //             variant=\"contained\"\n        //             onClick={addrecords} >\n        //             Add to records</Button>\n        //     </Grid>\n        //     <Grid>\n        //         {JSON.stringify(data)}\n        //     </Grid>\n        // </Grid>\n\n\n        <Grid>\n            <Grid\n                direction=\"column\"\n                alignItems={\"stretch\"}\n                justifyItems={\"stretch\"}\n                container\n            >\n                <Grid\n                    direction={\"column\"}\n                    alignItems={\"center\"}\n                    justifyItems={\"stretch\"}\n                    container\n                    item\n                >\n                    <Grid>\n                        <CFormInput\n                            style={{ width: 300, marginRight: 15 }}\n                            name=\"familyid\"\n                            // value={data.familyid}\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            placeholder=\"Family ID\"\n                            label=\"Family ID\"\n                        />\n                        <CFormInput\n                            name=\"selfid\"\n                            style={{ width: 300, marginRight: 15 }}\n                            // value={data.selfid}\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            placeholder=\"Self ID\"\n                            label=\"Self ID\"\n                        />\n                    </Grid>\n                    <Grid>\n                        <CFormInput\n                            name=\"name\"\n                            // value={data.name}\n                            style={{ width: 300, marginRight: 15 }}\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            // onChange={(event) => {\n                            //     const str = event.target.value.split(' ');\n                            //     for (let i = 0; i < str.length; i++) {\n\n                            //         str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                            //     }\n                            //     const Nameoff = str.join(' ');\n                            //     setData({ ...data, name: Nameoff })\n                            // }}\n                            placeholder=\"Enter Name\"\n                            label=\"Enter Name\"\n                        />\n                        {/* <DatePicker\n              style={{ width: 300, marginRight: 15 }}\n              // value={data.dob}\n              // onChange={(event) => setData({ ...data, dob: event.target.value })}\n              label=\"Enter DOB\"\n            /> */}\n                    </Grid>\n                    <RadioGroup\n                        row\n                        aria-label=\"gender\"\n                        name=\"row-radio-buttons-group\"\n                        style={{\n                            width: 300,\n                            justifyContent: \"space-evenly\"\n                        }}\n                    >\n                        <FormControlLabel\n                            value=\"male\"\n                            name=\"gender\"\n                            label={\"Male\"}\n                            control={<Radio />}\n                        // onChange={(event) => setData({ ...data, gender: event.target.value })}\n                        />\n                        <FormControlLabel\n                            value=\"female\"\n                            name=\"gender\"\n                            label={\"Female\"}\n                            control={<Radio />}\n                        // onChange={(event) => setData({ ...data, gender: event.target.value })}\n                        />\n                    </RadioGroup>\n                    <RadioGroup\n                        row\n                        aria-label=\"martial-status\"\n                        name=\"row-radio-buttons-group\"\n                        style={{\n                            width: 300,\n                            justifyContent: \"space-evenly\"\n                        }}\n                    >\n                        <FormControlLabel\n                            value={true}\n                            label={\"Married\"}\n                            control={<Radio />}\n                        // onChange={(event) => { setData({ ...data, married: event.target.value == \"true\" ? true : false }) }}\n                        />\n                        <FormControlLabel\n                            value={false}\n                            control={<Radio />}\n                            label={\"Unmarried\"}\n                        // onChange={(event) => { setData({ ...data, married: event.target.value == \"true\" ? true : false }) }} \n                        />\n                    </RadioGroup>\n\n                    <CFormInput\n                        type=\"date\"\n                        label=\"Wedding Date\"\n                        // style={{ display: data.married === true ? \"inline-block\" : \"none\", width: 300, marginRight: 15 }}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                    // value={data.weddingdate}\n                    // onChange={(event) => setData({ ...data, weddingdate: event.target.value })}\n                    />\n                    <Grid>\n                        <CFormInput\n                            name=\"emailid\"\n                            margin=\"dense\"\n                            label=\"Email ID\"\n                            style={{ width: 300, marginRight: 15 }}\n                            variant=\"outlined\"\n                        // onChange={(event) => setData({ ...data, emailid: event.target.value })}\n                        // value={data.emailid}\n                        />\n\n                        <CFormInput\n                            name=\"mobile\"\n                            style={{ width: 300, marginRight: 15 }}\n                            label=\"Mobile\"\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                        // value={data.mobile}\n                        // onChange={(event) => {\n                        //   let patt = /[^0-9]/g;\n                        //   const ph = event.target.value.replace(patt, '');\n                        //   setData({ ...data, mobile: ph.slice(0, 10) });\n                        // }}\n                        />\n                    </Grid>\n\n                    <Grid>\n                        <CFormInput\n                            name=\"address\"\n                            label=\"Address\"\n                            style={{ width: 300, marginRight: 15 }}\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                        // value={data.address}\n                        // onChange={(event) => {\n                        //   const str = event.target.value.split(',');\n                        //   for (let i = 0; i < str.length; i++) {\n                        //     str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                        //   }\n                        //   const address = str.join(',');\n                        //   setData({ ...data, address: address })\n                        // }}\n                        />\n                        {/* <Autocomplete\n              options={familyheads}\n              renderInput={(params) =>\n                <CFormInput\n                  {...params}\n                  name=\"familyhead\"\n                  value={data.familyhead}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  label=\"Family Head\"\n                  onChange={(event) => {\n                    const str = event.target.value.split(' ');\n                    for (let i = 0; i < str.length; i++) {\n                      str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                    }\n                    const familyheadname = str.join(' ');\n                    setData({ ...data, familyhead: familyheadname })\n                  }}\n                />\n              }\n            /> */}\n                    </Grid>\n                    <RadioGroup\n                        row\n                        aria-label=\"Baptizm\"\n                        name=\"row-radio-buttons-group\"\n                        style={{\n                            width: 300,\n                            justifyContent: \"space-evenly\"\n                        }}\n                    >\n                        <FormControlLabel\n                            control={<Radio />}\n                            value={true}\n                            label={\"Baptized\"}\n                        // onChange={(event) => setData({ ...data, baptized: event.target.value == \"true\" ? true : false })}\n                        />\n                        <FormControlLabel\n                            value={false}\n                            control={<Radio />}\n                            label={\"Not Baptized\"}\n                        // onChange={(event) => setData({ ...data, baptized: event.target.value == \"true\" ? true : false })}\n                        />\n                    </RadioGroup>\n                        <CFormSwitch\n                            size=\"xl\"\n                            onChange={(event)=>{\n                                alert(event.target)\n                            }}\n                        />\n                    <RadioGroup\n                        row\n                        aria-label=\"mobile-type\"\n                        name=\"row-radio-buttons-group\"\n                        style={{\n                            width: 300,\n                            justifyContent: \"space-evenly\"\n                        }}\n                    >\n                        <FormControlLabel\n                            label={\"Android\"}\n                            value={true}\n                            control={<Radio />}\n                        // onChange={(event) => setData({ ...data, android: event.target.value == \"true\" ? true : false })} \n                        />\n                        <FormControlLabel\n                            label={\"Normal\"}\n                            value={false}\n                            control={<Radio />}\n                        // onChange={(event) => setData({ ...data, android: event.target.value == \"true\" ? true : false })} \n                        />\n                    </RadioGroup>\n\n                    <Button\n                        variant=\"contained\"\n                    // onClick={addrecords}\n                    >\n                        Add to records</Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Dataentry;"]},"metadata":{},"sourceType":"module"}