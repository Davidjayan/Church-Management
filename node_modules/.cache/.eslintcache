[{"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/index.js":"1","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/store.js":"2","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/serviceWorker.js":"3","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/App.js":"4","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/layout/DefaultLayout.js":"5","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/pages/register/Register.js":"6","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/pages/page500/Page500.js":"7","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/pages/login/Login.js":"8","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/pages/page404/Page404.js":"9","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/index.js":"10","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppBreadcrumb.js":"11","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppFooter.js":"12","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/DocsLink.js":"13","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppContent.js":"14","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppHeader.js":"15","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/DocsCallout.js":"16","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppSidebar.js":"17","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/DocsExample.js":"18","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/header/AppHeaderDropdown.js":"19","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/routes.js":"20","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/header/index.js":"21","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppSidebarNav.js":"22","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/_nav.js":"23","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/assets/brand/sygnet.js":"24","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/assets/brand/logo-negative.js":"25","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/assets/brand/logo.js":"26","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/widgets/Widgets.js":"27","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/charts/Charts.js":"28","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/icons/brands/Brands.js":"29","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/icons/flags/Flags.js":"30","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/icons/coreui-icons/CoreUIIcons.js":"31","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/dashboard/Dashboard.js":"32","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/widgets/WidgetsBrand.js":"33","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/widgets/WidgetsDropdown.js":"34","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Editaccounting.js":"35","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Constants.js":"36","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Fetchaccountingdetails.js":"37","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Accounting.js":"38","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Studentattendance.js":"39","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Churchattendance.js":"40","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Dataentry.js":"41","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/EditData.js":"42","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/YoutubeID.js":"43","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Inputchurchattendance.js":"44","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Getchurchattendance.js":"45","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Inputstudentattendance.js":"46","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Getstudentattendance.js":"47","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/newstudententry.js":"48","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Support/AlertMessage.js":"49","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Support/Datepicker.js":"50","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Support/SelectComp.js":"51","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Support/Loader.js":"52","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/layout/LaywithLoader.js":"53","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/DataEntryForm.js":"54","/home/david/Desktop/mydev/Church-Management/src/index.js":"55","/home/david/Desktop/mydev/Church-Management/src/store.js":"56","/home/david/Desktop/mydev/Church-Management/src/serviceWorker.js":"57","/home/david/Desktop/mydev/Church-Management/src/App.js":"58","/home/david/Desktop/mydev/Church-Management/src/layout/DefaultLayout.js":"59","/home/david/Desktop/mydev/Church-Management/src/layout/LaywithLoader.js":"60","/home/david/Desktop/mydev/Church-Management/src/views/pages/page500/Page500.js":"61","/home/david/Desktop/mydev/Church-Management/src/views/pages/page404/Page404.js":"62","/home/david/Desktop/mydev/Church-Management/src/views/pages/login/Login.js":"63","/home/david/Desktop/mydev/Church-Management/src/views/pages/register/Register.js":"64","/home/david/Desktop/mydev/Church-Management/src/views/Components/Support/Loader.js":"65","/home/david/Desktop/mydev/Church-Management/src/components/index.js":"66","/home/david/Desktop/mydev/Church-Management/src/components/AppBreadcrumb.js":"67","/home/david/Desktop/mydev/Church-Management/src/components/DocsLink.js":"68","/home/david/Desktop/mydev/Church-Management/src/components/DocsCallout.js":"69","/home/david/Desktop/mydev/Church-Management/src/components/DocsExample.js":"70","/home/david/Desktop/mydev/Church-Management/src/components/AppSidebar.js":"71","/home/david/Desktop/mydev/Church-Management/src/components/AppHeader.js":"72","/home/david/Desktop/mydev/Church-Management/src/components/AppContent.js":"73","/home/david/Desktop/mydev/Church-Management/src/components/AppFooter.js":"74","/home/david/Desktop/mydev/Church-Management/src/components/header/AppHeaderDropdown.js":"75","/home/david/Desktop/mydev/Church-Management/src/routes.js":"76","/home/david/Desktop/mydev/Church-Management/src/_nav.js":"77","/home/david/Desktop/mydev/Church-Management/src/components/header/index.js":"78","/home/david/Desktop/mydev/Church-Management/src/assets/brand/logo.js":"79","/home/david/Desktop/mydev/Church-Management/src/assets/brand/sygnet.js":"80","/home/david/Desktop/mydev/Church-Management/src/assets/brand/logo-negative.js":"81","/home/david/Desktop/mydev/Church-Management/src/components/AppSidebarNav.js":"82","/home/david/Desktop/mydev/Church-Management/src/views/Components/Dataentry.js":"83","/home/david/Desktop/mydev/Church-Management/src/views/Components/EditData.js":"84","/home/david/Desktop/mydev/Church-Management/src/views/Components/YoutubeID.js":"85","/home/david/Desktop/mydev/Church-Management/src/views/Components/Accounting.js":"86","/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Inputstudentattendance.js":"87","/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Getchurchattendance.js":"88","/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Inputchurchattendance.js":"89","/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Getstudentattendance.js":"90","/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Editaccounting.js":"91","/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Fetchaccountingdetails.js":"92","/home/david/Desktop/mydev/Church-Management/src/views/dashboard/Dashboard.js":"93","/home/david/Desktop/mydev/Church-Management/src/views/Constants.js":"94","/home/david/Desktop/mydev/Church-Management/src/views/Components/Support/AlertMessage.js":"95","/home/david/Desktop/mydev/Church-Management/src/views/Components/DataEntryForm.js":"96","/home/david/Desktop/mydev/Church-Management/src/views/widgets/WidgetsBrand.js":"97","/home/david/Desktop/mydev/Church-Management/src/views/Components/Support/Datepicker.js":"98","/home/david/Desktop/mydev/Church-Management/src/views/widgets/WidgetsDropdown.js":"99","/home/david/Desktop/mydev/Church-Management/src/views/Components/Support/SelectComp.js":"100","/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/newstudententry.js":"101","/home/david/Desktop/mydev/Church-Management/src/views/Components/Verse.js":"102"},{"size":848,"mtime":1650299092024,"results":"103","hashOfConfig":"104"},{"size":319,"mtime":1640506760052,"results":"105","hashOfConfig":"104"},{"size":4644,"mtime":1640506760052,"results":"106","hashOfConfig":"104"},{"size":1594,"mtime":1651556944305,"results":"107","hashOfConfig":"104"},{"size":764,"mtime":1654950190087,"results":"108","hashOfConfig":"104"},{"size":2328,"mtime":1640506760056,"results":"109","hashOfConfig":"104"},{"size":1218,"mtime":1640506760056,"results":"110","hashOfConfig":"104"},{"size":2896,"mtime":1640506760056,"results":"111","hashOfConfig":"104"},{"size":1198,"mtime":1640506760056,"results":"112","hashOfConfig":"104"},{"size":511,"mtime":1654950187647,"results":"113","hashOfConfig":"104"},{"size":1348,"mtime":1640506760052,"results":"114","hashOfConfig":"104"},{"size":377,"mtime":1654950336962,"results":"115","hashOfConfig":"104"},{"size":704,"mtime":1640506760052,"results":"116","hashOfConfig":"104"},{"size":994,"mtime":1651559938861,"results":"117","hashOfConfig":"104"},{"size":2281,"mtime":1654950588083,"results":"118","hashOfConfig":"104"},{"size":1181,"mtime":1640506760052,"results":"119","hashOfConfig":"104"},{"size":1506,"mtime":1654950369405,"results":"120","hashOfConfig":"104"},{"size":1200,"mtime":1640506760052,"results":"121","hashOfConfig":"104"},{"size":2738,"mtime":1640506760052,"results":"122","hashOfConfig":"104"},{"size":2059,"mtime":1640518330737,"results":"123","hashOfConfig":"104"},{"size":82,"mtime":1640506760052,"results":"124","hashOfConfig":"104"},{"size":1639,"mtime":1640506760052,"results":"125","hashOfConfig":"104"},{"size":2412,"mtime":1640518524559,"results":"126","hashOfConfig":"104"},{"size":985,"mtime":1640506760048,"results":"127","hashOfConfig":"104"},{"size":6940,"mtime":1640506760048,"results":"128","hashOfConfig":"104"},{"size":6927,"mtime":1640506760048,"results":"129","hashOfConfig":"104"},{"size":31434,"mtime":1640506760056,"results":"130","hashOfConfig":"131"},{"size":5746,"mtime":1640506760056,"results":"132","hashOfConfig":"131"},{"size":1272,"mtime":1640506760056,"results":"133","hashOfConfig":"131"},{"size":897,"mtime":1640506760056,"results":"134","hashOfConfig":"131"},{"size":887,"mtime":1640506760056,"results":"135","hashOfConfig":"131"},{"size":16500,"mtime":1640506760056,"results":"136","hashOfConfig":"104"},{"size":5557,"mtime":1640506760056,"results":"137","hashOfConfig":"104"},{"size":11195,"mtime":1640506760056,"results":"138","hashOfConfig":"104"},{"size":25240,"mtime":1652793172089,"results":"139","hashOfConfig":"104"},{"size":115,"mtime":1652627923700,"results":"140","hashOfConfig":"104"},{"size":37651,"mtime":1652627999341,"results":"141","hashOfConfig":"104"},{"size":15957,"mtime":1652627999341,"results":"142","hashOfConfig":"104"},{"size":802,"mtime":1640507585460,"results":"143","hashOfConfig":"144"},{"size":800,"mtime":1640507585460,"results":"145","hashOfConfig":"144"},{"size":4291,"mtime":1654968952563,"results":"146","hashOfConfig":"104"},{"size":11133,"mtime":1654975096915,"results":"147","hashOfConfig":"104"},{"size":3542,"mtime":1652627999345,"results":"148","hashOfConfig":"104"},{"size":4606,"mtime":1652627999345,"results":"149","hashOfConfig":"104"},{"size":11338,"mtime":1652627999341,"results":"150","hashOfConfig":"104"},{"size":4431,"mtime":1652627999345,"results":"151","hashOfConfig":"104"},{"size":10149,"mtime":1652627999345,"results":"152","hashOfConfig":"104"},{"size":2613,"mtime":1652627999345,"results":"153","hashOfConfig":"104"},{"size":1060,"mtime":1650857313964,"results":"154","hashOfConfig":"104"},{"size":814,"mtime":1650852965560,"results":"155","hashOfConfig":"104"},{"size":594,"mtime":1650389328543,"results":"156","hashOfConfig":"104"},{"size":725,"mtime":1651567462424,"results":"157","hashOfConfig":"104"},{"size":387,"mtime":1651561253750,"results":"158","hashOfConfig":"104"},{"size":10889,"mtime":1654967211733,"results":"159","hashOfConfig":"104"},{"size":848,"mtime":1650299092024,"results":"160","hashOfConfig":"161"},{"size":319,"mtime":1640506760052,"results":"162","hashOfConfig":"161"},{"size":4644,"mtime":1640506760052,"results":"163","hashOfConfig":"161"},{"size":1594,"mtime":1651556944305,"results":"164","hashOfConfig":"161"},{"size":764,"mtime":1654950190087,"results":"165","hashOfConfig":"161"},{"size":387,"mtime":1651561253750,"results":"166","hashOfConfig":"161"},{"size":1218,"mtime":1640506760056,"results":"167","hashOfConfig":"161"},{"size":1198,"mtime":1640506760056,"results":"168","hashOfConfig":"161"},{"size":2896,"mtime":1640506760056,"results":"169","hashOfConfig":"161"},{"size":2328,"mtime":1640506760056,"results":"170","hashOfConfig":"161"},{"size":725,"mtime":1651567462424,"results":"171","hashOfConfig":"161"},{"size":511,"mtime":1654950187647,"results":"172","hashOfConfig":"161"},{"size":1348,"mtime":1640506760052,"results":"173","hashOfConfig":"161"},{"size":704,"mtime":1640506760052,"results":"174","hashOfConfig":"161"},{"size":1181,"mtime":1640506760052,"results":"175","hashOfConfig":"161"},{"size":1200,"mtime":1640506760052,"results":"176","hashOfConfig":"161"},{"size":1506,"mtime":1654950369405,"results":"177","hashOfConfig":"161"},{"size":2386,"mtime":1655226970379,"results":"178","hashOfConfig":"161"},{"size":994,"mtime":1651559938861,"results":"179","hashOfConfig":"161"},{"size":377,"mtime":1654950336962,"results":"180","hashOfConfig":"161"},{"size":2738,"mtime":1640506760052,"results":"181","hashOfConfig":"161"},{"size":2187,"mtime":1655318757890,"results":"182","hashOfConfig":"161"},{"size":2568,"mtime":1655318764599,"results":"183","hashOfConfig":"161"},{"size":82,"mtime":1640506760052,"results":"184","hashOfConfig":"161"},{"size":6927,"mtime":1640506760048,"results":"185","hashOfConfig":"161"},{"size":985,"mtime":1640506760048,"results":"186","hashOfConfig":"161"},{"size":6940,"mtime":1640506760048,"results":"187","hashOfConfig":"161"},{"size":1639,"mtime":1640506760052,"results":"188","hashOfConfig":"161"},{"size":3700,"mtime":1655048200369,"results":"189","hashOfConfig":"161"},{"size":11020,"mtime":1655088838059,"results":"190","hashOfConfig":"161"},{"size":3542,"mtime":1652627999345,"results":"191","hashOfConfig":"161"},{"size":15545,"mtime":1656302575282,"results":"192","hashOfConfig":"161"},{"size":4371,"mtime":1655025459561,"results":"193","hashOfConfig":"161"},{"size":11338,"mtime":1652627999341,"results":"194","hashOfConfig":"161"},{"size":4546,"mtime":1655025446939,"results":"195","hashOfConfig":"161"},{"size":10149,"mtime":1652627999345,"results":"196","hashOfConfig":"161"},{"size":27425,"mtime":1655179724182,"results":"197","hashOfConfig":"161"},{"size":37677,"mtime":1655179016271,"results":"198","hashOfConfig":"161"},{"size":16500,"mtime":1640506760056,"results":"199","hashOfConfig":"161"},{"size":218,"mtime":1655317583917,"results":"200","hashOfConfig":"161"},{"size":1061,"mtime":1655041494484,"results":"201","hashOfConfig":"161"},{"size":10931,"mtime":1655049294247,"results":"202","hashOfConfig":"161"},{"size":5557,"mtime":1640506760056,"results":"203","hashOfConfig":"161"},{"size":814,"mtime":1650852965560,"results":"204","hashOfConfig":"161"},{"size":11195,"mtime":1640506760056,"results":"205","hashOfConfig":"161"},{"size":594,"mtime":1650389328543,"results":"206","hashOfConfig":"161"},{"size":2613,"mtime":1652627999345,"results":"207","hashOfConfig":"161"},{"size":7372,"mtime":1655237441722,"results":"208","hashOfConfig":"161"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},"1neijsw",{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"211"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"211"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"211"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"211"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"211"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r12qry",{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"211"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"211"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"211"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"35wo7c",{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"211"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"211"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"211"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"211"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"211"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"211"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"211"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"211"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"211"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},"1kpv6f4",{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/index.js",[],["432","433"],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/store.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/serviceWorker.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/App.js",["434","435","436","437","438"],"import React, { Component, useState } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { LaywithLoader } from './layout/LaywithLoader'\nimport './scss/style.scss'\nimport { Loader } from './views/Components/Support/Loader'\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\nconst Register = React.lazy(() => import('./views/pages/register/Register'))\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'))\nconst App =()=> {\n  const [isLoading,setLoader] = useState(true);\n  \n    return (\n      <HashRouter>\n        <React.Suspense fallback={loading}>\n          <Switch>\n            <Route exact path=\"/login\" name=\"Login Page\" render={(props) => <Login {...props} />} />\n            <Route\n              exact\n              path=\"/register\"\n              name=\"Register Page\"\n              render={(props) => <Register {...props} />}\n            />\n            <Route exact path=\"/404\" name=\"Page 404\" render={(props) => <Page404 {...props} />} />\n            <Route exact path=\"/500\" name=\"Page 500\" render={(props) => <Page500 {...props} />} />\n            <Route path=\"/\" name=\"Home\" render={(props) => <LaywithLoader  {...props}/>} />\n          </Switch>\n        </React.Suspense>\n      </HashRouter>\n    )\n}\n\nexport default App\n","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/layout/DefaultLayout.js",["439","440","441"],"import { PanoramaPhotosphereOutlined } from '@mui/icons-material'\nimport React, { useState } from 'react'\nimport { Loader } from 'src/views/Components/Support/Loader'\nimport { AppContent, AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nconst DefaultLayout = (props) => {\n  // props.setLoading(true);\n    return (\n      <div>\n        <AppSidebar setLoading={props.setLoading} />\n        <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n          <AppHeader setLoading={props.setLoading} />\n          <div className=\"body flex-grow-1 px-3\">\n            <AppContent setLoading={props.setLoading} />\n          </div>\n          <AppFooter setLoading={props.setLoading} />\n        </div>\n      </div>\n    )\n}\n\nexport default DefaultLayout\n","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/pages/register/Register.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/pages/page500/Page500.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/pages/login/Login.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/pages/page404/Page404.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/index.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppBreadcrumb.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppFooter.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/DocsLink.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppContent.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppHeader.js",["442","443","444","445"],"import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderDivider,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavLink,\n  CNavItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilBell, cilEnvelopeOpen, cilList, cilMenu } from '@coreui/icons'\n\nimport { AppBreadcrumb } from './index'\nimport { AppHeaderDropdown } from './header/index'\nimport { logo } from 'src/assets/brand/logo'\n\nconst AppHeader = () => {\n  const dispatch = useDispatch()\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <CHeader position=\"sticky\" className=\"mb-4\">\n      <CContainer fluid>\n        <CHeaderToggler\n          className=\"ps-1\"\n          onClick={() => dispatch({ type: 'set', sidebarShow: !sidebarShow })}\n        >\n          <CIcon icon={cilMenu} size=\"lg\" />\n        </CHeaderToggler>\n        <CHeaderBrand className=\"mx-auto d-md-none\" to=\"/\">\n          <CIcon icon={logo} height={48} alt=\"Logo\" />\n        </CHeaderBrand>\n        <CHeaderNav className=\"d-none d-md-flex me-auto\">\n          <CNavItem>\n            <CNavLink to=\"/dashboard\" component={NavLink} activeClassName=\"active\">\n              Dashboard\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">Users</CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">Settings</CNavLink>\n          </CNavItem>\n        </CHeaderNav>\n        {/* <CHeaderNav>\n          <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilBell} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilList} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilEnvelopeOpen} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav className=\"ms-3\">\n          <AppHeaderDropdown />\n        </CHeaderNav> */}\n      </CContainer>\n      <CHeaderDivider />\n      <CContainer fluid>\n        <AppBreadcrumb />\n      </CContainer>\n    </CHeader>\n  )\n}\n\nexport default AppHeader\n","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/DocsCallout.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppSidebar.js",["446","447","448","449"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { CSidebar, CSidebarBrand, CSidebarNav, CSidebarToggler } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nimport { AppSidebarNav } from './AppSidebarNav'\n\nimport { logoNegative } from 'src/assets/brand/logo-negative'\nimport { sygnet } from 'src/assets/brand/sygnet'\n\nimport SimpleBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\n\n// sidebar nav config\nimport navigation from '../_nav'\n\nconst AppSidebar = () => {\n  const dispatch = useDispatch()\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable)\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <CSidebar\n      position=\"fixed\"\n      unfoldable={unfoldable}\n      visible={sidebarShow}\n      onVisibleChange={(visible) => {\n        dispatch({ type: 'set', sidebarShow: visible })\n      }}\n    >\n      {/* <CSidebarBrand className=\"d-none d-md-flex\" to=\"/\">\n        <CIcon className=\"sidebar-brand-full\" icon={logoNegative} height={35} />\n        <CIcon className=\"sidebar-brand-narrow\" icon={sygnet} height={35} />\n      </CSidebarBrand> */}\n      <CSidebarNav>\n        <SimpleBar>\n          <AppSidebarNav items={navigation} />\n        </SimpleBar>\n      </CSidebarNav>\n      <CSidebarToggler\n        className=\"d-none d-lg-flex\"\n        onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n      />\n    </CSidebar>\n  )\n}\n\nexport default React.memo(AppSidebar)\n","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/DocsExample.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/header/AppHeaderDropdown.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/routes.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/header/index.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/components/AppSidebarNav.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/_nav.js",["450"],"import React from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilBook,\n  cilCalculator,\n  cilCalendar,\n  cilPen,\n  cilPeople,\n  cilVideo,\n} from '@coreui/icons'\nimport { CNavGroup, CNavItem, CNavTitle } from '@coreui/react'\n\nconst _nav = [\n  {\n    component: CNavItem,\n    name: 'Youtube',\n    to: '/youtubeid',\n    icon: <CIcon icon={cilVideo} customClassName=\"nav-icon\" />,\n  },\n  {\n    component: CNavGroup,\n    name: 'Accounting',\n    icon: <CIcon icon={cilCalculator} customClassName=\"nav-icon\" />,\n    items: [\n      {\n        component: CNavItem,\n        name: 'Insert',\n        to: '/accounting-insert',\n      },\n      {\n        component: CNavItem,\n        name: 'Edit',\n        to: '/accounting-edit',\n      },\n      {\n        component: CNavItem,\n        name: 'Fetch',\n        to: '/accounting-fetch',\n      },\n    ],\n  },\n  {\n    component: CNavGroup,\n    name: 'Attendance',\n    icon: <CIcon icon={cilCalendar} customClassName=\"nav-icon\" />,\n    items: [\n      {\n        component: CNavGroup,\n        name: 'Churchattendance',\n        items: [\n          {\n            name:'Enter attendance',\n            component:CNavItem,\n            to : '/attendance-church-insert',\n            icon: <CIcon icon={cilPen} customClassName=\"nav-icon\" />,\n          },\n          {\n            name:'Previous attendance',\n            component:CNavItem,\n            to : '/attendance-church-get',\n            icon: <CIcon icon={cilBook} customClassName=\"nav-icon\" />,\n          },\n        ]\n      },\n      {\n        component: CNavGroup,\n        name: 'Studentattendance',\n        items: [\n          {\n            name:'Enter attendance',\n            component:CNavItem,\n            to : '/attendance-student-insert',\n            icon: <CIcon icon={cilPen} customClassName=\"nav-icon\" />,\n          },\n          {\n            name:'Previous attendance',\n            component:CNavItem,\n            to : '/attendance-student-get',\n            icon: <CIcon icon={cilBook} customClassName=\"nav-icon\" />,\n          },\n        ]\n      },\n    ],\n  },\n  {\n    component: CNavGroup,\n    name: 'Member',\n    icon: <CIcon icon={cilPeople} customClassName=\"nav-icon\" />,\n    items: [\n      {\n        component: CNavItem,\n        name: 'Insert',\n        to: '/form-insert',\n      },\n      {\n        component: CNavItem,\n        name: 'Edit',\n        to: '/form-edit',\n      },\n    ],\n  },\n]\n\nexport default _nav\n","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/assets/brand/sygnet.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/assets/brand/logo-negative.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/assets/brand/logo.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/widgets/Widgets.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/charts/Charts.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/icons/brands/Brands.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/icons/flags/Flags.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/icons/coreui-icons/CoreUIIcons.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/dashboard/Dashboard.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/widgets/WidgetsBrand.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/widgets/WidgetsDropdown.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Editaccounting.js",["451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467"],"import AddCircleOutline from \"@mui/icons-material/AddCircleOutline\";\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { Autocomplete, Button, Grid, IconButton, MenuItem, Select, Table, TableCell, TableHead, TableRow, TextField, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { url } from \"../../Constants\";\nimport { AlertMessage } from \"../Support/AlertMessage\";\nimport useFetch from 'use-http'\nimport { Datepicker } from \"../Support/Datepicker\";\n\nconst Editaccounting = (props) => {\n    const { setLoading } = props;\n    const [Total, setTotal] = useState();\n    const [click, setclick] = useState(0);\n    const [tempname, settempname] = useState('');\n    const [temptype, settemptype] = useState('');\n    const [tempamount, settempamount] = useState(0);\n    const [dateValue, setdateValue] = useState('10/18/2021');\n    const [dateset, isDateset] = useState(false);\n    const [report, setOfferingReport] = useState([]);\n    const [denominationsAndTotals, setDenominationsandTotals] = useState(\n        [{\n            \"Date\": \"2021-10-18\",\n            \"ChurchOffering\": \"1680\",\n            \"TitheTotal\": \"720\",\n            \"OfferingTotal\": \"0\",\n            \"SpecialOfferingTotal\": \"0\",\n            \"BaptismofferingTotal\": \"0\",\n            \"BirthdayofferingTotal\": \"0\",\n            \"WeddingofferingTotal\": \"300\",\n            \"ChilddedicationofferingTotal\": \"0\",\n            \"CommittedofferingTotal\": \"0\",\n            \"MissionaryTotal\": \"500\",\n            \"BuildingFundTotal\": \"0\",\n            \"GrandTotal\": \"3200\",\n            \"TwoThousands\": \"1\",\n            \"FiveHundreds\": \"1\",\n            \"TwoHundreds\": \"3\",\n            \"Hundreds\": \"1\",\n            \"Fifty\": \"0\",\n            \"Twenty\": \"0\",\n            \"Ten\": \"0\",\n            \"Five\": \"0\",\n            \"Two\": \"0\",\n            \"One\": \"0\"\n        }]\n    );\n    const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n\n    const arrOfferingTypes = [\n        { \"name\": \"Select\", \"value\": \"\" },\n        { \"name\": \"Tithe\", \"value\": \"Tithe\" },\n        { \"name\": \"Offering\", \"value\": \"Offering\" },\n        { \"name\": \"Missionary\", \"value\": \"Missionary\" },\n        { \"name\": \"Special Offering\", \"value\": \"Special Offering\" },\n        { \"name\": \"Baptism Offering\", \"value\": \"Baptism Offering\" },\n        { \"name\": \"Birthday Offering\", \"value\": \"Birthday Offering\" },\n        { \"name\": \"Wedding Offering\", \"value\": \"Wedding Offering\" },\n        { \"name\": \"Child Dedication Offering\", \"value\": \"Child Dedication Offering\" },\n        { \"name\": \"Committed Offering\", \"value\": \"Committed Offering\" },\n        { \"name\": \"Building Fund\", \"value\": \"Building Fund\" }\n    ]\n\n\n\n    const denoTypes = [\n        { \"name\": \"TwoThousands\", \"value\": 2000 },\n        { \"name\": \"FiveHundreds\", \"value\": 500 },\n        { \"name\": \"TwoHundreds\", \"value\": 200 },\n        { \"name\": \"Hundreds\", \"value\": 100 },\n        { \"name\": \"Fifty\", \"value\": 50 },\n        { \"name\": \"Twenty\", \"value\": 20 },\n        { \"name\": \"Ten\", \"value\": 10 },\n        { \"name\": \"Five\", \"value\": 5 },\n        { \"name\": \"Two\", \"value\": 2 },\n        { \"name\": \"One\", \"value\": 1 }\n    ]\n    const { get, post, response, loading, error } = useFetch(url)\n\n    const fetchOffering = async ()=>{\n        const newTodo = await post('/accounting-fetch.php', { date: dateValue });\n        let arr = newTodo.message[0];\n       \n        \n    }\n\n    \n\n\n\n\n\n    const fetchOfferingAndDenominationsByDate = async () => {\n        setLoading(true);\n        fetch(`${url}/accounting-fetch.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                date: dateValue\n            })\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setLoading(false);\n                if (result.status !== 0) {\n                    setOfferingReport(result.message[0]);\n                    setDenominationsandTotals([result.message[1]]);\n\n                    isDateset(true);\n\n                }\n                else {\n                    setNotify({\n                        ...notify,\n                        isOpen: true,\n                        message: result.message\n                    })\n                }\n\n\n            }).catch((error) => {\n                console.error(error);\n            })\n    }\n\n    const setDeno = async (value, denoName) => {\n        setDenominationsandTotals([...denominationsAndTotals], denominationsAndTotals[0][denoName] = value);\n    }\n\n\n\n    useEffect(() => {\n        let total = isNaN(report.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : report.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n\n        setTotal(total);\n\n        let churchOffering = denominationsAndTotals[0]['GrandTotal'] - total;\n\n        let titheTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let offeringTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let missionaryTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let specialofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let baptismofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let birthdayofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let weddingofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let childdedicationofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let committedofferingTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n        let buildingfundTotal = isNaN(report.reduce((accumulator, item) => item.Type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : report.reduce((accumulator, item) => item.Type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n\n        setDenominationsandTotals([...denominationsAndTotals],\n            denominationsAndTotals[0]['ChurchOffering'] = churchOffering,\n            denominationsAndTotals[0]['TitheTotal'] = titheTotal,\n            denominationsAndTotals[0]['BaptismofferingTotal'] = baptismofferingTotal,\n            denominationsAndTotals[0]['OfferingTotal'] = offeringTotal,\n            denominationsAndTotals[0]['MissionaryTotal'] = missionaryTotal,\n            denominationsAndTotals[0]['SpecialOfferingTotal'] = specialofferingTotal,\n            denominationsAndTotals[0]['BirthdayofferingTotal'] = birthdayofferingTotal,\n            denominationsAndTotals[0]['WeddingofferingTotal'] = weddingofferingTotal,\n            denominationsAndTotals[0]['ChilddedicationofferingTotal'] = childdedicationofferingTotal,\n            denominationsAndTotals[0]['CommittedofferingTotal'] = committedofferingTotal,\n            denominationsAndTotals[0]['BuildingFundTotal'] = buildingfundTotal,\n\n        );\n    }, [report, denominationsAndTotals[0].GrandTotal])\n\n\n\n\n    const [names, setnames] = useState([]);\n\n    const [searchterm, setsearchterm] = useState();\n\n    const results = !searchterm ? names : names.filter(person => person.toLowerCase().includes(searchterm.toLocaleLowerCase()));\n    const searchapi = () => {\n        setLoading(true);\n        fetch(`${url}/searchname.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setnames(result);\n                setLoading(false);\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n    useEffect(() => {\n        searchapi();\n    }, [1])\n    const confirm = () => {\n        setLoading(true);\n\n        fetch(`${url}/edit-accounting.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                denominationsAndTotals: denominationsAndTotals[0],\n                report\n\n            })\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setLoading(false);\n                setNotify({\n                    ...notify,\n                    severity: result.status == 0 ? \"error\" : \"success\",\n                    isOpen: true,\n                    message: result.message\n                })\n\n            }).catch((error) => {\n                console.error(error);\n            });\n\n    }\n    const deleteRow = (delName, delType, key) => {\n        setLoading(true);\n        fetch(`${url}/accounting-delete-row.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                date: dateValue,\n                name: delName,\n                type: delType\n\n            })\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setLoading(false);\n                setNotify({\n                    ...notify,\n                    isOpen: true,\n                    severity: result.status == 0 ? \"error\" : \"success\",\n                    message: result.message\n                });\n                if (result.status == 1) {\n                    setOfferingReport(currentPeople => currentPeople.filter((x, id) => id !== key));\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n            })\n    }\n\n    const addnew = () => {\n        setLoading(true);\n        fetch(`${url}/accounting-add-new.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n            body: JSON.stringify({\n                \"Name\": tempname,\n                \"date\": dateValue,\n                \"Type\": temptype,\n                \"Amount\": tempamount\n\n            })\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setLoading(false);\n                setNotify({\n                    ...notify,\n                    isOpen: true,\n                    severity: result.status == 0 ? \"error\" : \"success\",\n                    message: result.message\n                });\n                if (result.status == 1) {\n                    setOfferingReport(currentPeople => [...currentPeople, {\n                        Name: tempname,\n                        Type: temptype,\n                        Amount: tempamount,\n                    }]);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n            }).then(() => {\n\n                settempamount('');\n                settempamount('');\n                settemptype('');\n            })\n    }\n\n\n    return (\n        <Grid style={{ display: \"grid\", justifyContent: \"center\" }} >\n\n            <AlertMessage\n                notify={notify}\n                setNotify={setNotify}\n            />\n            <Grid>\n                <Datepicker\n                    setValue={setdateValue}\n                    value={dateValue}\n                    label='Date'\n                />\n                <Button className=\"btn2\" onClick={() => {   \n                    fetchOffering()\n                }} >Submit</Button>\n            </Grid>\n            <Grid style={{ display: dateset ? \"block\" : \"none\" }} >\n\n                <Table>\n                    <TableRow>\n                        <TableHead>\n                            <TableCell>\n                                <Typography>\n                                    REPORT ON {new Date(dateValue).toLocaleDateString()}\n                                </Typography>\n                            </TableCell>\n                        </TableHead>\n                    </TableRow>\n\n\n\n                    {report.map((p, key) => {\n                        return (\n                            <TableRow key={key} >\n                                <TableCell>\n                                    <p>{p.Name}</p>\n                                </TableCell>\n\n\n                                <TableCell>\n                                    <Select value={p.Type}\n                                        onChange={(event) => {\n                                            const Type = event.target.value;\n                                            setOfferingReport((currentPeople) => currentPeople.map((x, l) => l === key ? {\n                                                ...x,\n                                                Type\n                                            } : x));\n                                            console.log(JSON.stringify(report), \"VAL\")\n                                            console.log(JSON.stringify(denominationsAndTotals), \"VAL1\")\n\n                                        }} >\n                                        {arrOfferingTypes.map((val, key) => {\n                                            return (\n                                                <MenuItem\n                                                    value={val.value}\n                                                    key={key}\n                                                >\n                                                    {val.name}\n                                                </MenuItem>\n                                            )\n                                        })}\n                                    </Select>\n                                </TableCell>\n                                <TableCell><TextField onChange={(event) => {\n                                    const Am = event.target.value;\n                                    let patt = /[^0-9]/g;\n                                    const Amount = parseFloat(Am.replace(patt, ''));\n                                    setOfferingReport((currentPeople) => currentPeople.map((x, l) => l === key ? {\n                                        ...x,\n                                        Amount\n                                    } : x));\n                                }}\n                                    value={p.Amount}\n                                    type=\"number\"\n                                    placeholder=\"Enter Amount\" /></TableCell>\n                                <TableCell>\n                                    <IconButton\n                                        style={{ border: \"none\", cursor: \"pointer\" }}\n                                        onClick={\n                                            () => {\n\n                                                deleteRow(p.Name, p.Type, key);\n\n                                            }\n                                        }>\n                                        <DeleteOutlineIcon />\n                                    </IconButton>\n                                </TableCell>\n\n                            </TableRow>\n                        )\n                    })}\n\n\n                    <TableRow>\n\n                        <TableCell>\n                            <IconButton\n                                style={{ border: \"none\", cursor: \"pointer\" }}\n                                onClick={() => {\n                                    setclick(click + 1);\n\n                                }}\n                            >\n                                <AddCircleOutline />\n                            </IconButton>\n                        </TableCell>\n\n                    </TableRow>\n                    <TableRow style={{ display: click === 0 ? \"none\" : \"\" }} >\n                        <TableCell>\n                            <Autocomplete\n                                options={names}\n                                value={tempname}\n                                onChange={(e, v) => {\n                                    settempname(v)\n                                }}\n                                renderInput={(params) =>\n                                    <TextField\n                                        {...params}\n                                        placeholder=\"Enter Name\"\n                                        onChange={({ target }) => {\n                                            settempname(target.value)\n                                        }}\n                                    />\n                                }\n                            />\n\n\n                        </TableCell>\n                        <TableCell>\n                            <Select\n                                value={temptype}\n                                onChange={(event) => {\n                                    const Type = event.target.value;\n                                    settemptype(Type);\n\n                                }} >\n                                {arrOfferingTypes.map((val, key) => {\n                                    return (\n                                        <MenuItem\n                                            key={key}\n                                            value={val.value}\n                                        >\n                                            {val.name}\n                                        </MenuItem>\n                                    )\n                                })}\n                            </Select>\n\n                        </TableCell>\n                        <TableCell>\n                            <TextField\n                                onChange={(event) => {\n                                    const Am = event.target.value;\n                                    let patt = /[^0-9]/g;\n                                    const Amount = parseFloat(Am.replace(patt, ''));\n                                    settempamount(Amount);\n                                }}\n                                value={tempamount}\n                                type=\"number\"\n                                placeholder=\"Enter Amount\" />\n                        </TableCell>\n                        <TableCell>\n                            <Button\n                                onClick={() => {\n                                    if (tempname !== '' && temptype !== '') {\n                                        addnew();\n                                    }\n                                    else {\n                                        setNotify({\n                                            ...notify,\n                                            isOpen: true,\n                                            message: \"Input all required\"\n                                        })\n                                    }\n\n\n                                }}\n                            >\n                                Confirm Adding\n                            </Button>\n                        </TableCell>\n\n                    </TableRow>\n\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell>\n                            <Typography>\n                                Church Offering\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            {denominationsAndTotals[0]['ChurchOffering']}\n                        </TableCell>\n\n                    </TableRow>\n\n\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell>\n                            <Typography>\n                                Total\n                            </Typography>\n                        </TableCell>\n                        <TableCell>\n                            {Total}\n                        </TableCell>\n\n                    </TableRow>\n\n\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell>\n                            Grand Total\n                        </TableCell>\n                        <TableCell>\n                            {denominationsAndTotals[0]['GrandTotal']}\n                        </TableCell>\n\n                    </TableRow>\n\n\n\n                </Table>\n\n\n\n                <Grid>\n\n                    {\n                        denoTypes.map((val, key) => {\n                            let name = val.name\n                            return (\n                                <Grid\n                                    item\n                                    container\n                                    key={key}\n                                    direction={\"row\"}\n                                    alignItems={\"center\"}\n                                    margin={2}\n                                >\n                                    <Typography>\n                                        {val.value} x\n                                    </Typography>\n                                    <TextField\n                                        value={denominationsAndTotals[0][name]}\n                                        onChange={(e) => {\n                                            setDeno(e.target.value, name).then(() => {\n                                                let grandTotal = (1 * denominationsAndTotals[0]['One']) + (2 * denominationsAndTotals[0]['Two']) + (5 * denominationsAndTotals[0]['Five']) + (10 * denominationsAndTotals[0]['Ten']) + (20 * denominationsAndTotals[0]['Twenty']) + (50 * denominationsAndTotals[0]['Fifty']) + (100 * denominationsAndTotals[0]['Hundreds']) + (200 * denominationsAndTotals[0]['TwoHundreds']) + (500 * denominationsAndTotals[0]['FiveHundreds']) + (2000 * denominationsAndTotals[0]['TwoThousands']);\n                                                // let grandTotal = (val.value*(isNaN(parseFloat(valueOfinput)?0:parseFloat(valueOfinput))))+parseFloat(denominationsAndTotals[0]['GrandTotal']);\n\n                                                setDenominationsandTotals([...denominationsAndTotals], denominationsAndTotals[0]['GrandTotal'] = grandTotal);\n                                            })\n\n                                            // setDenominationsandTotals([...denominationsAndTotals,{GrandTotal:n}]);\n                                        }}\n                                    />\n                                    <Typography>\n                                        ={val.value * (isNaN(parseFloat(denominationsAndTotals[0][name])) ? 0 : parseFloat(denominationsAndTotals[0][name]))}\n                                    </Typography>\n                                </Grid>\n                            )\n                        })\n                    }\n\n                    <Button\n                        onClick={() => { confirm() }}\n                        variant=\"contained\"\n                    >\n                        Confirm\n                    </Button>\n                </Grid>\n\n            </Grid>\n\n        </Grid>\n    )\n}\n\nexport default Editaccounting;","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Constants.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Fetchaccountingdetails.js",["468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492"],"import React, { useEffect, useRef, useState } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport { Accordion, AccordionDetails, AccordionSummary, Alert, Autocomplete, Button, Grid, MenuItem, Select, Table, TableCell, TableHead, TableRow, TextField, Typography } from '@mui/material';\nimport { url } from '../../Constants';\nimport { CFormInput, CTable, CTableBody, CTableDataCell, CTableFoot, CTableHead, CTableHeaderCell, CTableRow, CAlert } from '@coreui/react';\nimport { AlertMessage } from '../Support/AlertMessage';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport { Controller, useForm } from 'react-hook-form';\nimport { CDatePicker } from '@coreui/react-pro';\nimport { Datepicker } from '../Support/Datepicker';\nimport { SelectComp } from '../Support/SelectComp';\nimport { toDate } from 'date-fns';\n\n\n\nconst Fetchaccountingdetails = () => {\n  const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n  const [offeringtype, setofferingtype] = useState();\n  const [fromdate, setfromdate] = useState();\n  const [namelist, setnamelist] = useState([]);\n  const [name, setname] = useState();\n  const [todate, settodate] = useState();\n  const [searchbynameobj, setsearchbynameobj] = useState([]);\n  const [searchbydateobj, setsearchbydateobj] = useState([]);\n  const [objoftotals, setsobjoftotals] = useState([]);\n  const [display1, setdisplay1] = useState('none');\n  const [display2, setdisplay2] = useState('none');\n  const [display3, setdisplay3] = useState('none');\n  const [namearray, setnamearray] = useState([]);\n  const printref = useRef();\n\n  const offeringTypes = [\n    { \"name\": \"Select\", \"value\": \"Select\" },\n    { \"name\": \"Tithe\", \"value\": \"Tithe\" },\n    { \"name\": \"Offering\", \"value\": \"Offering\" },\n    { \"name\": \"Missionary\", \"value\": \"Missionary\" },\n    { \"name\": \"Special Offering\", \"value\": \"Special Offering\" },\n    { \"name\": \"Baptism Offering\", \"value\": \"Baptism Offering\" },\n    { \"name\": \"Birthday Offering\", \"value\": \"Birthday Offering\" },\n    { \"name\": \"Wedding Offering\", \"value\": \"Wedding Offering\" },\n    { \"name\": \"Child Dedication Offering\", \"value\": \"Child Dedication Offering\" },\n    { \"name\": \"Committed Offering\", \"value\": \"Committed Offering\" },\n    { \"name\": \"Building Fund\", \"value\": \"Building Fund\" }\n  ]\n\n  let flag = 0;\n\n  let count = 0;\n\n  const submitbyname = () => {\n    if (fromdate !== undefined && todate !== undefined) {\n      fetch(`${url}/accounting-submitbyname.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n\n        },\n        body: JSON.stringify({\n          name: name,\n          fromdate: fromdate,\n          todate: todate\n\n        })\n      })\n        .then(res => res.json())\n        .then((result) => {\n          if (result !== \"No matches found on Record\") {\n            setNotify({\n              ...notify,\n              message:result\n            })\n            console.log(result,\"RES\")\n            // setsearchbynameobj(result);\n            // setdisplay1(\"block\");\n\n          } else {\n            setdisplay1(\"none\");\n            setNotify({\n              isOpen: true,\n              message: result,\n              variant: \"filled\",\n              severity: \"error\"\n            })\n\n\n          }\n        }).catch((error) => {\n          console.error(error);\n        });\n\n    }\n\n\n    else {\n      setNotify({\n        isOpen: true,\n        message: \"Input required\",\n        variant: \"filled\",\n        severity: \"error\"\n      })\n    }\n  }\n\n  const submitbydate = () => {\n    if (fromdate !== undefined && todate !== undefined) {\n      fetch(`${url}/accounting-submitbydate.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n\n        },\n        body: JSON.stringify({\n          fromdate: fromdate,\n          todate: todate\n\n        })\n      })\n        .then(res => res.json())\n        .then((result) => {\n          if (result !== \"No matches found on Record\") {\n            setsearchbydateobj(result);\n            setdisplay2(\"block\");\n            result.map((l) => {\n              setnamearray(cp => [...cp, l.Name]);\n            })\n\n          } else {\n            setdisplay2(\"none\");\n            return (\n              setNotify({\n                ...notify,\n                isOpen: true,\n                message: result\n              })\n            )\n\n          }\n        }).catch((error) => {\n          console.error(error);\n        });\n\n    }\n    else {\n      setNotify({\n        isOpen: true,\n        message: \"Input All required\",\n        variant: \"filled\",\n        severity: \"error\"\n      })\n    }\n  }\n\n  const searchapi = () => {\n    fetch(`${url}/searchname.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n\n      },\n    })\n      .then(res => res.json())\n      .then((result) => {\n        setnamelist(result);\n      }).catch((error) => {\n        console.error(error);\n      });\n  }\n  useEffect(() => {\n    searchapi();\n  }, [1])\n\n  const submitbydateglobal = () => {\n    if (fromdate !== undefined && todate !== undefined) {\n      fetch(`${url}/accounting-submitchurchofferings-totals.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n\n        },\n        body: JSON.stringify({\n\n          fromdate: fromdate,\n          todate: todate\n\n        })\n      })\n        .then(res => res.json())\n        .then((result) => {\n          if (result !== \"No matches found on Record\") {\n            setsobjoftotals(result);\n            setdisplay3(\"block\");\n\n          } else {\n            setNotify({\n              isOpen: true,\n              message: result,\n              variant: \"filled\",\n              severity: \"error\"\n            })\n            setdisplay3(\"none\");\n\n          }\n        }).catch((error) => {\n          console.error(error);\n        });\n\n    }\n\n\n    else {\n      setNotify({\n        isOpen: true,\n        message: \"Input All required\",\n        variant: \"filled\",\n        severity: \"error\"\n      })\n    }\n  }\n\n  let titheTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let offeringTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let missionaryTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let specialofferingTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let baptismofferingTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let birthdayofferingTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let weddingofferingTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let childdedicationofferingTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let committedofferingTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let buildingfundTotalofp = searchbynameobj.reduce((accumulator, item) => item.Type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n\n\n\n  let titheTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let offeringTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let missionaryTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let specialofferingTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let baptismofferingTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let birthdayofferingTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let weddingofferingTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let childdedicationofferingTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let committedofferingTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let buildingfundTotal = searchbydateobj.reduce((accumulator, item) => item.Type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let Total = isNaN(searchbydateobj.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : searchbydateobj.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n\n  let grandTotal = (1 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.One), 0)) + (2 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Two), 0)) + (5 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Five), 0)) + (10 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Ten), 0)) + (20 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Twenty), 0)) + (50 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Fifty), 0)) + (100 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Hundreds), 0)) + (200 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.TwoHundreds), 0)) + (500 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.FiveHundreds), 0)) + (2000 * objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.TwoThousands), 0));\n  const churchOffering = grandTotal - Total;\n\n  return (\n    <Grid style={{ display: 'grid', justifyContent: 'center', marginTop: '15px' }} >\n      <AlertMessage\n        notify={notify}\n        setNotify={setNotify}\n      />\n      <Accordion>\n\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography\n            variant='subtitle2'\n          >Name</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n\n          <CFormInput placeholder=\"Enter Name\"\n            list=\"namelist\"\n            value={name}\n            style={{\n              width: 250,\n              margin: 2\n            }}\n            onChange={(event) => {\n              const str = event.target.value.split(' ');\n              for (let i = 0; i < str.length; i++) {\n\n                str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n              }\n\n              const Name = str.join(' ');\n\n              setname(Name);\n            }}\n          />\n          <datalist style={{ backgroundColor: \"black\" }} id=\"namelist\">\n            {namelist.map((k, key) => {\n              return (\n                <option key={key} >{k}</option>\n              )\n            })}\n          </datalist>\n          <Grid>\n            <Datepicker\n              label='From Date'\n              value={fromdate}\n              setValue={setfromdate}\n            />\n            <Datepicker\n              label='To Date'\n              value={todate}\n              setValue={settodate}\n            />\n          </Grid>\n          <Grid>\n            <SelectComp\n              setValue={setofferingtype}\n              list={offeringTypes}\n            />\n            {/* <Select\n              onChange={(event) => setofferingtype(event.target.value)}\n              defaultValue=\"\"\n              variant='outlined'\n              size='small'\n              style={{\n                marginTop: 15,\n                marginBottom: 15\n              }}\n            >\n              {offeringTypes.map((types,key)=>{\n                return(\n                  <MenuItem value={types.value} >{types.name}</MenuItem>\n                )\n              })}\n            </Select> */}\n          </Grid>\n          <Button\n            variant='contained'\n            onClick={() => submitbyname()}\n          > Submit\n          </Button>\n\n\n\n\n          <Grid style={{ display: display1 }}>\n            <CTable >\n              <CTableHead>\n                <CTableHeaderCell>Name</CTableHeaderCell>\n                <CTableHeaderCell>Type Of Offering</CTableHeaderCell>\n                <CTableHeaderCell>Amount</CTableHeaderCell>\n                <CTableHeaderCell>Date</CTableHeaderCell>\n              </CTableHead>\n              <CTableBody>\n                {\n                  searchbynameobj !== '' ? searchbynameobj.map(\n                    (k) => {\n\n                      if (k.Type === offeringtype) {\n                        return (\n                          <CTableRow>\n                            <CTableDataCell>\n                              {k.Name}\n                            </CTableDataCell>\n                            <CTableDataCell>\n                              {k.Type}\n                            </CTableDataCell>\n                            <CTableDataCell>\n                              {k.Amount}\n                            </CTableDataCell>\n                            <CTableDataCell>\n                              {new Date(k.Date).toLocaleDateString()}\n                            </CTableDataCell>\n                          </CTableRow>\n                        )\n\n                      }\n                      else {\n                        return (\n                          <Grid>\n\n                          </Grid>\n                        )\n                      }\n                    }\n                  ) : ''\n                }\n              </CTableBody>\n            </CTable>\n\n            <Typography\n              fontStyle={'italic'}\n              fontWeight={900}\n            >{offeringtype} Total of {name}\n              from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}\n              : {offeringtype === \"Tithe\" ? titheTotalofp : offeringtype === \"Offering\" ? offeringTotalofp : offeringtype === \"Missionary\" ? missionaryTotalofp : offeringtype === \"Special Offering\" ? specialofferingTotalofp : offeringtype === \"Baptism Offering\" ? baptismofferingTotalofp : offeringtype === \"Birthday Offering\" ? birthdayofferingTotalofp : offeringtype === \"Wedding Offering\" ? weddingofferingTotalofp : offeringtype === \"Child Dedication Offering\" ? childdedicationofferingTotalofp : offeringtype === \"Committed Offering\" ? committedofferingTotalofp : offeringtype === \"Building Fund\" ? buildingfundTotalofp : 0}\n            </Typography>\n          </Grid>\n        </AccordionDetails>\n\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography\n            variant='subtitle2'\n          >Date</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Datepicker\n            label='From Date'\n            value={fromdate}\n            setValue={setfromdate}\n          />\n          <Datepicker\n            label='To Date'\n            value={todate}\n            setValue={settodate}\n          />\n          <SelectComp\n            setValue={setofferingtype}\n            list={offeringTypes}\n          />\n          {/* <Select onChange={(event) => setofferingtype(event.target.value)} >\n            {offeringTypes.map((types,key)=>{\n              return(\n                <MenuItem value={types.value} >{types.name}</MenuItem>\n              )\n            })}\n          </Select> */}\n          <Button className=\"btn2\" onClick={() => submitbydate()} >Submit</Button>\n\n          <Grid style={{ display: display2 }}>\n\n            <CTable>\n              <CTableHead>\n                <CTableHeaderCell>Name</CTableHeaderCell>\n                <CTableHeaderCell>Amount</CTableHeaderCell>\n                <CTableHeaderCell>Date</CTableHeaderCell>\n                <CTableHeaderCell>Type</CTableHeaderCell>\n              </CTableHead>\n              <CTableBody>\n                {searchbydateobj.map((k) => {\n                  if (offeringtype === \"default\") {\n                    return (\n                      <CTableRow>\n                        <CTableDataCell>{k.Name}</CTableDataCell>\n                        <CTableDataCell>{k.Amount}</CTableDataCell>\n                        <CTableDataCell>{k.Date}</CTableDataCell>\n                        <CTableDataCell>{k.Type}</CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                  else if (k.Type === offeringtype) {\n\n                    return (\n                      <CTableRow>\n                        <CTableDataCell>{k.Name}</CTableDataCell>\n                        <CTableDataCell>{k.Amount}</CTableDataCell>\n                        <CTableDataCell>{k.Date}</CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                  else {\n                    return (\n                      <Grid>\n\n                      </Grid>\n                    )\n                  }\n                })}\n              </CTableBody>\n            </CTable>\n            <Typography>\n              Tithe Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {titheTotal}\n            </Typography>\n            <Typography>\n              Offering Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {offeringTotal}\n            </Typography>\n            <Typography>\n              Missionary Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {missionaryTotal}\n            </Typography>\n            <Typography>\n              Special offering Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {specialofferingTotal}\n            </Typography>\n            <Typography>\n              Baptism offering Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()}  to {new Date(todate ? todate : '').toLocaleDateString()}: {baptismofferingTotal}\n            </Typography>\n            <Typography>\n              Birthday Offering Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {birthdayofferingTotal}\n            </Typography>\n            <Typography>\n              Wedding offering Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {weddingofferingTotal}\n            </Typography>\n            <Typography>\n              Child Dedication offering Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {childdedicationofferingTotal}\n            </Typography>\n            <Typography>\n              Committed offering Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {committedofferingTotal}\n            </Typography>\n            <Typography>\n              Building Fund offering Total from {new Date(fromdate ? fromdate : '').toLocaleDateString()} to {new Date(todate ? todate : '').toLocaleDateString()}: {buildingfundTotal}\n            </Typography>\n          </Grid>\n        </AccordionDetails>\n\n\n\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography\n            variant='subtitle2'\n          >Church Offerings</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Datepicker\n            value={fromdate}\n            label='From Date'\n            setValue={setfromdate}\n          />\n          <Datepicker\n            value={todate}\n            label='To Date'\n            setValue={settodate}\n          />\n          <Button className=\"btn2\" onClick={() => submitbydateglobal()}>Submit</Button>\n\n          {objoftotals.map(\n            (k) => {\n              if (k.ChurchOffering !== \"0\") {\n                flag = 1;\n                return (\n                  <Typography>Church Offering on {k.Date} : Rs.{k.ChurchOffering} </Typography>\n                )\n              } else {\n                return (\n                  <Grid>\n                    {setNotify({\n                      ...notify,\n                      message: 'No values found'\n                    })}\n                  </Grid>\n                )\n              }\n\n            }\n          )}\n        </AccordionDetails>\n\n      </Accordion>\n      <Accordion >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography\n            variant='subtitle2'\n          >Find Denominations</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Datepicker\n            label='From Date'\n            value={fromdate}\n            setValue={setfromdate}\n          />\n          <Datepicker\n            value={todate}\n            label='To Date'\n            setValue={settodate}\n          />\n          <Button className=\"btn2\" onClick={() => { submitbydateglobal() }}>Submit</Button>\n\n          <CTable style={{ display: display3 }} >\n            <CTableHead>\n              <CTableRow>\n                <CTableHeaderCell>S.No</CTableHeaderCell>\n                <CTableHeaderCell>2000s</CTableHeaderCell>\n                <CTableHeaderCell>500s</CTableHeaderCell>\n                <CTableHeaderCell>200s</CTableHeaderCell>\n                <CTableHeaderCell>100s</CTableHeaderCell>\n                <CTableHeaderCell>50s</CTableHeaderCell>\n                <CTableHeaderCell>20s</CTableHeaderCell>\n                <CTableHeaderCell>10s</CTableHeaderCell>\n                <CTableHeaderCell>5s</CTableHeaderCell>\n                <CTableHeaderCell>2s</CTableHeaderCell>\n                <CTableHeaderCell>1s</CTableHeaderCell>\n                <CTableHeaderCell>Date</CTableHeaderCell>\n              </CTableRow>\n            </CTableHead>\n            <CTableBody>\n\n              {\n\n                objoftotals.map(\n                  (k) => {\n                    count = count + 1;\n                    return (\n                      <CTableRow key={count}>\n                        <CTableDataCell>{count}</CTableDataCell>\n                        <CTableDataCell>{k.TwoThousands}</CTableDataCell>\n                        <CTableDataCell>{k.FiveHundreds}</CTableDataCell>\n                        <CTableDataCell>{k.TwoHundreds}</CTableDataCell>\n                        <CTableDataCell>{k.Hundreds}</CTableDataCell>\n                        <CTableDataCell>{k.Fifty}</CTableDataCell>\n                        <CTableDataCell>{k.Twenty}</CTableDataCell>\n                        <CTableDataCell>{k.Ten}</CTableDataCell>\n                        <CTableDataCell>{k.Five}</CTableDataCell>\n                        <CTableDataCell>{k.Two}</CTableDataCell>\n                        <CTableDataCell>{k.One}</CTableDataCell>\n                        <CTableDataCell>{k.Date}</CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                )}\n\n            </CTableBody>\n            <CTableFoot>\n              <CTableRow>\n                <CTableDataCell>Total</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.TwoThousands), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.FiveHundreds), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.TwoHundreds), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Hundreds), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Fifty), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Twenty), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Ten), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Five), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Two), 0)}</CTableDataCell>\n                <CTableDataCell>{objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.One), 0)}</CTableDataCell>\n              </CTableRow>\n            </CTableFoot>\n          </CTable>\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography\n            variant='subtitle2'\n          >Full Record</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Grid>\n            <Datepicker\n              label='From Date'\n              value={fromdate}\n              setValue={setfromdate}\n            />\n            <Datepicker\n              label='To Date'\n              value={todate}\n              setValue={settodate}\n            />\n            <Button className=\"btn2\" onClick={() => { submitbydate(); submitbydateglobal() }}>Submit</Button>\n          </Grid>\n          <Grid ref={printref}\n            style={{\n              margin: 20\n            }}\n          >\n            <CTable >\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell colSpan=\"11\" >\n                    JEHOVAH NISSI AG CHURCH ACCOUNTS REPORT\n                  </CTableHeaderCell>\n                </CTableRow>\n                <CTableRow>\n                  <CTableHeaderCell colSpan=\"11\" >\n                    REPORT FROM {new Date(fromdate ? fromdate : '').toLocaleDateString()} TO {new Date(todate ? todate : '').toLocaleDateString()}\n                  </CTableHeaderCell>\n                </CTableRow>\n\n                <CTableRow>\n                  <CTableHeaderCell>Name</CTableHeaderCell>\n                  <CTableHeaderCell>Tithe</CTableHeaderCell>\n                  <CTableHeaderCell>Offering</CTableHeaderCell>\n                  <CTableHeaderCell>Missionary</CTableHeaderCell>\n                  <CTableHeaderCell>Special Offering</CTableHeaderCell>\n                  <CTableHeaderCell>Baptism Offering</CTableHeaderCell>\n                  <CTableHeaderCell>Birthday Offering</CTableHeaderCell>\n                  <CTableHeaderCell>Wedding Offering</CTableHeaderCell>\n                  <CTableHeaderCell>Child Dedication Offering</CTableHeaderCell>\n                  <CTableHeaderCell>Committed Offering</CTableHeaderCell>\n                  <CTableHeaderCell>Building Fund</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>\n\n                {[...new Set(namearray)].map((k, key) => {\n                  return (\n                    <CTableRow key={key} >\n                      <CTableDataCell>{k}</CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Tithe\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Offering\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Missionary\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Special Offering\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Baptism Offering\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Birthday Offering\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Wedding Offering\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Child Dedication Offering\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Committed Offering\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n\n                        })}\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        {searchbydateobj.map((l) => {\n                          if (l.Name === k && l.Type === \"Building Fund\") {\n                            return (\n                              <p>\n                                {l.Amount}\n                              </p>\n                            )\n                          }\n\n                        })}\n                      </CTableDataCell>\n\n\n                    </CTableRow>\n                  )\n                })}\n                <CTableRow>\n                  <CTableHeaderCell>Total</CTableHeaderCell>\n                  <CTableDataCell>{titheTotal}</CTableDataCell>\n                  <CTableDataCell>{offeringTotal}</CTableDataCell>\n                  <CTableDataCell>{missionaryTotal}</CTableDataCell>\n                  <CTableDataCell>{specialofferingTotal}</CTableDataCell>\n                  <CTableDataCell>{baptismofferingTotal}</CTableDataCell>\n                  <CTableDataCell>{birthdayofferingTotal}</CTableDataCell>\n                  <CTableDataCell>{weddingofferingTotal}</CTableDataCell>\n                  <CTableDataCell>{childdedicationofferingTotal}</CTableDataCell>\n                  <CTableDataCell>{committedofferingTotal}</CTableDataCell>\n                  <CTableDataCell>{buildingfundTotal}</CTableDataCell>\n                </CTableRow>\n                <CTableRow>\n                  <CTableDataCell colSpan=\"7\"></CTableDataCell>\n                  <CTableHeaderCell colSpan=\"2\">Church Offering</CTableHeaderCell>\n                  <CTableDataCell colSpan=\"2\">{churchOffering}</CTableDataCell></CTableRow>\n                <CTableRow>\n                  <CTableDataCell colSpan=\"7\"></CTableDataCell>\n                  <CTableHeaderCell colSpan=\"2\">Grand Total</CTableHeaderCell><CTableDataCell colSpan=\"2\">{grandTotal}</CTableDataCell></CTableRow>\n              </CTableBody>\n            </CTable>\n\n            <Grid className=\"deno\">\n              <Table\n                size='small'\n              >\n                <TableHead>\n                  <TableRow>\n                    <TableCell colSpan=\"2\" >DENOMINATIONS</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableRow> <TableCell>2000 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.TwoThousands), 0)} = {2000 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.TwoThousands), 0))} </TableCell></TableRow>\n                <TableRow><TableCell>500 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.FiveHundreds), 0)}=  {500 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.FiveHundreds), 0))} </TableCell></TableRow>\n                <TableRow><TableCell>200 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.TwoHundreds), 0)} = {200 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.TwoHundreds), 0))} </TableCell></TableRow>\n                <TableRow><TableCell>100 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Hundreds), 0)} =  {100 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Hundreds), 0))} </TableCell></TableRow>\n                <TableRow><TableCell>50 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Fifty), 0)}= {50 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Fifty), 0))} </TableCell></TableRow>\n                <TableRow><TableCell>20 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Twenty), 0)} = {20 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Twenty), 0))} </TableCell></TableRow>\n                <TableRow><TableCell>10 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Ten), 0)} = {10 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Ten), 0))} </TableCell></TableRow>\n                <TableRow><TableCell>5 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Five), 0)}= {5 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Five), 0))}</TableCell> </TableRow>\n                <TableRow><TableCell>2 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Two), 0)}= {2 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.Two), 0))} </TableCell></TableRow>\n                <TableRow><TableCell>1 x {objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.One), 0)}= {1 * (objoftotals.reduce((accumulator, item) => accumulator + parseFloat(item.One), 0))}</TableCell> </TableRow>\n\n              </Table>\n            </Grid>\n\n          </Grid>\n\n\n          <Button\n            variant='contained'\n            onClick={useReactToPrint({\n              content: () => printref.current, documentTitle: new Date(fromdate ? fromdate : '').toLocaleDateString() + \" to \" + new Date(todate ? todate : '').toLocaleDateString()\n            })} >Save as PDF</Button>\n\n        </AccordionDetails>\n      </Accordion>\n\n    </Grid>\n  )\n\n}\nexport default Fetchaccountingdetails;","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Accounting.js",["493","494","495","496"],"import { Grid, TextField, Select, MenuItem, Button, IconButton, Typography, Table, TableBody, TableCell, TableRow, Autocomplete } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { url } from \"../Constants\";\nimport { AlertMessage } from \"./Support/AlertMessage\";\nimport { Datepicker } from \"./Support/Datepicker\";\n\n\n\nconst Accounting = (props) => {\n  const {setLoading} = props;\n  const [people, setPeople] = useState([{ id: 1, Name: '', type: '', Amount: '' }]);\n  const [count, setCount] = useState(2);\n  const [names, setnames] = useState([]);\n  const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n\n  const [searchterm, setsearchterm] = useState();\n\n  const arrOfferingTypes = [\n    { \"name\": \"Select\", \"value\": \"\" },\n    { \"name\": \"Tithe\", \"value\": \"Tithe\" },\n    { \"name\": \"Offering\", \"value\": \"Offering\" },\n    { \"name\": \"Missionary\", \"value\": \"Missionary\" },\n    { \"name\": \"Special Offering\", \"value\": \"Special Offering\" },\n    { \"name\": \"Baptism Offering\", \"value\": \"Baptism Offering\" },\n    { \"name\": \"Birthday Offering\", \"value\": \"Birthday Offering\" },\n    { \"name\": \"Wedding Offering\", \"value\": \"Wedding Offering\" },\n    { \"name\": \"Child Dedication Offering\", \"value\": \"Child Dedication Offering\" },\n    { \"name\": \"Committed Offering\", \"value\": \"Committed Offering\" },\n    { \"name\": \"Building Fund\", \"value\": \"Building Fund\" }\n  ]\n\n  const results = !searchterm ? names : names.filter(person => person.toLowerCase().includes(searchterm.toLocaleLowerCase()));\n\n  const [dateofofferings, setdateofofferings] = useState();\n\n  const [offeringsAsObject, setOfferings] = useState(\n    [\n      { \"price\": 2000, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 500, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 200, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 100, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 50, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 20, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 10, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 5, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 2, \"cnt\": 0, \"tot\": 0 },\n      { \"price\": 1, \"cnt\": 0, \"tot\": 0 },\n    ]\n  );\n\n  let name = people.map((k) => k.Name);\n\n  let type = people.map((k) => k.type);\n\n  let amount = people.map((k) => k.Amount);\n\n\n\n\n\n  let today = new Date();\n\n  let dd = today.getDate();\n  dd = dd < 10 ? \"0\" + dd : dd;\n\n\n  let mm = (today.getMonth() + 1) > 12 ? today.getMonth() : today.getMonth() + 1;\n  mm = mm < 10 ? \"0\" + mm : mm;\n  if (dd === \"00\") {\n    dd = 31;\n    mm = mm - 1;\n  }\n  let yyyy = today.getFullYear();\n\n  today = yyyy + \"-\" + mm + \"-\" + dd;\n\n  let grandTotal = offeringsAsObject.reduce((accumulator, item) => accumulator + item.tot, 0);\n  grandTotal = isNaN(grandTotal) ? 0 : grandTotal;\n\n  let Total = isNaN(people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0)) ? 0 : people.reduce((accumulator, item) => isNaN(accumulator) ? 0 : accumulator + parseFloat(item.Amount), 0);\n\n  const churchOffering = isNaN(grandTotal - Total) ? 0 : grandTotal - Total;\n\n\n\n  let titheTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Tithe' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let offeringTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let missionaryTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Missionary' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let specialofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Special Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let baptismofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Baptism Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let birthdayofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Birthday Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let weddingofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Wedding Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let childdedicationofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Child Dedication Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let committedofferingTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Committed Offering' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let buildingfundTotal = isNaN(people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0)) ? 0 : people.reduce((accumulator, item) => item.type === 'Building Fund' ? accumulator + parseFloat(item.Amount) : accumulator, 0);\n\n  let arrOfTotals = [\n    { \"name\": \"Total\", \"value\": Total },\n    { \"name\": \"Tithe Total\", \"value\": titheTotal },\n    { \"name\": \"Offering Total\", \"value\": offeringTotal },\n    { \"name\": \"Special Offering Total\", \"value\": specialofferingTotal },\n    { \"name\": \"Missionary Total\", \"value\": missionaryTotal },\n    { \"name\": \"Church Offering\", \"value\": churchOffering },\n    { \"name\": \"Grand Total\", \"value\": grandTotal }\n  ]\n\n  const submit = () => {\n    if (name[0] && dateofofferings && (amount !== 0) && churchOffering >= 0) {\n      setLoading(true);\n      fetch(`${url}/accounting.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n\n        },\n        body: JSON.stringify({\n          name: name,\n          type: type,\n          amount: amount,\n          dateofofferings: dateofofferings,\n          churchOffering: churchOffering,\n          titheTotal: titheTotal,\n          grandTotal: grandTotal,\n          offeringTotal: offeringTotal,\n          missionaryTotal: missionaryTotal,\n          specialofferingTotal: specialofferingTotal,\n          buildingfundTotal: buildingfundTotal,\n          baptismofferingTotal: baptismofferingTotal,\n          birthdayofferingTotal: birthdayofferingTotal,\n          weddingofferingTotal: weddingofferingTotal,\n          childdedicationofferingTotal: childdedicationofferingTotal,\n          committedofferingTotal: committedofferingTotal,\n          twothousands: offeringsAsObject[0].cnt,\n          twohundreds: offeringsAsObject[2].cnt,\n          fivehundreds: offeringsAsObject[1].cnt,\n          hundreds: offeringsAsObject[3].cnt,\n          fiftys: offeringsAsObject[4].cnt,\n          twentys: offeringsAsObject[5].cnt,\n          tens: offeringsAsObject[6].cnt,\n          fives: offeringsAsObject[7].cnt,\n          twos: offeringsAsObject[8].cnt,\n          ones: offeringsAsObject[9].cnt\n\n        })\n      })\n        .then(res => res.json())\n        .then((result) => {\n          setLoading(false);\n          setNotify({\n            isOpen: true,\n            message: result,\n            severity: 'error',\n            variant: 'filled'\n          })\n\n        }).catch((error) => {\n          console.error(error);\n        });\n\n    }\n\n\n    else {\n      setNotify({\n        ...notify,\n        isOpen: true,\n        message: \"Input required\",\n        severity: \"error\"\n      })\n    }\n  }\n\n\n  const searchapi = () => {\n    setLoading(true);\n    fetch(`${url}/searchname.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n\n      },\n    })\n      .then(res => res.json())\n      .then((result) => {\n        setLoading(false);\n        setnames(result);\n      }).catch((error) => {\n        console.error(error);\n      });\n  }\n  useEffect(() => {\n    searchapi();\n  }, [1])\n\n\n  return (\n    <Grid>\n\n      <AlertMessage\n        notify={notify}\n        setNotify={setNotify}\n      />\n      <Grid\n        container\n        justifyContent={\"space-evenly\"}\n        direction={\"row\"}\n      >\n        <Grid>\n          <Table\n            size=\"small\"\n          >\n            {people.map((p) => {\n              return (\n                <Grid key={p.id}>\n                  <TableRow>\n                    <TableCell>\n                      <Autocomplete\n                        options={results}\n                        fullWidth={false}\n                        style={{ width: 200 }}\n                        renderInput={params =>\n                          <TextField\n                            {...params}\n                            margin=\"dense\"\n                            size=\"small\"\n                            placeholder=\"Enter Name\"\n                            \n                          />\n                        }\n                        onChange={(e,event) => {\n                          const str = event.target.value.split(' ');\n                          for (let i = 0; i < str.length; i++) {\n\n                            str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                          }\n\n                          const Name = str.join(' ');\n                          setsearchterm(Name);\n                          setPeople((currentPeople) => currentPeople.map(x => x.id === p.id ? {\n                            ...x,\n                            Name\n                          } : x));\n                        }}\n                        value={p.Name}\n                      />\n                    </TableCell>\n                    <TableCell>\n\n                      <Select\n                        size=\"small\"\n                        style={{ width: 200, marginTop: 7 }}\n                        onChange={(event) => {\n                          const type = event.target.value;\n                          setPeople((currentPeople) => currentPeople.map(x => x.id === p.id ? {\n                            ...x,\n                            type\n                          } : x));\n\n                        }}\n                      >\n\n                        {arrOfferingTypes.map((val, key) => {\n                          return (\n                            <MenuItem\n                              key={key}\n                              value={val.value}\n                            >\n                              {val.name}\n                            </MenuItem>\n                          )\n                        })}\n                      </Select>\n                    </TableCell>\n                    <TableCell>\n\n                      <TextField\n                        margin=\"dense\"\n                        size=\"small\"\n                        style={{ width: 200 }}\n                        onChange={(event) => {\n                          const Am = event.target.value;\n                          let patt = /[^0-9]/g;\n                          const Amount = parseFloat(Am.replace(patt, ''));\n                          setPeople((currentPeople) => currentPeople.map(x => x.id === p.id ? {\n                            ...x,\n                            Amount\n                          } : x));\n                        }}\n                        value={p.Amount}\n                        type=\"number\"\n                        placeholder=\"Enter Amount\" />\n                    </TableCell>\n                    <TableCell>\n\n                      <IconButton\n                        style={{ justifySelf: \"center\", alignSelf: \"center\" }}\n                        onClick={\n                          () => {\n                            setPeople(currentPeople => currentPeople.filter(x => x.id !== p.id)); setCount(count - 1)\n                          }\n                        }>\n                        <DeleteOutlineIcon\n                          style={{ justifySelf: \"center\", alignSelf: \"center\" }}\n                        />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                </Grid>\n              )\n\n            })}\n          </Table>\n          <IconButton\n            onClick={() => {\n              setPeople(currentPeople => [...currentPeople, {\n                id: count,\n                Name: '',\n                type: '',\n                Amount: '',\n              }]); setCount(count + 1)\n            }}\n          ><AddCircleOutlineIcon /></IconButton>\n          <Table>\n            <TableBody>\n              {arrOfTotals.map((val, key) => {\n                return (\n                  <TableRow\n                    key={key}\n                  >\n                    <TableCell>{val.name}</TableCell>\n                    <TableCell>{val.value}</TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n          <Button\n            variant=\"contained\"\n            onClick={submit}\n          >\n            Submit\n          </Button>\n        </Grid>\n        <Grid>\n          <Datepicker\n            value={dateofofferings}\n            setValue={setdateofofferings}\n            label='Set Date'\n          />\n          <Button\n            onClick={() => setdateofofferings(today)}\n          >\n            Click if date is todays date\n          </Button>\n          <Table\n            size=\"small\"\n          >\n            <TableBody>\n              {offeringsAsObject.map((k, key) => {\n                return (\n                  <TableRow\n                    key={key}\n                    direction={\"row\"}\n                    justifyItems={\"center\"}\n                    alignItems={\"center\"}\n                  >\n                    <TableCell>\n                      <Typography\n                        margin={3}\n                      >{k.price} x </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <TextField\n                        style={{ width: 100 }}\n                        margin=\"dense\"\n                        size=\"small\"\n                        onChange={(e) => {\n                          let value = e.target.value\n                          setOfferings(cp => cp.map((l, lkey) => lkey === key ?\n                            {\n                              ...l,\n                              cnt: parseInt(value == '' ? 0 : value),\n                              tot: parseInt(value == '' ? 0 : value) * k.price\n                            }\n                            : l))\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography> = {isNaN(k.tot) ? 0 : k.tot}</Typography>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </Grid>\n\n      </Grid>\n    </Grid>\n\n  )\n}\nexport default Accounting;","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Studentattendance.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Churchattendance.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Dataentry.js",["497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521"],"import React, { useEffect, useState } from 'react'\nimport { url } from '../Constants'\nimport { Grid, Button, FormControlLabel, RadioGroup, Radio, Autocomplete, formLabelClasses } from '@mui/material'\nimport { CAlert, CButton, CCol, CForm, CFormFeedback, CFormInput, CFormLabel, CFormSwitch, CFormTextarea } from '@coreui/react'\nimport { AlertMessage } from './Support/AlertMessage'\nimport { AppFooter } from 'src/components'\nimport { DataEntryForms } from './DataEntryForm'\n\n\nconst Dataentry = () => {\n  const [familyheads, setFamilyheads] = useState([])\n  const [validity, setvalidity] = useState(true);\n  const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n\n  const [data, setData] = useState({\n    name: '',\n    dob: '',\n    gender: 'male',\n    weddingdate: '',\n    emailid: '',\n    mobile: '',\n    address: '',\n    familyhead: '',\n    familyid: '',\n    selfid: '',\n    android: false,\n    baptized: false,\n    married: false,\n  })\n\n  let age\n  useEffect(() => {\n\n\n    let yearDifference = 31536000000;\n    age = parseInt(parseInt((new Date().getTime()-new Date(data.dob).getTime())/yearDifference).toString().replace(\"-\",\"\"));\n\n\n    console.log(age);\n  }, [data.dob])\n  \n\n\n  const [validated, setValidated] = useState(false)\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n\n    if (form.checkValidity() == false) {\n      event.preventDefault()\n\n      event.stopPropagation()\n    }\n    else {\n      setValidated(true)\n      addrecords();\n    }\n\n  }\n  \n\n  const addrecords = () => {\n    if (validity) {\n      let Familyid = data.familyid\n      let Selfid = data.selfid\n      let Name = data.name\n      let Dob = data.dob\n      let Age = age\n      let Gender = data.gender\n      let Married = data.married==false?0:data.married;\n      let Weddingdate = data.weddingdate\n      let Emailid = data.emailid\n      let Mobile = data.mobile\n      let Address = data.address\n      let Familyhead = data.familyhead\n      let Baptized = data.baptized==false?0:data.baptized\n      let Android = data.android==false?0:data.android\n\n      fetch(`${url}/member_details.php`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: Name,\n          dob: Dob,\n          age: Age,\n          gender: Gender,\n          married: Married,\n          weddingdate: Weddingdate,\n          emailid: Emailid,\n          mobile: Mobile,\n          address: Address,\n          familyhead: Familyhead,\n          baptized: Baptized,\n          android: Android,\n          familyid: Familyid,\n          selfid: Selfid,\n        }),\n      })\n        .then((res) => res.json())\n        .then((result) => {\n          setNotify({\n            ...notify,\n            isOpen:true,\n            severity:result['status']==1?\"success\":\"error\",\n            message:String(result['message'])\n          });\n          setData({\n            name: '',\n            dob: new Date(),\n            gender: 'male',\n            weddingdate: '',\n            emailid: '',\n            mobile: '',\n            address: '',\n            familyhead: '',\n            familyid: '',\n            selfid: '',\n            android: false,\n            baptized: false,\n            married: false,\n          });\n        })\n        .catch((error) => {\n          console.error(error)\n        })\n    } else {\n      setNotify({\n        ...notify,\n        isOpen:true,\n        message:\"Input all required\"\n      })\n    }\n  }\n\n  const searchfamilyhead = () => {\n    fetch(`${url}/searchfamilyhead.php`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        let filteredresult = [...new Set(result)]\n        setFamilyheads(filteredresult)\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n  }\n  useEffect(() => {\n    searchfamilyhead()\n  }, [])\n\n  return (\n    <DataEntryForms\n    familyheads={familyheads}\n    data={data}\n    notify={notify}\n    setNotify={setNotify}\n    setData={setData}\n    validated={validated}\n    handleSubmit={handleSubmit}\n    />\n  )\n}\n\nexport default Dataentry\n","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/EditData.js",["522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544"],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/YoutubeID.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Inputchurchattendance.js",["545","546","547"],"import { CAlert } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { url } from \"../../Constants\";\nimport { AlertMessage } from \"../Support/AlertMessage\";\n\nconst Inputchurchattendance = () => {\n\n  const [namelist, setnamelist] = useState([]);\n  const [churchattendance, setchurchattendance] = useState([]);\n  const [date, setdate] = useState();\n  const [service, setservice] = useState();\n  const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n\n  const obj = [];\n\n  let today = new Date();\n\n  let dd = today.getDate();\n  dd = dd < 10 ? \"0\" + dd : dd;\n  if (dd === \"00\") {\n    dd = 31;\n    mm = mm - 1;\n  }\n\n  let mm = (today.getMonth() + 1) > 12 ? today.getMonth() : today.getMonth() + 1;\n  mm = mm < 10 ? \"0\" + mm : mm;\n  let yyyy = today.getFullYear();\n\n\n  today = yyyy + \"-\" + mm + \"-\" + dd;\n\n\n  useEffect(() => {\n    fetch(`${url}/searchname.php`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n\n      },\n    })\n      .then(res => res.json())\n      .then((result) => {\n        setnamelist(result);\n      }).catch((error) => {\n        console.error(error);\n      });\n  }, []);\n\n  let i = 0;\n  const count = namelist.length;\n\n  for (i = 0; i < count; i++) {\n    if (namelist[i] !== '') {\n      obj.push({ \"name\": namelist[i], \"present\": false });\n    }\n  }\n\n  useEffect(() => {\n\n\n    setchurchattendance(obj);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [namelist]);\n\n  const submit = () => {\n    if (churchattendance) {\n      fetch(`${url}/church_attendance.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n\n        },\n        body: JSON.stringify({\n          churchattendance: churchattendance,\n          date: date,\n          service: service\n\n\n        })\n      })\n        .then(res => res.json())\n        .then((result) => {\n          setNotify({\n            ...notify,\n            isOpen:true,\n            message:result\n          })\n          window.location.reload();\n        }).catch((error) => {\n          console.error(error);\n        });\n\n    }\n  }\n\n  return (\n\n    <div className=\"church-attendance-body\">\n      <AlertMessage\n        notify={notify}\n        setNotify={setNotify}\n      />\n      <select className=\"sel-inp\" onChange={(event) => setservice(event.target.value)}>\n        <option value=\"FIRST SERVICE\">FIRST SERVICE</option>\n        <option value=\"SECOND SERVICE\">SECOND SERVICE</option>\n        <option value=\"THIRD SERVICE\">THIRD SERVICE</option>\n\n\n      </select>\n      <input className=\"inp\" type=\"date\" onChange={(event) => { setdate(event.target.value) }} ></input>\n      <button className=\"btn\" onClick={() => {\n        setdate(today)\n      }}>Click if Today</button>\n      <p>Date:{date}</p>\n      <table>\n        <thead>\n          <tr><th>Name</th>\n            <th>Present</th>\n            <th>Absent</th></tr>\n        </thead>\n        <tbody>\n          {churchattendance.map((p) => {\n            return (\n              <tr key={p.name} >\n                <td>{p.name}</td>\n                <td ><label className=\"container\"><input\n\n                  onChange={\n                    (event) => {\n                      let temp = true;\n\n                      event.target.value === 'true' ? temp = true : temp = false;\n                      const present = temp;\n                      setchurchattendance((cp) => cp.map(x => x.name === p.name ? {\n                        ...x,\n                        present\n                      } : x))\n                    }} type=\"radio\" name={p.name} value=\"true\" /> <span className=\"fas fa-check present\"></span> </label></td>\n                <td ><label className=\"container\"><input\n                  onChange={\n                    (event) => {\n                      let temp = true;\n                      event.target.value === 'false' ? temp = false : temp = true;\n                      const present = temp;\n                      setchurchattendance((cp) => cp.map(x => x.name === p.name ? {\n                        ...x,\n                        present\n                      } : x))\n                    }}\n                  type=\"radio\" name={p.name} value=\"false\" /> <span className=\"fas fa-times absent\"></span></label> </td>\n              </tr>\n            )\n          })}</tbody>\n        <tfoot></tfoot>\n\n\n      </table>\n\n      <button className=\"btn\" onClick={() => { submit() }}>Submit</button>\n\n    </div>\n  )\n}\n\nexport default Inputchurchattendance;","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Getchurchattendance.js",["548","549","550"],"import { TextField } from '@mui/material';\nimport React, { useState } from 'react';\nimport { url } from '../../Constants';\nimport { AlertMessage } from '../Support/AlertMessage';\n\nconst Getchurchattendance = () => {\n    const [firstField, setfirstField] = useState();\n    const [display1, setdisplay1] = useState(\"none\");\n    const [display2, setdisplay2] = useState(\"none\");\n    const [display3, setdisplay3] = useState(\"block\");\n    const [display4, setdisplay4] = useState(\"none\");\n    const [fromdate, setfromdate] = useState();\n    const [todate, settodate] = useState();\n    const [namelist, setnamelist] = useState([]);\n    const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n    const [service, setservice] = useState(\"FIRST SERVICE\");\n\n    let count = 0;\n\n    let presentcount = 0;\n    let absentcount = 0;\n\n    let today = new Date();\n\n    let dd = today.getDate();\n\n    let mm = (today.getMonth() + 1) > 12 ? today.getMonth() : today.getMonth() + 1;\n\n    let yyyy = today.getFullYear();\n\n    today = yyyy + \"-\" + mm + \"-\" + dd;\n\n    const [present1, isPresent1] = useState(true);\n    const [date, setdate] = useState(today);\n    const [obj, setobj] = useState([]);\n    const [obj1, setobj1] = useState([]);\n\n    const [name, setname] = useState();\n\n    let from = new Date(fromdate);\n    let to = new Date(todate);\n\n    let fromdd = from.getDate();\n    fromdd = fromdd < 10 ? \"0\" + fromdd : fromdd;\n\n\n    let frommm = (from.getMonth() + 1) > 12 ? from.getMonth() : from.getMonth() + 1;\n    frommm = frommm < 10 ? \"0\" + frommm : frommm;\n    if (fromdd === \"00\") {\n        fromdd = 31;\n        frommm = frommm - 1;\n    }\n    let fromyy = from.getFullYear();\n\n    let todd = to.getDate();\n    todd = todd < 10 ? \"0\" + todd : todd;\n\n\n    let tomm = (to.getMonth() + 1) > 12 ? to.getMonth() : to.getMonth() + 1;\n    tomm = tomm < 10 ? \"0\" + tomm : tomm;\n    if (todd === \"00\") {\n        todd = 31;\n        tomm = tomm - 1;\n    }\n    let toyy = to.getFullYear();\n\n    const submit1 = () => {\n        if (date.length !== 0) {\n            fetch(`${url}/searchchurchattbydate.php`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n\n                },\n                body: JSON.stringify({\n                    date: date\n\n                })\n            })\n                .then(res => res.json())\n                .then((result) => {\n                    if (result !== \"No matches found on Record\") {\n                        setobj1(result);\n\n                    }\n                    else {\n                        setobj1([{ \"StudentName\": \"No results found\", \"Present\": 1 }]);\n                        setNotify({\n                            ...notify,\n                            isOpen:true,\n                            message:result\n                        })\n\n\n                    }\n                }).catch((error) => {\n                    console.error(error);\n                });\n\n        }\n\n\n        else {\n            setNotify({\n                ...notify,\n                isOpen:true,\n                message:\"Input All required\"\n            })\n        }\n    }\n\n    const submit = () => {\n        if (fromdate && todate && name) {\n            fetch(`${url}/searchchurchattbyname.php`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n\n                },\n                body: JSON.stringify({\n                    name: name,\n                    fromdate: fromdate,\n                    todate: todate\n\n                })\n            })\n                .then(res => res.json())\n                .then((result) => {\n                    if (result !== \"No matches found on Record\") {\n                        setobj(result);\n                        setdisplay3(\"block\");\n                        setdisplay4(\"block\");\n                    }\n                    else {\n                        setNotify({\n                            ...notify,\n                            isOpen:true,\n                            message:result\n                        })\n                        setdisplay3(\"none\");\n                    }\n                }).catch((error) => {\n                    console.error(error);\n                });\n\n        }\n\n\n        else {\n            setNotify({\n                ...notify,\n                isOpen:true,\n                message:\"Input All required\"\n            })\n        }\n    }\n\n\n\n    const searchapi = () => {\n        fetch(`${url}/searchname.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setnamelist(result);\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n\n    return (\n\n        <div className=\"get-student-att-body\" >\n                <AlertMessage\n                    notify={notify}\n                    setNotify={setNotify}\n                />\n            <p>Search By:</p>\n            <select value={firstField} onChange={(event) => {\n                setfirstField(event.target.value);\n                setdisplay1(event.target.value === \"Name\" ? \"block\" : \"none\");\n                setdisplay2(event.target.value === \"Date\" ? \"block\" : \"none\");\n                setdisplay3(event.target.value === \"Date\" ? \"none\" : \"block\");\n            }} >\n                <option>Select</option>\n                <option value=\"Name\" >Name</option>\n                <option value=\"Date\" >Date</option>\n            </select>\n            <div style={{ display: display1 }}>\n                <TextField list=\"namelist\" placeholder=\"Enter Name\" value={name} onChange={(event) => {\n                    searchapi();\n                    const str = event.target.value.split(' ');\n                    for (let i = 0; i < str.length; i++) {\n\n                        str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                    }\n\n                    const Name = str.join(' ');\n\n                    setname(Name);\n                }} ></TextField>\n\n\n                <datalist style={{ backgroundColor: \"black\" }} id=\"namelist\">\n                    {namelist.map((k, key) => {\n                        return (\n                            <option key={key}>{k}</option>\n                        )\n                    })}\n                </datalist>\n                <p>From:</p><TextField onChange={(event) => { setfromdate(event.target.valueAsDate); }} type=\"date\" ></TextField>\n                <p>To:</p><TextField onChange={(event) => { settodate(event.target.valueAsDate); }} type=\"date\" ></TextField>\n\n\n                <button style={{ margin: 10 }} className=\"btn\" onClick={() => submit()} >Submit</button>\n\n                <select onChange={(event) => {\n                    setservice(event.target.value);\n                }} >\n                    <option value=\"FIRST SERVICE\" >FIRST SERVICE</option>\n                    <option value=\"SECOND SERVICE\" >SECOND SERVICE</option>\n                    <option value=\"THIRD SERVICE\" >THIRD SERVICE</option>\n                </select>\n            </div>\n            <div style={{ display: display2 }}>\n\n                <TextField type=\"date\" onChange={(event) => setdate(event.target.value)}></TextField>\n\n                <select onChange={(event) => isPresent1(event.target.value === \"true\" ? true : false)}>\n                    <option value=\"true\" >Present</option>\n                    <option value=\"false\" >Absent</option>\n                </select>\n                <div style={{ padding: 10 }}>\n                    <button className=\"btn\" onClick={() => submit1()} >Submit</button></div>\n                <select onChange={(event) => {\n                    setservice(event.target.value);\n                }} >\n                    <option value=\"FIRST SERVICE\" >FIRST SERVICE</option>\n                    <option value=\"SECOND SERVICE\" >SECOND SERVICE</option>\n                    <option value=\"THIRD SERVICE\" >THIRD SERVICE</option>\n                </select>\n                <table>\n                    <thead>\n                        <tr>\n                            <td>\n                                <b style={{ color: \"#f70084\" }}> People present on {date}</b>\n                            </td>\n\n                        </tr>\n                    </thead>\n\n                    {obj1.map((p) => {\n                        presentcount = p.Service === service ? (p.Present === \"1\" ? presentcount + 1 : presentcount) : presentcount;\n                        absentcount = p.Service === service ? (p.Present === \"0\" ? absentcount + 1 : absentcount) : absentcount;\n                        if (p.Present === present1 && p.Service === service) {\n\n\n\n                            return (\n\n                                <tbody key={p.Name} >\n                                    <tr>\n                                        <td>\n                                            {p.Name}\n                                        </td>\n                                    </tr>\n                                </tbody>\n\n                            )\n\n                        } else {\n                            return (\n                                <div></div>\n                            )\n                        }\n\n\n\n                    })}\n                    <div>\n                        <p style={{ color: \"#f70084\" }}>No of Presents : <b style={{ color: \"green\" }}>{presentcount}</b></p>\n                        <p style={{ color: \"#f70084\" }}>No of Absents : <b style={{ color: \"red\" }}>{absentcount}</b></p>\n                    </div>\n                </table>\n\n\n            </div>\n            <div style={{ display: display3 }}>\n                <table style={{ display: \"grid\", justifyContent: \"center\" }}>\n                    {obj.map((p) => {\n\n                        if (p.Present == 1) {\n\n\n                            count = count + 1;\n                            if (service == p.Service) {\n                                return (\n                                    <tbody key={p.Name} style={{ backgroundColor: \"#ccc\" }} >\n                                        <tr>\n                                            <td style={{ color: \"black\", padding: 20 }}>{p.Name}</td>\n                                            <td style={{ color: \"black\", padding: 20 }}>{p.Date}</td>\n                                        </tr>\n                                    </tbody>\n                                );\n                            }\n                        }\n                        else {\n                            return (\n                                <div></div>\n                            )\n                        }\n                    })}\n\n                </table>\n\n\n                <div style={{ display: display4, margin: 10 }} >\n\n                    {name} was present {count} {count > 1 ? \"days\" : \"day\"} between {fromdd + \"/\" + frommm + \"/\" + fromyy} to  {todd + \"/\" + tomm + \"/\" + toyy} </div>\n            </div>\n        </div>\n\n    )\n\n}\n\nexport default Getchurchattendance;","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Inputstudentattendance.js",["551","552","553"],"\nimport React, { useEffect, useState } from \"react\";\nimport { url } from \"../../Constants\";\nimport { AlertMessage } from \"../Support/AlertMessage\";\nimport Newstudententry from \"./newstudententry.js\";\n\nconst Inputstudentattendance = () => {\n  const [studentnames, setstudentnames] = useState([]);\n  const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n  const [date, setdate] = useState();\n\n\n  const obj = [];\n  const [studentattendance, setstudentattendance] = useState([]);\n\n  let today = new Date();\n\n  let dd = today.getDate();\n  dd = dd < 10 ? \"0\" + dd : dd;\n  if (dd === \"00\") {\n    dd = 31;\n    mm = mm - 1;\n  }\n\n  let mm = (today.getMonth() + 1) > 12 ? today.getMonth() : today.getMonth() + 1;\n  mm = mm < 10 ? \"0\" + mm : mm;\n  let yyyy = today.getFullYear();\n\n  today = yyyy + \"-\" + mm + \"-\" + dd;\n\n  const submit = () => {\n    if (studentattendance) {\n      fetch(`${url}/student_attendance.php`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n\n        },\n        body: JSON.stringify({\n          studentattendance: studentattendance,\n          date: date\n\n        })\n      })\n        .then(res => res.json())\n        .then((result) => {\n          setNotify({\n            ...notify,\n            isOpen:true,\n            message:result\n          })\n          window.location.reload();\n        }).catch((error) => {\n          console.error(error);\n        });\n\n    }\n\n\n    else {\n     setNotify({\n       ...notify,\n       isOpen:true,\n       message:'Input All Required'\n     })\n    }\n  }\n\n\n  useEffect(() => {\n    fetch(`${url}/getstudentname.php`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n\n          setstudentnames(result);\n        },\n        (error) => {\n          setNotify({\n            ...notify,\n            isOpen:true,\n            message:error\n          })\n        }\n      )\n  }, [])\n\n\n\n\n\n\n  let i = 0;\n  const count = studentnames.length;\n\n  for (i = 0; i < count; i++) {\n    if (studentnames[i] !== '') {\n      obj.push({ \"name\": studentnames[i], \"present\": false });\n    }\n  }\n\n  useEffect(() => {\n\n\n    setstudentattendance(obj);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [studentnames]);\n\n\n\n\n  return (\n    <div className=\"student-attendance-body\">\n      <AlertMessage\n        notify={notify}\n        setNotify={setNotify}\n      />\n      <input className=\"inp\" type=\"date\" value={date} onChange={(event) => {\n        setdate(event.target.value)\n      }} /><button className=\"btn\" onClick={() => setdate(today)} >Click if today</button>\n      <p>Date:{date}</p>\n      <table>\n        <thead>\n          <tr><th>Name</th>\n            <th>Present</th>\n            <th>Absent</th></tr>\n        </thead>\n        <tbody>\n          {studentattendance.map((p) => {\n            return (\n              <tr key={p.name} >\n                <td>{p.name}</td>\n                <td ><label className=\"container\"><input\n\n                  onChange={\n                    (event) => {\n                      let temp = true;\n\n                      event.target.value === 'true' ? temp = true : temp = false;\n                      const present = temp;\n                      setstudentattendance((cp) => cp.map(x => x.name === p.name ? {\n                        ...x,\n                        present\n                      } : x))\n                    }} type=\"radio\" name={p.name} value=\"true\" /> <span className=\"fas fa-check present\"></span> </label></td>\n                <td ><label className=\"container\"><input\n                  onChange={\n                    (event) => {\n                      let temp = true;\n                      event.target.value === 'false' ? temp = false : temp = true;\n                      const present = temp;\n                      setstudentattendance((cp) => cp.map(x => x.name === p.name ? {\n                        ...x,\n                        present\n                      } : x))\n                    }}\n                  type=\"radio\" name={p.name} value=\"false\" /> <span className=\"fas fa-times absent\"></span></label> </td>\n              </tr>\n            )\n          })}</tbody>\n        <tfoot></tfoot>\n\n\n      </table>\n      <button className=\"btn\" onClick={() => submit()}>Submit</button>\n      <div>\n        <Newstudententry />\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Inputstudentattendance;","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/Getstudentattendance.js",["554","555","556","557","558","559","560","561","562","563"],"import { TextField } from '@mui/material';\nimport React, { useState } from 'react';\nimport { url } from '../../Constants';\nimport { AlertMessage } from '../Support/AlertMessage';\n\nconst Getstudentattendance = () => {\n    const [firstField, setfirstField] = useState();\n    const [display1, setdisplay1] = useState(\"none\");\n    const [display2, setdisplay2] = useState(\"none\");\n    const [display3, setdisplay3] = useState(\"none\");\n    const [display4, setdisplay4] = useState(\"none\");\n    const [fromdate, setfromdate] = useState();\n    const [notify, setNotify] = useState({ isOpen: false, message: '', variant: 'filled', severity: 'error' });\n    const [todate, settodate] = useState();\n    const [namelist, setnamelist] = useState([]);\n\n    let count = 0;\n\n    let presentcount = 0;\n    let absentcount = 0;\n    let today = new Date();\n\n    let dd = today.getDate();\n    dd = dd < 10 ? \"0\" + dd : dd;\n    if (dd === \"00\") {\n        dd = 31;\n        mm = mm - 1;\n    }\n\n    let mm = (today.getMonth() + 1) > 12 ? today.getMonth() : today.getMonth() + 1;\n    mm = mm < 10 ? \"0\" + mm : mm;\n    let yyyy = today.getFullYear();\n\n    today = yyyy + \"-\" + mm + \"-\" + dd;\n\n    const [present1, isPresent1] = useState(true);\n    const [date, setdate] = useState(today);\n    const [obj, setobj] = useState([]);\n    const [obj1, setobj1] = useState([]);\n\n    const [name, setname] = useState();\n\n    let from = new Date(fromdate);\n    let to = new Date(todate);\n\n    let fromdd = from.getDate();\n    fromdd = fromdd < 10 ? \"0\" + fromdd : fromdd;\n    if (fromdd === \"00\") {\n        fromdd = 31;\n        frommm = frommm - 1;\n    }\n\n    let frommm = (from.getMonth() + 1) > 12 ? from.getMonth() : from.getMonth() + 1;\n    frommm = frommm < 10 ? \"0\" + frommm : frommm;\n    let fromyy = from.getFullYear();\n\n    let todd = to.getDate();\n    todd = todd < 10 ? \"0\" + todd : todd;\n    if (todd === \"00\") {\n        todd = 31;\n        tomm = tomm - 1;\n    }\n\n    let tomm = (to.getMonth() + 1) > 12 ? to.getMonth() : to.getMonth() + 1;\n    tomm = tomm < 10 ? \"0\" + tomm : tomm;\n    let toyy = to.getFullYear();\n\n    const submit1 = () => {\n        if (date) {\n            fetch(`${url}/searchbydate.php`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n\n                },\n                body: JSON.stringify({\n                    date: date\n\n                })\n            })\n                .then(res => res.json())\n                .then((result) => {\n                    if (result !== \"No matches found on Record\") {\n                        setobj1(result);\n\n                    }\n                    else {\n                        setobj1([{ \"StudentName\": \"No results found\", \"Present\": 1 }]);\n                        setNotify({\n                            ...notify,\n                            isOpen:true,\n                            message:result\n                        })\n\n\n                    }\n                }).catch((error) => {\n                    console.error(error);\n                });\n\n        }\n\n\n        else {\n            setNotify({\n                ...notify,\n                isOpen:true,\n                message:'Input All required'\n            })\n        }\n    }\n\n    const submit = () => {\n        if (fromdate && todate && name) {\n            fetch(`${url}/searchbystudentname.php`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n\n                },\n                body: JSON.stringify({\n                    name: name,\n                    fromdate: fromdate,\n                    todate: todate\n\n                })\n            })\n                .then(res => res.json())\n                .then((result) => {\n                    if (result !== \"No matches found on Record\") {\n                        setobj(result);\n                        setdisplay3(\"block\");\n                        setdisplay4(\"block\");\n                    }\n                    else {\n                        setNotify({\n                            ...notify,\n                            isOpen:true,\n                            message:result\n                        })\n                        setdisplay3(\"none\");\n                    }\n                }).catch((error) => {\n                    console.error(error);\n                });\n\n        }\n\n\n        else {\n            setNotify({\n                ...notify,\n                isOpen:true,\n                message:'Input All required'\n            })\n        }\n    }\n\n\n    const searchapi = () => {\n        fetch(`${url}/searchstudentname.php`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n\n            },\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setnamelist(result);\n            }).catch((error) => {\n                console.error(error);\n            });\n    }\n\n    return (\n\n        <div className=\"get-student-att-body\" >\n            <AlertMessage\n            notify={notify}\n            setNotify={setNotify}\n            />\n            <p>Search By:</p>\n            <select value={firstField} onChange={(event) => {\n                setfirstField(event.target.value);\n                setdisplay1(event.target.value === \"Name\" ? \"block\" : \"none\");\n                setdisplay2(event.target.value === \"Date\" ? \"block\" : \"none\");\n                setdisplay3(event.target.value === \"Date\" ? \"none\" : \"block\");\n            }} >\n                <option>Select</option>\n                <option value=\"Name\" >Name</option>\n                <option value=\"Date\" >Date</option>\n            </select>\n            <div style={{ display: display1 }}>\n                <TextField list=\"namelist\" placeholder=\"Enter Name\" value={name} onChange={(event) => {\n                    const str = event.target.value.split(' ');\n                    for (let i = 0; i < str.length; i++) {\n\n                        str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);\n                    }\n\n                    const Name = str.join(' ');\n\n                    setname(Name); searchapi();\n                }} ></TextField>\n                <datalist style={{ backgroundColor: \"black\" }} id=\"namelist\">\n                    {namelist.map((k, key) => {\n                        return (\n                            <option key={key} >{k}</option>\n                        )\n                    })}\n                </datalist>\n                <p>From:</p><TextField onChange={(event) => { setfromdate(event.target.valueAsDate); }} type=\"date\" ></TextField>\n                <p>To:</p><TextField onChange={(event) => { settodate(event.target.valueAsDate); }} type=\"date\" ></TextField>\n\n\n                <button style={{ margin: 10 }} className=\"btn\" onClick={() => submit()} >Submit</button>\n            </div>\n            <div style={{ display: display2 }}>\n\n                <TextField type=\"date\" onChange={(event) => setdate(event.target.value)}></TextField>\n\n                <select onChange={(event) => isPresent1(event.target.value === \"true\" ? true : false)}>\n                    <option value=\"true\" >Present</option>\n                    <option value=\"false\" >Absent</option>\n                </select>\n                <div style={{ padding: 10 }}>\n                    <button className=\"btn\" onClick={() => submit1()} >Submit</button></div>\n                <table>\n                    <thead>\n                        <tr>\n                            <td>\n                                <b style={{ color: \"#f70084\" }}> Students present on {date}</b>\n                            </td>\n\n                        </tr>\n                    </thead>\n\n                    {obj1.map((p) => {\n                        presentcount = p.Present === \"1\" ? presentcount + 1 : presentcount;\n                        absentcount = p.Present === \"0\" ? absentcount + 1 : absentcount;\n                        if (p.Present == present1) {\n\n                            return (\n\n                                <tbody key={p.StudentName} >\n                                    <tr>\n                                        <td>\n                                            {p.StudentName}\n                                        </td>\n                                    </tr>\n                                </tbody>\n\n                            )\n                        }\n                        else {\n\n                        }\n\n\n\n                    })}\n                    <div>\n                        <p style={{ color: \"#f70084\" }}>No of Presents : <b style={{ color: \"green\" }}>{presentcount}</b></p>\n                        <p style={{ color: \"#f70084\" }}>No of Absents : <b style={{ color: \"red\" }}>{absentcount}</b></p>\n                    </div>\n                </table>\n\n\n            </div>\n            <div style={{ display: display3 }}>\n                <table style={{ display: \"grid\", justifyContent: \"center\" }}>\n                    {obj.map((p) => {\n                        if (p.Present == 1) {\n                            count = count + 1;\n\n                            return (\n                                <tbody key={p.StudentName} style={{ backgroundColor: \"#ccc\" }} >\n                                    <tr>\n                                        <td style={{ color: \"black\", padding: 20 }}>{p.StudentName}</td>\n                                        <td style={{ color: \"black\", padding: 20 }}>{p.Date}</td>\n                                    </tr>\n                                </tbody>\n                            );\n\n                        }\n                    })}\n                </table>\n\n                <div style={{ display: display4, margin: 10 }} >\n                    {name} was present {count} {count > 1 ? \"days\" : \"day\"} between {fromdd + \"/\" + frommm + \"/\" + fromyy} to  {todd + \"/\" + tomm + \"/\" + toyy} </div>\n            </div>\n        </div>\n\n    )\n\n}\n\nexport default Getstudentattendance;","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Sub Components/newstudententry.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Support/AlertMessage.js",["564","565"],"import { Alert, Collapse,Slide ,IconButton } from \"@mui/material\";\nimport React,{ useState } from \"react\";\nimport CloseIcon from '@mui/icons-material/Close';\n\nexport const AlertMessage=(props)=>{\n  const {notify,setNotify} = props;\n    return(\n        <Slide direction=\"down\" in={notify.isOpen}>\n        <Alert\n          severity={notify.severity}\n          variant={notify.variant}\n          style={{\n            alignContent:\"center\",\n            alignItems:\"center\",\n            fontSize:18,\n            position:'fixed',\n            zIndex:3,\n            marginLeft:'25%'\n          }}\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"large\"\n              onClick={() => {\n                setNotify({...notify,isOpen:false})\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n          sx={{ mb:7 }}\n          points=\"0,100 50,00, 100,100\"\n        >\n         {notify.message}\n        </Alert>\n      </Slide>\n    )\n}","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Support/Datepicker.js",["566","567","568"],"import React, { useEffect, useRef, useState } from 'react';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport {TextField } from '@mui/material';\n\nexport const Datepicker =(props) =>{\n\n    return(\n        <DatePicker\n            label={props.label}\n            value={props.value}\n            orientation='landscape'\n            onChange={(newValue) => {\n              const date = new Date(newValue).toLocaleDateString();\n              const tempArr = date.split('/');\n              props.setValue(`${tempArr[2]}-${tempArr[1]}-${tempArr[0]}`);\n            }}\n            renderInput={(params) => \n              <TextField variant='standard' \n              value={props.value}\n              style={{\n                marginRight:20\n              }} {...params} />\n            }\n          />\n    )\n}","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Support/SelectComp.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/Support/Loader.js",["569","570"],"import { CSpinner } from \"@coreui/react\"\nimport { Grid } from \"@mui/material\"\nimport React,{ useState } from \"react\";\n\nexport const Loader =(props)=>{\n    return(\n        <Grid\n        container\n        style={{\n            backgroundColor:\"rgb(0,0,0,0.8)\",\n            width:\"100%\",\n            height:\"100%\",\n            position:\"fixed\",\n\n            zIndex:9999,\n            // display:\"grid\"\n            display:props.loading==false?\"none\":\"grid\"\n        }}\n        alignContent={\"center\"}\n        justifyContent=\"center\"\n        >\n            <CSpinner\n            variant=\"grow\"\n            color=\"danger\"\n            style={{\n               transform:\"scale(5,5)\"\n            }}\n            />\n        </Grid>\n    )\n}","/home/david/Desktop/mydev/coreui-free-react-admin-template/src/layout/LaywithLoader.js",[],"/home/david/Desktop/mydev/coreui-free-react-admin-template/src/views/Components/DataEntryForm.js",["571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587"],"import React, { useEffect, useState } from 'react'\nimport { url } from '../Constants'\nimport { Grid, Button, FormControlLabel, RadioGroup, Radio, Autocomplete, formLabelClasses } from '@mui/material'\nimport { CAlert, CButton, CCol, CForm, CFormFeedback, CFormInput, CFormLabel, CFormSwitch, CFormTextarea } from '@coreui/react'\nimport { AlertMessage } from './Support/AlertMessage'\nimport { AppFooter } from 'src/components'\nimport { DataEntryForm } from './DataEntryForm'\n\n\n\nexport const DataEntryForms = (props)=>{\n    const data = props.data;\n    const familyheads = props.familyheads;\n    return(\n        <CForm direction={'column'} alignItems={'center'} justifyItems={'stretch'} container item validated={props.validated}>\n      <AlertMessage\n        notify={props.notify}\n        setNotify={props.setNotify}\n      />\n      <CCol md={4}>\n        <CFormLabel>\n          Family ID\n        </CFormLabel>\n        <CFormInput\n          style={{ width: 300, marginRight: 15 }}\n          name=\"familyid\"\n          value={data.familyid}\n          margin=\"dense\"\n          variant=\"outlined\"\n          onChange={(event) => {\n            props.setData({ ...data, familyid: event.target.value.toUpperCase() })\n          }}\n          placeholder=\"Family ID\"\n          label=\"Family ID\"\n          required\n          invalid={data.familyid ? false : true}\n        />\n        <CFormFeedback\n          invalid\n        >Field is required</CFormFeedback>\n      </CCol>\n      <CCol md={4} >\n        <CFormLabel>\n          Self ID\n        </CFormLabel>\n        <CFormInput\n          name=\"selfid\"\n          style={{ width: 300, marginRight: 15 }}\n          value={data.selfid}\n          margin=\"dense\"\n          variant=\"outlined\"\n          onFocus={() => props.setData({ ...data, selfid: data.familyid.slice(3) })}\n          placeholder=\"Self ID\"\n          label=\"Self ID\"\n          required\n          readOnly\n          invalid={data.selfid ? false : true}\n        />\n        <CFormFeedback\n          invalid\n        >\n          Field is required\n        </CFormFeedback>\n      </CCol>\n\n      <CCol>\n        <CFormLabel>\n          Name\n        </CFormLabel>\n        <CFormInput\n          name=\"name\"\n          value={data.name}\n          style={{ width: 300, marginRight: 15 }}\n          margin=\"dense\"\n          variant=\"outlined\"\n          onChange={(event) => {\n            const str = event.target.value.split(' ')\n            for (let i = 0; i < str.length; i++) {\n              str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1)\n            }\n            const patt = /[^a-zA-Z ]/g;\n            const Name1 = str.join(' ').replace(patt, '');\n            props.setData({ ...data, name: Name1 })\n          }}\n          placeholder=\"Enter Name\"\n          label=\"Enter Name\"\n          // invalid={data.name ? false : true}\n          required\n        />\n        <CFormFeedback\n          invalid\n        >\n          Please fill this field\n        </CFormFeedback>\n      </CCol>\n      <CCol md={4} >\n        <CFormLabel>\n          Date Of Birth\n        </CFormLabel>\n        <CFormInput\n          type={'date'}\n          style={{ width: 300, marginRight: 15 }}\n          value={data.dob}\n          onChange={(event) => props.setData({ ...data, dob: event.target.value })}\n          label=\"Enter DOB\"\n          required\n          invalid={data.dob ? false : true}\n        />\n        <CFormFeedback\n          invalid\n        >\n          Field is required\n        </CFormFeedback>\n      </CCol>\n      <CCol md={4} >\n        <CFormLabel>\n          Gender\n        </CFormLabel>\n        <RadioGroup\n          row\n          aria-label=\"gender\"\n          name=\"row-radio-buttons-group\"\n          style={{\n            width: 300,\n            justifyContent: 'space-evenly',\n          }}\n        >\n          <FormControlLabel\n            value=\"male\"\n            name=\"gender\"\n            label={'Male'}\n            control={<Radio />}\n            onChange={(event) => props.setData({ ...data, gender: event.target.value })}\n          />\n          <FormControlLabel\n            value=\"female\"\n            name=\"gender\"\n            label={'Female'}\n            control={<Radio />}\n            onChange={(event) => props.setData({ ...data, gender: event.target.value })}\n          />\n        </RadioGroup>\n      </CCol>\n      <CCol md={4} >\n        <CFormLabel>\n          Martial status\n        </CFormLabel>\n        <RadioGroup\n          row\n          aria-label=\"martial-status\"\n          name=\"row-radio-buttons-group\"\n          style={{\n            width: 300,\n            justifyContent: 'space-evenly',\n          }}\n        >\n          <FormControlLabel\n            value={true}\n            label={'Married'}\n            control={<Radio />}\n            onChange={(event) => {\n              props.setData({ ...data, married: event.target.value == 'true' ? true : false })\n            }}\n          />\n          <FormControlLabel\n            value={false}\n            control={<Radio />}\n            label={'Unmarried'}\n            onChange={(event) => {\n              props.setData({ ...data, married: event.target.value == 'true' ? true : false })\n            }}\n          />\n        </RadioGroup>\n      </CCol>\n      <CCol md={4}\n        style={{\n          display: data.married === true ? 'block' : 'none',\n          width: 300,\n          marginRight: 15,\n        }}\n      >\n        <CFormLabel>\n          Wedding Date\n        </CFormLabel>\n        <CFormInput\n          type=\"date\"\n          label=\"Wedding Date\"\n          margin=\"dense\"\n          variant=\"outlined\"\n          value={data.weddingdate}\n          onChange={(event) => props.setData({ ...data, weddingdate:event.target.value })}\n        />\n      </CCol>\n\n      <CCol>\n        <CFormLabel>\n          Email\n        </CFormLabel>\n        <CFormInput\n          name=\"emailid\"\n          placeholder='Enter Emailid'\n          margin=\"dense\"\n          label=\"Email ID\"\n          style={{ width: 300, marginRight: 15 }}\n          variant=\"outlined\"\n          onChange={(event) => props.setData({ ...data, emailid: event.target.value })}\n          value={data.emailid}\n          invalid={(!data.emailid || (data.emailid.includes('@') && data.emailid.includes('.com'))) ? false : true}\n        />\n        <CFormFeedback\n          invalid\n        >\n          Please input valid email address\n        </CFormFeedback>\n      </CCol>\n      <CCol>\n        <CFormLabel>\n          Mobile\n        </CFormLabel>\n        <CFormInput\n          name=\"mobile\"\n          style={{ width: 300, marginRight: 15 }}\n          label=\"Mobile\"\n          placeholder='Enter mobile number'\n          margin=\"dense\"\n          variant=\"outlined\"\n          value={data.mobile}\n          onChange={(event) => {\n            let patt = /[^0-9]/g\n            const ph = event.target.value.replace(patt, '')\n            props.setData({ ...data, mobile: ph.slice(0, 10) })\n          }}\n          required\n          invalid={(data.mobile.length === 10) ? false : true}\n        />\n        <CFormFeedback invalid>\n          Enter valid number\n        </CFormFeedback>\n      </CCol>\n\n\n\n      <CCol>\n        <CFormLabel>\n          Address\n        </CFormLabel>\n        <CFormTextarea\n          name=\"address\"\n          label=\"Address\"\n          placeholder='Enter address'\n          style={{ width: 300, marginRight: 15 }}\n          margin=\"dense\"\n          variant=\"outlined\"\n          value={data.address}\n          onChange={(event) => {\n            const str = event.target.value.split(',')\n            for (let i = 0; i < str.length; i++) {\n              str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1)\n            }\n            const address = str.join(',')\n            props.setData({ ...data, address: address })\n          }}\n          required\n          invalid={data.address ? false : true}\n        />\n        <CFormFeedback\n          invalid\n        >\n          Field is required\n        </CFormFeedback>\n      </CCol>\n      <CCol md={4}>\n        <CFormLabel>\n          Family head\n        </CFormLabel>\n        <CFormInput\n          name=\"familyhead\"\n          value={data.familyhead}\n          margin=\"dense\"\n          placeholder='Enter family head'\n          variant=\"outlined\"\n          label=\"Family Head\"\n          onChange={(event) => {\n            const str = event.target.value.split(' ')\n            for (let i = 0; i < str.length; i++) {\n              str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1)\n            }\n            const familyheadname = str.join(' ')\n            props.setData({ ...data, familyhead: familyheadname })\n          }}\n          required\n          invalid={data.familyhead ? false : true}\n          list='listforfamilyheads'\n        />\n        <datalist id='listforfamilyheads'>\n          {familyheads.map((f, key) => {\n            return (\n              <option key={key} >{f}</option>\n            )\n          })}\n        </datalist>\n        <CFormFeedback invalid>\n          Field is required\n        </CFormFeedback>\n      </CCol>\n      <CCol md={4}>\n        <CFormLabel>\n          Baptism\n        </CFormLabel>\n        <RadioGroup\n          row\n          aria-label=\"Baptizm\"\n          name=\"row-radio-buttons-group\"\n          style={{\n            width: 300,\n            justifyContent: 'space-evenly',\n          }}\n        >\n          <FormControlLabel\n            control={<Radio />}\n            value={true}\n            label={'Baptized'}\n            onChange={(event) =>\n              props.setData({ ...data, baptized: event.target.value == 'true' ? true : false })\n            }\n          />\n          <FormControlLabel\n            value={false}\n            control={<Radio />}\n            label={'Not Baptized'}\n            onChange={(event) =>\n              props.setData({ ...data, baptized: event.target.value == 'true' ? true : false })\n            }\n          />\n        </RadioGroup>\n      </CCol>\n      <CCol md={4}>\n        <CFormLabel>\n          Mobile type\n        </CFormLabel>\n        <RadioGroup\n          row\n          aria-label=\"mobile-type\"\n          name=\"row-radio-buttons-group\"\n          style={{\n            width: 300,\n            justifyContent: 'space-evenly',\n          }}\n        >\n          <FormControlLabel\n            label={'Android'}\n            value={true}\n            control={<Radio />}\n            onChange={(event) =>\n              props.setData({ ...data, android: event.target.value == 'true' ? true : false })\n            }\n          />\n          <FormControlLabel\n            label={'Normal'}\n            value={false}\n            control={<Radio />}\n            onChange={(event) =>\n              props.setData({ ...data, android: event.target.value == 'true' ? true : false })\n            }\n          />\n        </RadioGroup>\n      </CCol>\n\n      <CButton onClick={props.handleSubmit} >\n        Add to records\n      </CButton>\n    </CForm>\n    )\n} ","/home/david/Desktop/mydev/Church-Management/src/index.js",[],[],"/home/david/Desktop/mydev/Church-Management/src/store.js",[],"/home/david/Desktop/mydev/Church-Management/src/serviceWorker.js",[],"/home/david/Desktop/mydev/Church-Management/src/App.js",[],"/home/david/Desktop/mydev/Church-Management/src/layout/DefaultLayout.js",[],"/home/david/Desktop/mydev/Church-Management/src/layout/LaywithLoader.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/pages/page500/Page500.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/pages/page404/Page404.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/pages/login/Login.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/pages/register/Register.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Support/Loader.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/index.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/AppBreadcrumb.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/DocsLink.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/DocsCallout.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/DocsExample.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/AppSidebar.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/AppHeader.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/AppContent.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/AppFooter.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/header/AppHeaderDropdown.js",[],"/home/david/Desktop/mydev/Church-Management/src/routes.js",[],"/home/david/Desktop/mydev/Church-Management/src/_nav.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/header/index.js",[],"/home/david/Desktop/mydev/Church-Management/src/assets/brand/logo.js",[],"/home/david/Desktop/mydev/Church-Management/src/assets/brand/sygnet.js",[],"/home/david/Desktop/mydev/Church-Management/src/assets/brand/logo-negative.js",[],"/home/david/Desktop/mydev/Church-Management/src/components/AppSidebarNav.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Dataentry.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/EditData.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/YoutubeID.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Accounting.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Inputstudentattendance.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Getchurchattendance.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Inputchurchattendance.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Getstudentattendance.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Editaccounting.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/Fetchaccountingdetails.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/dashboard/Dashboard.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Constants.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Support/AlertMessage.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/DataEntryForm.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/widgets/WidgetsBrand.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Support/Datepicker.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/widgets/WidgetsDropdown.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Support/SelectComp.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Sub Components/newstudententry.js",[],"/home/david/Desktop/mydev/Church-Management/src/views/Components/Verse.js",[],{"ruleId":"588","replacedBy":"589"},{"ruleId":"590","replacedBy":"591"},{"ruleId":"592","severity":1,"message":"593","line":1,"column":17,"nodeType":"594","messageId":"595","endLine":1,"endColumn":26},{"ruleId":"592","severity":1,"message":"596","line":5,"column":10,"nodeType":"594","messageId":"595","endLine":5,"endColumn":16},{"ruleId":"592","severity":1,"message":"597","line":14,"column":7,"nodeType":"594","messageId":"595","endLine":14,"endColumn":20},{"ruleId":"592","severity":1,"message":"598","line":22,"column":10,"nodeType":"594","messageId":"595","endLine":22,"endColumn":19},{"ruleId":"592","severity":1,"message":"599","line":22,"column":20,"nodeType":"594","messageId":"595","endLine":22,"endColumn":29},{"ruleId":"592","severity":1,"message":"600","line":1,"column":10,"nodeType":"594","messageId":"595","endLine":1,"endColumn":37},{"ruleId":"592","severity":1,"message":"601","line":2,"column":17,"nodeType":"594","messageId":"595","endLine":2,"endColumn":25},{"ruleId":"592","severity":1,"message":"596","line":3,"column":10,"nodeType":"594","messageId":"595","endLine":3,"endColumn":16},{"ruleId":"592","severity":1,"message":"602","line":15,"column":10,"nodeType":"594","messageId":"595","endLine":15,"endColumn":17},{"ruleId":"592","severity":1,"message":"603","line":15,"column":19,"nodeType":"594","messageId":"595","endLine":15,"endColumn":34},{"ruleId":"592","severity":1,"message":"604","line":15,"column":36,"nodeType":"594","messageId":"595","endLine":15,"endColumn":43},{"ruleId":"592","severity":1,"message":"605","line":18,"column":10,"nodeType":"594","messageId":"595","endLine":18,"endColumn":27},{"ruleId":"592","severity":1,"message":"606","line":4,"column":20,"nodeType":"594","messageId":"595","endLine":4,"endColumn":33},{"ruleId":"592","severity":1,"message":"607","line":5,"column":8,"nodeType":"594","messageId":"595","endLine":5,"endColumn":13},{"ruleId":"592","severity":1,"message":"608","line":9,"column":10,"nodeType":"594","messageId":"595","endLine":9,"endColumn":22},{"ruleId":"592","severity":1,"message":"609","line":10,"column":10,"nodeType":"594","messageId":"595","endLine":10,"endColumn":16},{"ruleId":"592","severity":1,"message":"610","line":11,"column":31,"nodeType":"594","messageId":"595","endLine":11,"endColumn":40},{"ruleId":"592","severity":1,"message":"611","line":77,"column":13,"nodeType":"594","messageId":"595","endLine":77,"endColumn":16},{"ruleId":"592","severity":1,"message":"612","line":77,"column":24,"nodeType":"594","messageId":"595","endLine":77,"endColumn":32},{"ruleId":"592","severity":1,"message":"613","line":77,"column":34,"nodeType":"594","messageId":"595","endLine":77,"endColumn":41},{"ruleId":"592","severity":1,"message":"614","line":77,"column":43,"nodeType":"594","messageId":"595","endLine":77,"endColumn":48},{"ruleId":"592","severity":1,"message":"615","line":81,"column":13,"nodeType":"594","messageId":"595","endLine":81,"endColumn":16},{"ruleId":"592","severity":1,"message":"616","line":92,"column":11,"nodeType":"594","messageId":"595","endLine":92,"endColumn":46},{"ruleId":"617","severity":1,"message":"618","line":177,"column":8,"nodeType":"619","endLine":177,"endColumn":54,"suggestions":"620"},{"ruleId":"617","severity":1,"message":"621","line":177,"column":17,"nodeType":"622","endLine":177,"endColumn":53},{"ruleId":"592","severity":1,"message":"623","line":184,"column":24,"nodeType":"594","messageId":"595","endLine":184,"endColumn":37},{"ruleId":"592","severity":1,"message":"624","line":186,"column":11,"nodeType":"594","messageId":"595","endLine":186,"endColumn":18},{"ruleId":"617","severity":1,"message":"625","line":207,"column":8,"nodeType":"619","endLine":207,"endColumn":11,"suggestions":"626"},{"ruleId":"617","severity":1,"message":"627","line":207,"column":9,"nodeType":"628","endLine":207,"endColumn":10},{"ruleId":"629","severity":1,"message":"630","line":229,"column":45,"nodeType":"631","messageId":"632","endLine":229,"endColumn":47},{"ruleId":"629","severity":1,"message":"630","line":261,"column":45,"nodeType":"631","messageId":"632","endLine":261,"endColumn":47},{"ruleId":"629","severity":1,"message":"630","line":264,"column":35,"nodeType":"631","messageId":"632","endLine":264,"endColumn":37},{"ruleId":"629","severity":1,"message":"630","line":296,"column":45,"nodeType":"631","messageId":"632","endLine":296,"endColumn":47},{"ruleId":"629","severity":1,"message":"630","line":299,"column":35,"nodeType":"631","messageId":"632","endLine":299,"endColumn":37},{"ruleId":"592","severity":1,"message":"633","line":3,"column":57,"nodeType":"594","messageId":"595","endLine":3,"endColumn":62},{"ruleId":"592","severity":1,"message":"634","line":3,"column":64,"nodeType":"594","messageId":"595","endLine":3,"endColumn":76},{"ruleId":"592","severity":1,"message":"635","line":3,"column":92,"nodeType":"594","messageId":"595","endLine":3,"endColumn":100},{"ruleId":"592","severity":1,"message":"636","line":3,"column":102,"nodeType":"594","messageId":"595","endLine":3,"endColumn":108},{"ruleId":"592","severity":1,"message":"637","line":3,"column":149,"nodeType":"594","messageId":"595","endLine":3,"endColumn":158},{"ruleId":"592","severity":1,"message":"638","line":5,"column":111,"nodeType":"594","messageId":"595","endLine":5,"endColumn":117},{"ruleId":"592","severity":1,"message":"639","line":8,"column":10,"nodeType":"594","messageId":"595","endLine":8,"endColumn":20},{"ruleId":"592","severity":1,"message":"640","line":13,"column":10,"nodeType":"594","messageId":"595","endLine":13,"endColumn":20},{"ruleId":"592","severity":1,"message":"641","line":13,"column":22,"nodeType":"594","messageId":"595","endLine":13,"endColumn":29},{"ruleId":"592","severity":1,"message":"642","line":14,"column":10,"nodeType":"594","messageId":"595","endLine":14,"endColumn":21},{"ruleId":"592","severity":1,"message":"643","line":17,"column":10,"nodeType":"594","messageId":"595","endLine":17,"endColumn":16},{"ruleId":"592","severity":1,"message":"644","line":28,"column":27,"nodeType":"594","messageId":"595","endLine":28,"endColumn":45},{"ruleId":"592","severity":1,"message":"645","line":51,"column":7,"nodeType":"594","messageId":"595","endLine":51,"endColumn":11},{"ruleId":"646","severity":1,"message":"647","line":130,"column":28,"nodeType":"648","messageId":"649","endLine":130,"endColumn":30},{"ruleId":"617","severity":1,"message":"627","line":178,"column":7,"nodeType":"628","endLine":178,"endColumn":8},{"ruleId":"646","severity":1,"message":"650","line":718,"column":50,"nodeType":"648","messageId":"651","endLine":718,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":731,"column":50,"nodeType":"648","messageId":"651","endLine":731,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":744,"column":50,"nodeType":"648","messageId":"651","endLine":744,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":757,"column":50,"nodeType":"648","messageId":"651","endLine":757,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":770,"column":50,"nodeType":"648","messageId":"651","endLine":770,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":783,"column":50,"nodeType":"648","messageId":"651","endLine":783,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":796,"column":50,"nodeType":"648","messageId":"651","endLine":796,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":809,"column":50,"nodeType":"648","messageId":"651","endLine":809,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":822,"column":50,"nodeType":"648","messageId":"651","endLine":822,"endColumn":52},{"ruleId":"646","severity":1,"message":"650","line":835,"column":50,"nodeType":"648","messageId":"651","endLine":835,"endColumn":52},{"ruleId":"617","severity":1,"message":"625","line":206,"column":6,"nodeType":"619","endLine":206,"endColumn":9,"suggestions":"652"},{"ruleId":"617","severity":1,"message":"627","line":206,"column":7,"nodeType":"628","endLine":206,"endColumn":8},{"ruleId":"629","severity":1,"message":"630","line":395,"column":51,"nodeType":"631","messageId":"632","endLine":395,"endColumn":53},{"ruleId":"629","severity":1,"message":"630","line":396,"column":51,"nodeType":"631","messageId":"632","endLine":396,"endColumn":53},{"ruleId":"592","severity":1,"message":"653","line":3,"column":10,"nodeType":"594","messageId":"595","endLine":3,"endColumn":14},{"ruleId":"592","severity":1,"message":"654","line":3,"column":16,"nodeType":"594","messageId":"595","endLine":3,"endColumn":22},{"ruleId":"592","severity":1,"message":"655","line":3,"column":24,"nodeType":"594","messageId":"595","endLine":3,"endColumn":40},{"ruleId":"592","severity":1,"message":"656","line":3,"column":42,"nodeType":"594","messageId":"595","endLine":3,"endColumn":52},{"ruleId":"592","severity":1,"message":"657","line":3,"column":54,"nodeType":"594","messageId":"595","endLine":3,"endColumn":59},{"ruleId":"592","severity":1,"message":"634","line":3,"column":61,"nodeType":"594","messageId":"595","endLine":3,"endColumn":73},{"ruleId":"592","severity":1,"message":"658","line":3,"column":75,"nodeType":"594","messageId":"595","endLine":3,"endColumn":91},{"ruleId":"592","severity":1,"message":"638","line":4,"column":10,"nodeType":"594","messageId":"595","endLine":4,"endColumn":16},{"ruleId":"592","severity":1,"message":"659","line":4,"column":18,"nodeType":"594","messageId":"595","endLine":4,"endColumn":25},{"ruleId":"592","severity":1,"message":"660","line":4,"column":27,"nodeType":"594","messageId":"595","endLine":4,"endColumn":31},{"ruleId":"592","severity":1,"message":"661","line":4,"column":33,"nodeType":"594","messageId":"595","endLine":4,"endColumn":38},{"ruleId":"592","severity":1,"message":"662","line":4,"column":40,"nodeType":"594","messageId":"595","endLine":4,"endColumn":53},{"ruleId":"592","severity":1,"message":"663","line":4,"column":55,"nodeType":"594","messageId":"595","endLine":4,"endColumn":65},{"ruleId":"592","severity":1,"message":"664","line":4,"column":67,"nodeType":"594","messageId":"595","endLine":4,"endColumn":77},{"ruleId":"592","severity":1,"message":"665","line":4,"column":79,"nodeType":"594","messageId":"595","endLine":4,"endColumn":90},{"ruleId":"592","severity":1,"message":"666","line":4,"column":92,"nodeType":"594","messageId":"595","endLine":4,"endColumn":105},{"ruleId":"592","severity":1,"message":"667","line":5,"column":10,"nodeType":"594","messageId":"595","endLine":5,"endColumn":22},{"ruleId":"592","severity":1,"message":"668","line":6,"column":10,"nodeType":"594","messageId":"595","endLine":6,"endColumn":19},{"ruleId":"592","severity":1,"message":"669","line":12,"column":20,"nodeType":"594","messageId":"595","endLine":12,"endColumn":31},{"ruleId":"617","severity":1,"message":"670","line":36,"column":11,"nodeType":"671","endLine":36,"endColumn":124},{"ruleId":"629","severity":1,"message":"630","line":49,"column":30,"nodeType":"631","messageId":"632","endLine":49,"endColumn":32},{"ruleId":"629","severity":1,"message":"630","line":70,"column":33,"nodeType":"631","messageId":"632","endLine":70,"endColumn":35},{"ruleId":"629","severity":1,"message":"630","line":76,"column":35,"nodeType":"631","messageId":"632","endLine":76,"endColumn":37},{"ruleId":"629","severity":1,"message":"630","line":77,"column":33,"nodeType":"631","messageId":"632","endLine":77,"endColumn":35},{"ruleId":"629","severity":1,"message":"630","line":107,"column":38,"nodeType":"631","messageId":"632","endLine":107,"endColumn":40},{"ruleId":"592","severity":1,"message":"637","line":3,"column":42,"nodeType":"594","messageId":"595","endLine":3,"endColumn":51},{"ruleId":"592","severity":1,"message":"672","line":3,"column":53,"nodeType":"594","messageId":"595","endLine":3,"endColumn":63},{"ruleId":"592","severity":1,"message":"638","line":4,"column":10,"nodeType":"594","messageId":"595","endLine":4,"endColumn":16},{"ruleId":"592","severity":1,"message":"673","line":4,"column":18,"nodeType":"594","messageId":"595","endLine":4,"endColumn":29},{"ruleId":"592","severity":1,"message":"674","line":4,"column":31,"nodeType":"594","messageId":"595","endLine":4,"endColumn":40},{"ruleId":"592","severity":1,"message":"675","line":12,"column":12,"nodeType":"594","messageId":"595","endLine":12,"endColumn":23},{"ruleId":"592","severity":1,"message":"676","line":13,"column":12,"nodeType":"594","messageId":"595","endLine":13,"endColumn":21},{"ruleId":"629","severity":1,"message":"630","line":26,"column":38,"nodeType":"631","messageId":"632","endLine":26,"endColumn":40},{"ruleId":"629","severity":1,"message":"630","line":49,"column":38,"nodeType":"631","messageId":"632","endLine":49,"endColumn":40},{"ruleId":"629","severity":1,"message":"630","line":62,"column":52,"nodeType":"631","messageId":"632","endLine":62,"endColumn":54},{"ruleId":"617","severity":1,"message":"677","line":70,"column":8,"nodeType":"619","endLine":70,"endColumn":16,"suggestions":"678"},{"ruleId":"592","severity":1,"message":"679","line":73,"column":11,"nodeType":"594","messageId":"595","endLine":73,"endColumn":27},{"ruleId":"592","severity":1,"message":"680","line":89,"column":11,"nodeType":"594","messageId":"595","endLine":89,"endColumn":24},{"ruleId":"592","severity":1,"message":"681","line":107,"column":12,"nodeType":"594","messageId":"595","endLine":107,"endColumn":20},{"ruleId":"592","severity":1,"message":"682","line":109,"column":12,"nodeType":"594","messageId":"595","endLine":109,"endColumn":17},{"ruleId":"592","severity":1,"message":"683","line":109,"column":19,"nodeType":"594","messageId":"595","endLine":109,"endColumn":28},{"ruleId":"592","severity":1,"message":"684","line":112,"column":11,"nodeType":"594","messageId":"595","endLine":112,"endColumn":22},{"ruleId":"592","severity":1,"message":"685","line":136,"column":11,"nodeType":"594","messageId":"595","endLine":136,"endColumn":23},{"ruleId":"592","severity":1,"message":"686","line":164,"column":11,"nodeType":"594","messageId":"595","endLine":164,"endColumn":20},{"ruleId":"592","severity":1,"message":"687","line":169,"column":12,"nodeType":"594","messageId":"595","endLine":169,"endColumn":20},{"ruleId":"592","severity":1,"message":"688","line":169,"column":22,"nodeType":"594","messageId":"595","endLine":169,"endColumn":33},{"ruleId":"592","severity":1,"message":"689","line":170,"column":12,"nodeType":"594","messageId":"595","endLine":170,"endColumn":17},{"ruleId":"592","severity":1,"message":"690","line":170,"column":19,"nodeType":"594","messageId":"595","endLine":170,"endColumn":27},{"ruleId":"592","severity":1,"message":"638","line":1,"column":10,"nodeType":"594","messageId":"595","endLine":1,"endColumn":16},{"ruleId":"691","severity":1,"message":"692","line":22,"column":5,"nodeType":"594","messageId":"693","endLine":22,"endColumn":7},{"ruleId":"691","severity":1,"message":"692","line":22,"column":10,"nodeType":"594","messageId":"693","endLine":22,"endColumn":12},{"ruleId":"646","severity":1,"message":"650","line":298,"column":34,"nodeType":"648","messageId":"651","endLine":298,"endColumn":36},{"ruleId":"629","severity":1,"message":"630","line":300,"column":39,"nodeType":"631","messageId":"632","endLine":300,"endColumn":41},{"ruleId":"629","severity":1,"message":"630","line":304,"column":41,"nodeType":"631","messageId":"632","endLine":304,"endColumn":43},{"ruleId":"691","severity":1,"message":"692","line":22,"column":5,"nodeType":"594","messageId":"693","endLine":22,"endColumn":7},{"ruleId":"691","severity":1,"message":"692","line":22,"column":10,"nodeType":"594","messageId":"693","endLine":22,"endColumn":12},{"ruleId":"617","severity":1,"message":"677","line":87,"column":6,"nodeType":"619","endLine":87,"endColumn":8,"suggestions":"694"},{"ruleId":"691","severity":1,"message":"692","line":27,"column":9,"nodeType":"594","messageId":"693","endLine":27,"endColumn":11},{"ruleId":"691","severity":1,"message":"692","line":27,"column":14,"nodeType":"594","messageId":"693","endLine":27,"endColumn":16},{"ruleId":"691","severity":1,"message":"695","line":50,"column":9,"nodeType":"594","messageId":"693","endLine":50,"endColumn":15},{"ruleId":"691","severity":1,"message":"695","line":50,"column":18,"nodeType":"594","messageId":"693","endLine":50,"endColumn":24},{"ruleId":"691","severity":1,"message":"696","line":61,"column":9,"nodeType":"594","messageId":"693","endLine":61,"endColumn":13},{"ruleId":"691","severity":1,"message":"696","line":61,"column":16,"nodeType":"594","messageId":"693","endLine":61,"endColumn":20},{"ruleId":"646","severity":1,"message":"650","line":242,"column":35,"nodeType":"648","messageId":"651","endLine":242,"endColumn":37},{"ruleId":"629","severity":1,"message":"630","line":245,"column":39,"nodeType":"631","messageId":"632","endLine":245,"endColumn":41},{"ruleId":"646","severity":1,"message":"650","line":276,"column":34,"nodeType":"648","messageId":"651","endLine":276,"endColumn":36},{"ruleId":"629","severity":1,"message":"630","line":277,"column":39,"nodeType":"631","messageId":"632","endLine":277,"endColumn":41},{"ruleId":"592","severity":1,"message":"697","line":1,"column":17,"nodeType":"594","messageId":"595","endLine":1,"endColumn":25},{"ruleId":"592","severity":1,"message":"601","line":2,"column":16,"nodeType":"594","messageId":"595","endLine":2,"endColumn":24},{"ruleId":"592","severity":1,"message":"698","line":1,"column":17,"nodeType":"594","messageId":"595","endLine":1,"endColumn":26},{"ruleId":"592","severity":1,"message":"699","line":1,"column":28,"nodeType":"594","messageId":"595","endLine":1,"endColumn":34},{"ruleId":"592","severity":1,"message":"601","line":1,"column":36,"nodeType":"594","messageId":"595","endLine":1,"endColumn":44},{"ruleId":"592","severity":1,"message":"601","line":3,"column":16,"nodeType":"594","messageId":"595","endLine":3,"endColumn":24},{"ruleId":"629","severity":1,"message":"630","line":17,"column":34,"nodeType":"631","messageId":"632","endLine":17,"endColumn":36},{"ruleId":"592","severity":1,"message":"698","line":1,"column":17,"nodeType":"594","messageId":"595","endLine":1,"endColumn":26},{"ruleId":"592","severity":1,"message":"601","line":1,"column":28,"nodeType":"594","messageId":"595","endLine":1,"endColumn":36},{"ruleId":"592","severity":1,"message":"700","line":2,"column":10,"nodeType":"594","messageId":"595","endLine":2,"endColumn":13},{"ruleId":"592","severity":1,"message":"653","line":3,"column":10,"nodeType":"594","messageId":"595","endLine":3,"endColumn":14},{"ruleId":"592","severity":1,"message":"654","line":3,"column":16,"nodeType":"594","messageId":"595","endLine":3,"endColumn":22},{"ruleId":"592","severity":1,"message":"634","line":3,"column":61,"nodeType":"594","messageId":"595","endLine":3,"endColumn":73},{"ruleId":"592","severity":1,"message":"658","line":3,"column":75,"nodeType":"594","messageId":"595","endLine":3,"endColumn":91},{"ruleId":"592","severity":1,"message":"638","line":4,"column":10,"nodeType":"594","messageId":"595","endLine":4,"endColumn":16},{"ruleId":"592","severity":1,"message":"665","line":4,"column":79,"nodeType":"594","messageId":"595","endLine":4,"endColumn":90},{"ruleId":"592","severity":1,"message":"668","line":6,"column":10,"nodeType":"594","messageId":"595","endLine":6,"endColumn":19},{"ruleId":"592","severity":1,"message":"701","line":7,"column":10,"nodeType":"594","messageId":"595","endLine":7,"endColumn":23},{"ruleId":"629","severity":1,"message":"630","line":162,"column":68,"nodeType":"631","messageId":"632","endLine":162,"endColumn":70},{"ruleId":"629","severity":1,"message":"630","line":170,"column":68,"nodeType":"631","messageId":"632","endLine":170,"endColumn":70},{"ruleId":"629","severity":1,"message":"630","line":324,"column":69,"nodeType":"631","messageId":"632","endLine":324,"endColumn":71},{"ruleId":"629","severity":1,"message":"630","line":332,"column":69,"nodeType":"631","messageId":"632","endLine":332,"endColumn":71},{"ruleId":"629","severity":1,"message":"630","line":355,"column":68,"nodeType":"631","messageId":"632","endLine":355,"endColumn":70},{"ruleId":"629","severity":1,"message":"630","line":363,"column":68,"nodeType":"631","messageId":"632","endLine":363,"endColumn":70},"no-native-reassign",["702"],"no-negated-in-lhs",["703"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Loader' is defined but never used.","'DefaultLayout' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setLoader' is assigned a value but never used.","'PanoramaPhotosphereOutlined' is defined but never used.","'useState' is defined but never used.","'cilBell' is defined but never used.","'cilEnvelopeOpen' is defined but never used.","'cilList' is defined but never used.","'AppHeaderDropdown' is defined but never used.","'CSidebarBrand' is defined but never used.","'CIcon' is defined but never used.","'logoNegative' is defined but never used.","'sygnet' is defined but never used.","'CNavTitle' is defined but never used.","'get' is assigned a value but never used.","'response' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'arr' is assigned a value but never used.","'fetchOfferingAndDenominationsByDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'denominationsAndTotals'. Either include it or remove the dependency array. You can also do a functional update 'setDenominationsandTotals(d => ...)' if you only need 'denominationsAndTotals' in the 'setDenominationsandTotals' call.","ArrayExpression",["704"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'setsearchterm' is assigned a value but never used.","'results' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'searchapi'. Either include it or remove the dependency array.",["705"],"The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Alert' is defined but never used.","'Autocomplete' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'TextField' is defined but never used.","'CAlert' is defined but never used.","'DatePicker' is defined but never used.","'Controller' is defined but never used.","'useForm' is defined but never used.","'CDatePicker' is defined but never used.","'toDate' is defined but never used.","'setsearchbynameobj' is assigned a value but never used.","'flag' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["706"],"'Grid' is defined but never used.","'Button' is defined but never used.","'FormControlLabel' is defined but never used.","'RadioGroup' is defined but never used.","'Radio' is defined but never used.","'formLabelClasses' is defined but never used.","'CButton' is defined but never used.","'CCol' is defined but never used.","'CForm' is defined but never used.","'CFormFeedback' is defined but never used.","'CFormInput' is defined but never used.","'CFormLabel' is defined but never used.","'CFormSwitch' is defined but never used.","'CFormTextarea' is defined but never used.","'AlertMessage' is defined but never used.","'AppFooter' is defined but never used.","'setvalidity' is assigned a value but never used.","Assignments to the 'age' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'Typography' is defined but never used.","'CFormSelect' is defined but never used.","'CFormText' is defined but never used.","'familyheads' is assigned a value but never used.","'addresses' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'notify'. Either include it or remove the dependency array. You can also do a functional update 'setNotify(n => ...)' if you only need 'notify' in the 'setNotify' call.",["707"],"'searchfamilyhead' is assigned a value but never used.","'searchaddress' is assigned a value but never used.","'display2' is assigned a value but never used.","'focus' is assigned a value but never used.","'isFocused' is assigned a value but never used.","'makechanges' is assigned a value but never used.","'deleteRecord' is assigned a value but never used.","'Typograph' is assigned a value but never used.","'searchby' is assigned a value but never used.","'setsearchby' is assigned a value but never used.","'value' is assigned a value but never used.","'setvalue' is assigned a value but never used.","no-use-before-define","'mm' was used before it was defined.","usedBeforeDefined",["708"],"'frommm' was used before it was defined.","'tomm' was used before it was defined.","'Collapse' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'url' is defined but never used.","'DataEntryForm' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"711","fix":"713"},{"desc":"714","fix":"715"},{"desc":"716","fix":"717"},"Update the dependencies array to be: [denominationsAndTotals, report]",{"range":"718","text":"719"},"Update the dependencies array to be: [searchapi]",{"range":"720","text":"721"},{"range":"722","text":"721"},"Update the dependencies array to be: [notify, pageno]",{"range":"723","text":"724"},"Update the dependencies array to be: [notify]",{"range":"725","text":"726"},[9037,9083],"[denominationsAndTotals, report]",[9871,9874],"[searchapi]",[9009,9012],[2586,2594],"[notify, pageno]",[1962,1964],"[notify]"]